
build/debug/DW_resp4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007008  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000214  08007198  08007198  00017198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080073ac  080073ac  00020104  2**0
                  CONTENTS
  4 .ARM          00000000  080073ac  080073ac  00020104  2**0
                  CONTENTS
  5 .preinit_array 00000000  080073ac  080073ac  00020104  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080073ac  080073ac  000173ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080073b0  080073b0  000173b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000104  20000000  080073b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020104  2**0
                  CONTENTS
 10 .bss          000003c4  20000108  20000108  00020108  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  200004cc  200004cc  00020108  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020104  2**0
                  CONTENTS, READONLY
 13 .comment      00000033  00000000  00000000  00020134  2**0
                  CONTENTS, READONLY
 14 .debug_info   000334ed  00000000  00000000  00020167  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00007c14  00000000  00000000  00053654  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001b90  00000000  00000000  0005b268  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e529  00000000  00000000  0005cdf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000848d  00000000  00000000  0007b321  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_loc    0001b138  00000000  00000000  000837ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_ranges 00001a20  00000000  00000000  0009e8e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004894  00000000  00000000  000a0308  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <deregister_tm_clones>:
 8000190:	4803      	ldr	r0, [pc, #12]	; (80001a0 <deregister_tm_clones+0x10>)
 8000192:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <deregister_tm_clones+0x14>)
 8000194:	4283      	cmp	r3, r0
 8000196:	d002      	beq.n	800019e <deregister_tm_clones+0xe>
 8000198:	4b03      	ldr	r3, [pc, #12]	; (80001a8 <deregister_tm_clones+0x18>)
 800019a:	b103      	cbz	r3, 800019e <deregister_tm_clones+0xe>
 800019c:	4718      	bx	r3
 800019e:	4770      	bx	lr
 80001a0:	20000104 	.word	0x20000104
 80001a4:	20000104 	.word	0x20000104
 80001a8:	00000000 	.word	0x00000000

080001ac <register_tm_clones>:
 80001ac:	4805      	ldr	r0, [pc, #20]	; (80001c4 <register_tm_clones+0x18>)
 80001ae:	4906      	ldr	r1, [pc, #24]	; (80001c8 <register_tm_clones+0x1c>)
 80001b0:	1a0b      	subs	r3, r1, r0
 80001b2:	0fd9      	lsrs	r1, r3, #31
 80001b4:	eb01 01a3 	add.w	r1, r1, r3, asr #2
 80001b8:	1049      	asrs	r1, r1, #1
 80001ba:	d002      	beq.n	80001c2 <register_tm_clones+0x16>
 80001bc:	4b03      	ldr	r3, [pc, #12]	; (80001cc <register_tm_clones+0x20>)
 80001be:	b103      	cbz	r3, 80001c2 <register_tm_clones+0x16>
 80001c0:	4718      	bx	r3
 80001c2:	4770      	bx	lr
 80001c4:	20000104 	.word	0x20000104
 80001c8:	20000104 	.word	0x20000104
 80001cc:	00000000 	.word	0x00000000

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c06      	ldr	r4, [pc, #24]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b943      	cbnz	r3, 80001ea <__do_global_dtors_aux+0x1a>
 80001d8:	f7ff ffda 	bl	8000190 <deregister_tm_clones>
 80001dc:	4b04      	ldr	r3, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	b113      	cbz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001e0:	4804      	ldr	r0, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x24>)
 80001e2:	f3af 8000 	nop.w
 80001e6:	2301      	movs	r3, #1
 80001e8:	7023      	strb	r3, [r4, #0]
 80001ea:	bd10      	pop	{r4, pc}
 80001ec:	20000108 	.word	0x20000108
 80001f0:	00000000 	.word	0x00000000
 80001f4:	08007180 	.word	0x08007180

080001f8 <frame_dummy>:
 80001f8:	b508      	push	{r3, lr}
 80001fa:	4b04      	ldr	r3, [pc, #16]	; (800020c <frame_dummy+0x14>)
 80001fc:	b11b      	cbz	r3, 8000206 <frame_dummy+0xe>
 80001fe:	4904      	ldr	r1, [pc, #16]	; (8000210 <frame_dummy+0x18>)
 8000200:	4804      	ldr	r0, [pc, #16]	; (8000214 <frame_dummy+0x1c>)
 8000202:	f3af 8000 	nop.w
 8000206:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800020a:	e7cf      	b.n	80001ac <register_tm_clones>
 800020c:	00000000 	.word	0x00000000
 8000210:	2000010c 	.word	0x2000010c
 8000214:	08007180 	.word	0x08007180

08000218 <__assert_func>:
 8000218:	b500      	push	{lr}
 800021a:	4c0b      	ldr	r4, [pc, #44]	; (8000248 <__assert_func+0x30>)
 800021c:	6825      	ldr	r5, [r4, #0]
 800021e:	4614      	mov	r4, r2
 8000220:	68ee      	ldr	r6, [r5, #12]
 8000222:	461a      	mov	r2, r3
 8000224:	b085      	sub	sp, #20
 8000226:	4603      	mov	r3, r0
 8000228:	460d      	mov	r5, r1
 800022a:	b14c      	cbz	r4, 8000240 <__assert_func+0x28>
 800022c:	4907      	ldr	r1, [pc, #28]	; (800024c <__assert_func+0x34>)
 800022e:	9500      	str	r5, [sp, #0]
 8000230:	e9cd 1401 	strd	r1, r4, [sp, #4]
 8000234:	4630      	mov	r0, r6
 8000236:	4906      	ldr	r1, [pc, #24]	; (8000250 <__assert_func+0x38>)
 8000238:	f000 f828 	bl	800028c <fiprintf>
 800023c:	f000 fd4a 	bl	8000cd4 <abort>
 8000240:	4904      	ldr	r1, [pc, #16]	; (8000254 <__assert_func+0x3c>)
 8000242:	460c      	mov	r4, r1
 8000244:	e7f3      	b.n	800022e <__assert_func+0x16>
 8000246:	bf00      	nop
 8000248:	20000000 	.word	0x20000000
 800024c:	08007330 	.word	0x08007330
 8000250:	08007340 	.word	0x08007340
 8000254:	0800733c 	.word	0x0800733c

08000258 <__assert>:
 8000258:	b508      	push	{r3, lr}
 800025a:	4613      	mov	r3, r2
 800025c:	2200      	movs	r2, #0
 800025e:	f7ff ffdb 	bl	8000218 <__assert_func>
 8000262:	bf00      	nop

08000264 <__errno>:
 8000264:	4b01      	ldr	r3, [pc, #4]	; (800026c <__errno+0x8>)
 8000266:	6818      	ldr	r0, [r3, #0]
 8000268:	4770      	bx	lr
 800026a:	bf00      	nop
 800026c:	20000000 	.word	0x20000000

08000270 <_fiprintf_r>:
 8000270:	b40c      	push	{r2, r3}
 8000272:	b500      	push	{lr}
 8000274:	b083      	sub	sp, #12
 8000276:	ab04      	add	r3, sp, #16
 8000278:	f853 2b04 	ldr.w	r2, [r3], #4
 800027c:	9301      	str	r3, [sp, #4]
 800027e:	f000 f905 	bl	800048c <_vfiprintf_r>
 8000282:	b003      	add	sp, #12
 8000284:	f85d eb04 	ldr.w	lr, [sp], #4
 8000288:	b002      	add	sp, #8
 800028a:	4770      	bx	lr

0800028c <fiprintf>:
 800028c:	b40e      	push	{r1, r2, r3}
 800028e:	b510      	push	{r4, lr}
 8000290:	b083      	sub	sp, #12
 8000292:	ab05      	add	r3, sp, #20
 8000294:	4c06      	ldr	r4, [pc, #24]	; (80002b0 <fiprintf+0x24>)
 8000296:	f853 2b04 	ldr.w	r2, [r3], #4
 800029a:	9301      	str	r3, [sp, #4]
 800029c:	4601      	mov	r1, r0
 800029e:	6820      	ldr	r0, [r4, #0]
 80002a0:	f000 f8f4 	bl	800048c <_vfiprintf_r>
 80002a4:	b003      	add	sp, #12
 80002a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80002aa:	b003      	add	sp, #12
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop
 80002b0:	20000000 	.word	0x20000000

080002b4 <__libc_init_array>:
 80002b4:	b570      	push	{r4, r5, r6, lr}
 80002b6:	4e0d      	ldr	r6, [pc, #52]	; (80002ec <__libc_init_array+0x38>)
 80002b8:	4d0d      	ldr	r5, [pc, #52]	; (80002f0 <__libc_init_array+0x3c>)
 80002ba:	1b76      	subs	r6, r6, r5
 80002bc:	10b6      	asrs	r6, r6, #2
 80002be:	d006      	beq.n	80002ce <__libc_init_array+0x1a>
 80002c0:	2400      	movs	r4, #0
 80002c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80002c6:	3401      	adds	r4, #1
 80002c8:	4798      	blx	r3
 80002ca:	42a6      	cmp	r6, r4
 80002cc:	d1f9      	bne.n	80002c2 <__libc_init_array+0xe>
 80002ce:	4e09      	ldr	r6, [pc, #36]	; (80002f4 <__libc_init_array+0x40>)
 80002d0:	4d09      	ldr	r5, [pc, #36]	; (80002f8 <__libc_init_array+0x44>)
 80002d2:	1b76      	subs	r6, r6, r5
 80002d4:	f006 ff54 	bl	8007180 <_init>
 80002d8:	10b6      	asrs	r6, r6, #2
 80002da:	d006      	beq.n	80002ea <__libc_init_array+0x36>
 80002dc:	2400      	movs	r4, #0
 80002de:	f855 3b04 	ldr.w	r3, [r5], #4
 80002e2:	3401      	adds	r4, #1
 80002e4:	4798      	blx	r3
 80002e6:	42a6      	cmp	r6, r4
 80002e8:	d1f9      	bne.n	80002de <__libc_init_array+0x2a>
 80002ea:	bd70      	pop	{r4, r5, r6, pc}
 80002ec:	080073ac 	.word	0x080073ac
 80002f0:	080073ac 	.word	0x080073ac
 80002f4:	080073b0 	.word	0x080073b0
 80002f8:	080073ac 	.word	0x080073ac

080002fc <memcmp>:
 80002fc:	2a03      	cmp	r2, #3
 80002fe:	b570      	push	{r4, r5, r6, lr}
 8000300:	d915      	bls.n	800032e <memcmp+0x32>
 8000302:	ea40 0c01 	orr.w	ip, r0, r1
 8000306:	f01c 0f03 	tst.w	ip, #3
 800030a:	4604      	mov	r4, r0
 800030c:	460b      	mov	r3, r1
 800030e:	d121      	bne.n	8000354 <memcmp+0x58>
 8000310:	4619      	mov	r1, r3
 8000312:	4620      	mov	r0, r4
 8000314:	680e      	ldr	r6, [r1, #0]
 8000316:	6805      	ldr	r5, [r0, #0]
 8000318:	42b5      	cmp	r5, r6
 800031a:	f104 0404 	add.w	r4, r4, #4
 800031e:	f103 0304 	add.w	r3, r3, #4
 8000322:	d117      	bne.n	8000354 <memcmp+0x58>
 8000324:	3a04      	subs	r2, #4
 8000326:	2a03      	cmp	r2, #3
 8000328:	4620      	mov	r0, r4
 800032a:	4619      	mov	r1, r3
 800032c:	d8f0      	bhi.n	8000310 <memcmp+0x14>
 800032e:	1e54      	subs	r4, r2, #1
 8000330:	b1a2      	cbz	r2, 800035c <memcmp+0x60>
 8000332:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000336:	3901      	subs	r1, #1
 8000338:	e001      	b.n	800033e <memcmp+0x42>
 800033a:	18c3      	adds	r3, r0, r3
 800033c:	d00c      	beq.n	8000358 <memcmp+0x5c>
 800033e:	f81c ef01 	ldrb.w	lr, [ip, #1]!
 8000342:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8000346:	4596      	cmp	lr, r2
 8000348:	eba4 030c 	sub.w	r3, r4, ip
 800034c:	d0f5      	beq.n	800033a <memcmp+0x3e>
 800034e:	ebae 0002 	sub.w	r0, lr, r2
 8000352:	bd70      	pop	{r4, r5, r6, pc}
 8000354:	1e54      	subs	r4, r2, #1
 8000356:	e7ec      	b.n	8000332 <memcmp+0x36>
 8000358:	4618      	mov	r0, r3
 800035a:	bd70      	pop	{r4, r5, r6, pc}
 800035c:	4610      	mov	r0, r2
 800035e:	bd70      	pop	{r4, r5, r6, pc}

08000360 <memset>:
 8000360:	0783      	lsls	r3, r0, #30
 8000362:	b530      	push	{r4, r5, lr}
 8000364:	d048      	beq.n	80003f8 <memset+0x98>
 8000366:	1e54      	subs	r4, r2, #1
 8000368:	2a00      	cmp	r2, #0
 800036a:	d03f      	beq.n	80003ec <memset+0x8c>
 800036c:	b2ca      	uxtb	r2, r1
 800036e:	4603      	mov	r3, r0
 8000370:	e001      	b.n	8000376 <memset+0x16>
 8000372:	3c01      	subs	r4, #1
 8000374:	d33a      	bcc.n	80003ec <memset+0x8c>
 8000376:	f803 2b01 	strb.w	r2, [r3], #1
 800037a:	079d      	lsls	r5, r3, #30
 800037c:	d1f9      	bne.n	8000372 <memset+0x12>
 800037e:	2c03      	cmp	r4, #3
 8000380:	d92d      	bls.n	80003de <memset+0x7e>
 8000382:	b2cd      	uxtb	r5, r1
 8000384:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8000388:	2c0f      	cmp	r4, #15
 800038a:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 800038e:	d936      	bls.n	80003fe <memset+0x9e>
 8000390:	f1a4 0210 	sub.w	r2, r4, #16
 8000394:	f022 0c0f 	bic.w	ip, r2, #15
 8000398:	f103 0e20 	add.w	lr, r3, #32
 800039c:	44e6      	add	lr, ip
 800039e:	ea4f 1c12 	mov.w	ip, r2, lsr #4
 80003a2:	f103 0210 	add.w	r2, r3, #16
 80003a6:	e942 5504 	strd	r5, r5, [r2, #-16]
 80003aa:	e942 5502 	strd	r5, r5, [r2, #-8]
 80003ae:	3210      	adds	r2, #16
 80003b0:	4572      	cmp	r2, lr
 80003b2:	d1f8      	bne.n	80003a6 <memset+0x46>
 80003b4:	f10c 0201 	add.w	r2, ip, #1
 80003b8:	f014 0f0c 	tst.w	r4, #12
 80003bc:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 80003c0:	f004 0c0f 	and.w	ip, r4, #15
 80003c4:	d013      	beq.n	80003ee <memset+0x8e>
 80003c6:	f1ac 0304 	sub.w	r3, ip, #4
 80003ca:	f023 0303 	bic.w	r3, r3, #3
 80003ce:	3304      	adds	r3, #4
 80003d0:	4413      	add	r3, r2
 80003d2:	f842 5b04 	str.w	r5, [r2], #4
 80003d6:	4293      	cmp	r3, r2
 80003d8:	d1fb      	bne.n	80003d2 <memset+0x72>
 80003da:	f00c 0403 	and.w	r4, ip, #3
 80003de:	b12c      	cbz	r4, 80003ec <memset+0x8c>
 80003e0:	b2ca      	uxtb	r2, r1
 80003e2:	441c      	add	r4, r3
 80003e4:	f803 2b01 	strb.w	r2, [r3], #1
 80003e8:	429c      	cmp	r4, r3
 80003ea:	d1fb      	bne.n	80003e4 <memset+0x84>
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	4664      	mov	r4, ip
 80003f0:	4613      	mov	r3, r2
 80003f2:	2c00      	cmp	r4, #0
 80003f4:	d1f4      	bne.n	80003e0 <memset+0x80>
 80003f6:	e7f9      	b.n	80003ec <memset+0x8c>
 80003f8:	4603      	mov	r3, r0
 80003fa:	4614      	mov	r4, r2
 80003fc:	e7bf      	b.n	800037e <memset+0x1e>
 80003fe:	461a      	mov	r2, r3
 8000400:	46a4      	mov	ip, r4
 8000402:	e7e0      	b.n	80003c6 <memset+0x66>

08000404 <__sfputc_r>:
 8000404:	6893      	ldr	r3, [r2, #8]
 8000406:	3b01      	subs	r3, #1
 8000408:	2b00      	cmp	r3, #0
 800040a:	6093      	str	r3, [r2, #8]
 800040c:	da11      	bge.n	8000432 <__sfputc_r+0x2e>
 800040e:	b410      	push	{r4}
 8000410:	6994      	ldr	r4, [r2, #24]
 8000412:	42a3      	cmp	r3, r4
 8000414:	db09      	blt.n	800042a <__sfputc_r+0x26>
 8000416:	290a      	cmp	r1, #10
 8000418:	d007      	beq.n	800042a <__sfputc_r+0x26>
 800041a:	6813      	ldr	r3, [r2, #0]
 800041c:	1c58      	adds	r0, r3, #1
 800041e:	6010      	str	r0, [r2, #0]
 8000420:	7019      	strb	r1, [r3, #0]
 8000422:	4608      	mov	r0, r1
 8000424:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000428:	4770      	bx	lr
 800042a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800042e:	f000 bb6b 	b.w	8000b08 <__swbuf_r>
 8000432:	6813      	ldr	r3, [r2, #0]
 8000434:	1c58      	adds	r0, r3, #1
 8000436:	6010      	str	r0, [r2, #0]
 8000438:	7019      	strb	r1, [r3, #0]
 800043a:	4608      	mov	r0, r1
 800043c:	4770      	bx	lr
 800043e:	bf00      	nop

08000440 <__sfputs_r>:
 8000440:	b19b      	cbz	r3, 800046a <__sfputs_r+0x2a>
 8000442:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000444:	4413      	add	r3, r2
 8000446:	4606      	mov	r6, r0
 8000448:	460f      	mov	r7, r1
 800044a:	1e54      	subs	r4, r2, #1
 800044c:	1e5d      	subs	r5, r3, #1
 800044e:	e001      	b.n	8000454 <__sfputs_r+0x14>
 8000450:	42ac      	cmp	r4, r5
 8000452:	d008      	beq.n	8000466 <__sfputs_r+0x26>
 8000454:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8000458:	463a      	mov	r2, r7
 800045a:	4630      	mov	r0, r6
 800045c:	f7ff ffd2 	bl	8000404 <__sfputc_r>
 8000460:	1c43      	adds	r3, r0, #1
 8000462:	d1f5      	bne.n	8000450 <__sfputs_r+0x10>
 8000464:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000466:	2000      	movs	r0, #0
 8000468:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800046a:	2000      	movs	r0, #0
 800046c:	4770      	bx	lr
 800046e:	bf00      	nop

08000470 <__sprint_r>:
 8000470:	6893      	ldr	r3, [r2, #8]
 8000472:	b510      	push	{r4, lr}
 8000474:	4614      	mov	r4, r2
 8000476:	b913      	cbnz	r3, 800047e <__sprint_r+0xe>
 8000478:	6053      	str	r3, [r2, #4]
 800047a:	4618      	mov	r0, r3
 800047c:	bd10      	pop	{r4, pc}
 800047e:	f000 fe41 	bl	8001104 <__sfvwrite_r>
 8000482:	2300      	movs	r3, #0
 8000484:	e9c4 3301 	strd	r3, r3, [r4, #4]
 8000488:	bd10      	pop	{r4, pc}
 800048a:	bf00      	nop

0800048c <_vfiprintf_r>:
 800048c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000490:	4688      	mov	r8, r1
 8000492:	b09f      	sub	sp, #124	; 0x7c
 8000494:	4615      	mov	r5, r2
 8000496:	461c      	mov	r4, r3
 8000498:	4681      	mov	r9, r0
 800049a:	b118      	cbz	r0, 80004a4 <_vfiprintf_r+0x18>
 800049c:	6983      	ldr	r3, [r0, #24]
 800049e:	2b00      	cmp	r3, #0
 80004a0:	f000 80a2 	beq.w	80005e8 <_vfiprintf_r+0x15c>
 80004a4:	4b92      	ldr	r3, [pc, #584]	; (80006f0 <_vfiprintf_r+0x264>)
 80004a6:	4598      	cmp	r8, r3
 80004a8:	f000 80a4 	beq.w	80005f4 <_vfiprintf_r+0x168>
 80004ac:	4b91      	ldr	r3, [pc, #580]	; (80006f4 <_vfiprintf_r+0x268>)
 80004ae:	4598      	cmp	r8, r3
 80004b0:	f000 80b1 	beq.w	8000616 <_vfiprintf_r+0x18a>
 80004b4:	4b90      	ldr	r3, [pc, #576]	; (80006f8 <_vfiprintf_r+0x26c>)
 80004b6:	4598      	cmp	r8, r3
 80004b8:	bf08      	it	eq
 80004ba:	f8d9 800c 	ldreq.w	r8, [r9, #12]
 80004be:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 80004c2:	0718      	lsls	r0, r3, #28
 80004c4:	f140 809d 	bpl.w	8000602 <_vfiprintf_r+0x176>
 80004c8:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	f000 8098 	beq.w	8000602 <_vfiprintf_r+0x176>
 80004d2:	2300      	movs	r3, #0
 80004d4:	930b      	str	r3, [sp, #44]	; 0x2c
 80004d6:	7829      	ldrb	r1, [r5, #0]
 80004d8:	4e88      	ldr	r6, [pc, #544]	; (80006fc <_vfiprintf_r+0x270>)
 80004da:	9405      	str	r4, [sp, #20]
 80004dc:	2320      	movs	r3, #32
 80004de:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
 80004e2:	2330      	movs	r3, #48	; 0x30
 80004e4:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
 80004e8:	2701      	movs	r7, #1
 80004ea:	2900      	cmp	r1, #0
 80004ec:	d074      	beq.n	80005d8 <_vfiprintf_r+0x14c>
 80004ee:	462c      	mov	r4, r5
 80004f0:	460b      	mov	r3, r1
 80004f2:	e004      	b.n	80004fe <_vfiprintf_r+0x72>
 80004f4:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	f000 808f 	beq.w	800061c <_vfiprintf_r+0x190>
 80004fe:	2b25      	cmp	r3, #37	; 0x25
 8000500:	d1f8      	bne.n	80004f4 <_vfiprintf_r+0x68>
 8000502:	ebb4 0b05 	subs.w	fp, r4, r5
 8000506:	f040 808c 	bne.w	8000622 <_vfiprintf_r+0x196>
 800050a:	7823      	ldrb	r3, [r4, #0]
 800050c:	2b00      	cmp	r3, #0
 800050e:	d063      	beq.n	80005d8 <_vfiprintf_r+0x14c>
 8000510:	2300      	movs	r3, #0
 8000512:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000516:	e9cd 2307 	strd	r2, r3, [sp, #28]
 800051a:	9306      	str	r3, [sp, #24]
 800051c:	9309      	str	r3, [sp, #36]	; 0x24
 800051e:	f88d 305b 	strb.w	r3, [sp, #91]	; 0x5b
 8000522:	931c      	str	r3, [sp, #112]	; 0x70
 8000524:	3401      	adds	r4, #1
 8000526:	e004      	b.n	8000532 <_vfiprintf_r+0xa6>
 8000528:	9a06      	ldr	r2, [sp, #24]
 800052a:	fa07 f303 	lsl.w	r3, r7, r3
 800052e:	4313      	orrs	r3, r2
 8000530:	9306      	str	r3, [sp, #24]
 8000532:	4625      	mov	r5, r4
 8000534:	2205      	movs	r2, #5
 8000536:	f814 1b01 	ldrb.w	r1, [r4], #1
 800053a:	4630      	mov	r0, r6
 800053c:	f001 f830 	bl	80015a0 <memchr>
 8000540:	1b83      	subs	r3, r0, r6
 8000542:	2800      	cmp	r0, #0
 8000544:	d1f0      	bne.n	8000528 <_vfiprintf_r+0x9c>
 8000546:	9b06      	ldr	r3, [sp, #24]
 8000548:	06d9      	lsls	r1, r3, #27
 800054a:	bf44      	itt	mi
 800054c:	2220      	movmi	r2, #32
 800054e:	f88d 205b 	strbmi.w	r2, [sp, #91]	; 0x5b
 8000552:	7829      	ldrb	r1, [r5, #0]
 8000554:	071a      	lsls	r2, r3, #28
 8000556:	bf44      	itt	mi
 8000558:	222b      	movmi	r2, #43	; 0x2b
 800055a:	f88d 205b 	strbmi.w	r2, [sp, #91]	; 0x5b
 800055e:	292a      	cmp	r1, #42	; 0x2a
 8000560:	d170      	bne.n	8000644 <_vfiprintf_r+0x1b8>
 8000562:	9a05      	ldr	r2, [sp, #20]
 8000564:	6811      	ldr	r1, [r2, #0]
 8000566:	3204      	adds	r2, #4
 8000568:	2900      	cmp	r1, #0
 800056a:	9205      	str	r2, [sp, #20]
 800056c:	f2c0 809b 	blt.w	80006a6 <_vfiprintf_r+0x21a>
 8000570:	9109      	str	r1, [sp, #36]	; 0x24
 8000572:	7869      	ldrb	r1, [r5, #1]
 8000574:	3501      	adds	r5, #1
 8000576:	292e      	cmp	r1, #46	; 0x2e
 8000578:	d076      	beq.n	8000668 <_vfiprintf_r+0x1dc>
 800057a:	4c61      	ldr	r4, [pc, #388]	; (8000700 <_vfiprintf_r+0x274>)
 800057c:	2203      	movs	r2, #3
 800057e:	4620      	mov	r0, r4
 8000580:	f001 f80e 	bl	80015a0 <memchr>
 8000584:	b138      	cbz	r0, 8000596 <_vfiprintf_r+0x10a>
 8000586:	9b06      	ldr	r3, [sp, #24]
 8000588:	1b00      	subs	r0, r0, r4
 800058a:	2440      	movs	r4, #64	; 0x40
 800058c:	fa04 f000 	lsl.w	r0, r4, r0
 8000590:	4303      	orrs	r3, r0
 8000592:	9306      	str	r3, [sp, #24]
 8000594:	3501      	adds	r5, #1
 8000596:	f815 1b01 	ldrb.w	r1, [r5], #1
 800059a:	485a      	ldr	r0, [pc, #360]	; (8000704 <_vfiprintf_r+0x278>)
 800059c:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
 80005a0:	2206      	movs	r2, #6
 80005a2:	f000 fffd 	bl	80015a0 <memchr>
 80005a6:	2800      	cmp	r0, #0
 80005a8:	f000 8083 	beq.w	80006b2 <_vfiprintf_r+0x226>
 80005ac:	4b56      	ldr	r3, [pc, #344]	; (8000708 <_vfiprintf_r+0x27c>)
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d06d      	beq.n	800068e <_vfiprintf_r+0x202>
 80005b2:	aa05      	add	r2, sp, #20
 80005b4:	9200      	str	r2, [sp, #0]
 80005b6:	4b55      	ldr	r3, [pc, #340]	; (800070c <_vfiprintf_r+0x280>)
 80005b8:	4642      	mov	r2, r8
 80005ba:	a906      	add	r1, sp, #24
 80005bc:	4648      	mov	r0, r9
 80005be:	f3af 8000 	nop.w
 80005c2:	9003      	str	r0, [sp, #12]
 80005c4:	9b03      	ldr	r3, [sp, #12]
 80005c6:	3301      	adds	r3, #1
 80005c8:	d006      	beq.n	80005d8 <_vfiprintf_r+0x14c>
 80005ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80005cc:	9a03      	ldr	r2, [sp, #12]
 80005ce:	7829      	ldrb	r1, [r5, #0]
 80005d0:	4413      	add	r3, r2
 80005d2:	930b      	str	r3, [sp, #44]	; 0x2c
 80005d4:	2900      	cmp	r1, #0
 80005d6:	d18a      	bne.n	80004ee <_vfiprintf_r+0x62>
 80005d8:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 80005dc:	065b      	lsls	r3, r3, #25
 80005de:	d417      	bmi.n	8000610 <_vfiprintf_r+0x184>
 80005e0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80005e2:	b01f      	add	sp, #124	; 0x7c
 80005e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80005e8:	f000 fd6c 	bl	80010c4 <__sinit>
 80005ec:	4b40      	ldr	r3, [pc, #256]	; (80006f0 <_vfiprintf_r+0x264>)
 80005ee:	4598      	cmp	r8, r3
 80005f0:	f47f af5c 	bne.w	80004ac <_vfiprintf_r+0x20>
 80005f4:	f8d9 8004 	ldr.w	r8, [r9, #4]
 80005f8:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 80005fc:	0718      	lsls	r0, r3, #28
 80005fe:	f53f af63 	bmi.w	80004c8 <_vfiprintf_r+0x3c>
 8000602:	4641      	mov	r1, r8
 8000604:	4648      	mov	r0, r9
 8000606:	f000 fae3 	bl	8000bd0 <__swsetup_r>
 800060a:	2800      	cmp	r0, #0
 800060c:	f43f af61 	beq.w	80004d2 <_vfiprintf_r+0x46>
 8000610:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000614:	e7e5      	b.n	80005e2 <_vfiprintf_r+0x156>
 8000616:	f8d9 8008 	ldr.w	r8, [r9, #8]
 800061a:	e750      	b.n	80004be <_vfiprintf_r+0x32>
 800061c:	ebb4 0b05 	subs.w	fp, r4, r5
 8000620:	d0da      	beq.n	80005d8 <_vfiprintf_r+0x14c>
 8000622:	46aa      	mov	sl, r5
 8000624:	f1c5 0501 	rsb	r5, r5, #1
 8000628:	e003      	b.n	8000632 <_vfiprintf_r+0x1a6>
 800062a:	4593      	cmp	fp, r2
 800062c:	d936      	bls.n	800069c <_vfiprintf_r+0x210>
 800062e:	f81a 1f01 	ldrb.w	r1, [sl, #1]!
 8000632:	4642      	mov	r2, r8
 8000634:	4648      	mov	r0, r9
 8000636:	f7ff fee5 	bl	8000404 <__sfputc_r>
 800063a:	3001      	adds	r0, #1
 800063c:	eb05 020a 	add.w	r2, r5, sl
 8000640:	d1f3      	bne.n	800062a <_vfiprintf_r+0x19e>
 8000642:	e7c9      	b.n	80005d8 <_vfiprintf_r+0x14c>
 8000644:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8000648:	2a09      	cmp	r2, #9
 800064a:	d894      	bhi.n	8000576 <_vfiprintf_r+0xea>
 800064c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800064e:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8000652:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000656:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 800065a:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800065e:	2a09      	cmp	r2, #9
 8000660:	d9f5      	bls.n	800064e <_vfiprintf_r+0x1c2>
 8000662:	292e      	cmp	r1, #46	; 0x2e
 8000664:	9309      	str	r3, [sp, #36]	; 0x24
 8000666:	d188      	bne.n	800057a <_vfiprintf_r+0xee>
 8000668:	7869      	ldrb	r1, [r5, #1]
 800066a:	292a      	cmp	r1, #42	; 0x2a
 800066c:	d12b      	bne.n	80006c6 <_vfiprintf_r+0x23a>
 800066e:	9b05      	ldr	r3, [sp, #20]
 8000670:	78a9      	ldrb	r1, [r5, #2]
 8000672:	681a      	ldr	r2, [r3, #0]
 8000674:	9207      	str	r2, [sp, #28]
 8000676:	3304      	adds	r3, #4
 8000678:	2a00      	cmp	r2, #0
 800067a:	f105 0002 	add.w	r0, r5, #2
 800067e:	9305      	str	r3, [sp, #20]
 8000680:	bfb8      	it	lt
 8000682:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8000686:	4605      	mov	r5, r0
 8000688:	bfb8      	it	lt
 800068a:	9307      	strlt	r3, [sp, #28]
 800068c:	e775      	b.n	800057a <_vfiprintf_r+0xee>
 800068e:	9b05      	ldr	r3, [sp, #20]
 8000690:	3307      	adds	r3, #7
 8000692:	f023 0307 	bic.w	r3, r3, #7
 8000696:	3308      	adds	r3, #8
 8000698:	9305      	str	r3, [sp, #20]
 800069a:	e796      	b.n	80005ca <_vfiprintf_r+0x13e>
 800069c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800069e:	7823      	ldrb	r3, [r4, #0]
 80006a0:	445a      	add	r2, fp
 80006a2:	920b      	str	r2, [sp, #44]	; 0x2c
 80006a4:	e732      	b.n	800050c <_vfiprintf_r+0x80>
 80006a6:	4249      	negs	r1, r1
 80006a8:	f043 0302 	orr.w	r3, r3, #2
 80006ac:	9109      	str	r1, [sp, #36]	; 0x24
 80006ae:	9306      	str	r3, [sp, #24]
 80006b0:	e75f      	b.n	8000572 <_vfiprintf_r+0xe6>
 80006b2:	aa05      	add	r2, sp, #20
 80006b4:	9200      	str	r2, [sp, #0]
 80006b6:	4b15      	ldr	r3, [pc, #84]	; (800070c <_vfiprintf_r+0x280>)
 80006b8:	4642      	mov	r2, r8
 80006ba:	a906      	add	r1, sp, #24
 80006bc:	4648      	mov	r0, r9
 80006be:	f000 f8cb 	bl	8000858 <_printf_i>
 80006c2:	9003      	str	r0, [sp, #12]
 80006c4:	e77e      	b.n	80005c4 <_vfiprintf_r+0x138>
 80006c6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80006ca:	2300      	movs	r3, #0
 80006cc:	2a09      	cmp	r2, #9
 80006ce:	9307      	str	r3, [sp, #28]
 80006d0:	f105 0501 	add.w	r5, r5, #1
 80006d4:	f63f af51 	bhi.w	800057a <_vfiprintf_r+0xee>
 80006d8:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 80006dc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80006e0:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80006e4:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80006e8:	2a09      	cmp	r2, #9
 80006ea:	d9f5      	bls.n	80006d8 <_vfiprintf_r+0x24c>
 80006ec:	9307      	str	r3, [sp, #28]
 80006ee:	e744      	b.n	800057a <_vfiprintf_r+0xee>
 80006f0:	080071dc 	.word	0x080071dc
 80006f4:	080071bc 	.word	0x080071bc
 80006f8:	0800719c 	.word	0x0800719c
 80006fc:	08007370 	.word	0x08007370
 8000700:	08007378 	.word	0x08007378
 8000704:	0800737c 	.word	0x0800737c
 8000708:	00000000 	.word	0x00000000
 800070c:	08000441 	.word	0x08000441

08000710 <vfiprintf>:
 8000710:	b410      	push	{r4}
 8000712:	4c05      	ldr	r4, [pc, #20]	; (8000728 <vfiprintf+0x18>)
 8000714:	4684      	mov	ip, r0
 8000716:	4613      	mov	r3, r2
 8000718:	6820      	ldr	r0, [r4, #0]
 800071a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800071e:	460a      	mov	r2, r1
 8000720:	4661      	mov	r1, ip
 8000722:	f7ff beb3 	b.w	800048c <_vfiprintf_r>
 8000726:	bf00      	nop
 8000728:	20000000 	.word	0x20000000

0800072c <_printf_common>:
 800072c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000730:	4692      	mov	sl, r2
 8000732:	461f      	mov	r7, r3
 8000734:	690a      	ldr	r2, [r1, #16]
 8000736:	688b      	ldr	r3, [r1, #8]
 8000738:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 800073c:	429a      	cmp	r2, r3
 800073e:	bfb8      	it	lt
 8000740:	461a      	movlt	r2, r3
 8000742:	f8ca 2000 	str.w	r2, [sl]
 8000746:	f891 3043 	ldrb.w	r3, [r1, #67]	; 0x43
 800074a:	460c      	mov	r4, r1
 800074c:	4606      	mov	r6, r0
 800074e:	b113      	cbz	r3, 8000756 <_printf_common+0x2a>
 8000750:	3201      	adds	r2, #1
 8000752:	f8ca 2000 	str.w	r2, [sl]
 8000756:	6822      	ldr	r2, [r4, #0]
 8000758:	0691      	lsls	r1, r2, #26
 800075a:	d55d      	bpl.n	8000818 <_printf_common+0xec>
 800075c:	f8da 3000 	ldr.w	r3, [sl]
 8000760:	3302      	adds	r3, #2
 8000762:	f8ca 3000 	str.w	r3, [sl]
 8000766:	6822      	ldr	r2, [r4, #0]
 8000768:	f012 0f06 	tst.w	r2, #6
 800076c:	4611      	mov	r1, r2
 800076e:	d11e      	bne.n	80007ae <_printf_common+0x82>
 8000770:	68e1      	ldr	r1, [r4, #12]
 8000772:	1acb      	subs	r3, r1, r3
 8000774:	2b00      	cmp	r3, #0
 8000776:	bfd8      	it	le
 8000778:	4611      	movle	r1, r2
 800077a:	dd18      	ble.n	80007ae <_printf_common+0x82>
 800077c:	f104 0b19 	add.w	fp, r4, #25
 8000780:	f04f 0800 	mov.w	r8, #0
 8000784:	e005      	b.n	8000792 <_printf_common+0x66>
 8000786:	68e5      	ldr	r5, [r4, #12]
 8000788:	f8da 3000 	ldr.w	r3, [sl]
 800078c:	1aed      	subs	r5, r5, r3
 800078e:	4545      	cmp	r5, r8
 8000790:	dd0c      	ble.n	80007ac <_printf_common+0x80>
 8000792:	2301      	movs	r3, #1
 8000794:	465a      	mov	r2, fp
 8000796:	4639      	mov	r1, r7
 8000798:	4630      	mov	r0, r6
 800079a:	47c8      	blx	r9
 800079c:	3001      	adds	r0, #1
 800079e:	f108 0801 	add.w	r8, r8, #1
 80007a2:	d1f0      	bne.n	8000786 <_printf_common+0x5a>
 80007a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80007a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80007ac:	6821      	ldr	r1, [r4, #0]
 80007ae:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80007b2:	3b00      	subs	r3, #0
 80007b4:	bf18      	it	ne
 80007b6:	2301      	movne	r3, #1
 80007b8:	068a      	lsls	r2, r1, #26
 80007ba:	d50a      	bpl.n	80007d2 <_printf_common+0xa6>
 80007bc:	18e1      	adds	r1, r4, r3
 80007be:	1c5a      	adds	r2, r3, #1
 80007c0:	2030      	movs	r0, #48	; 0x30
 80007c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80007c6:	4422      	add	r2, r4
 80007c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80007cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80007d0:	3302      	adds	r3, #2
 80007d2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80007d6:	4639      	mov	r1, r7
 80007d8:	4630      	mov	r0, r6
 80007da:	47c8      	blx	r9
 80007dc:	3001      	adds	r0, #1
 80007de:	d0e1      	beq.n	80007a4 <_printf_common+0x78>
 80007e0:	6823      	ldr	r3, [r4, #0]
 80007e2:	f003 0306 	and.w	r3, r3, #6
 80007e6:	2b04      	cmp	r3, #4
 80007e8:	d01d      	beq.n	8000826 <_printf_common+0xfa>
 80007ea:	68a3      	ldr	r3, [r4, #8]
 80007ec:	6922      	ldr	r2, [r4, #16]
 80007ee:	4293      	cmp	r3, r2
 80007f0:	dd25      	ble.n	800083e <_printf_common+0x112>
 80007f2:	f04f 0800 	mov.w	r8, #0
 80007f6:	1a9b      	subs	r3, r3, r2
 80007f8:	4498      	add	r8, r3
 80007fa:	341a      	adds	r4, #26
 80007fc:	2500      	movs	r5, #0
 80007fe:	e001      	b.n	8000804 <_printf_common+0xd8>
 8000800:	4545      	cmp	r5, r8
 8000802:	da1c      	bge.n	800083e <_printf_common+0x112>
 8000804:	2301      	movs	r3, #1
 8000806:	4622      	mov	r2, r4
 8000808:	4639      	mov	r1, r7
 800080a:	4630      	mov	r0, r6
 800080c:	47c8      	blx	r9
 800080e:	3001      	adds	r0, #1
 8000810:	f105 0501 	add.w	r5, r5, #1
 8000814:	d1f4      	bne.n	8000800 <_printf_common+0xd4>
 8000816:	e7c5      	b.n	80007a4 <_printf_common+0x78>
 8000818:	f012 0f06 	tst.w	r2, #6
 800081c:	d012      	beq.n	8000844 <_printf_common+0x118>
 800081e:	3b00      	subs	r3, #0
 8000820:	bf18      	it	ne
 8000822:	2301      	movne	r3, #1
 8000824:	e7d5      	b.n	80007d2 <_printf_common+0xa6>
 8000826:	f8da 3000 	ldr.w	r3, [sl]
 800082a:	68e1      	ldr	r1, [r4, #12]
 800082c:	6922      	ldr	r2, [r4, #16]
 800082e:	1ac9      	subs	r1, r1, r3
 8000830:	68a3      	ldr	r3, [r4, #8]
 8000832:	4293      	cmp	r3, r2
 8000834:	ea21 78e1 	bic.w	r8, r1, r1, asr #31
 8000838:	dcdd      	bgt.n	80007f6 <_printf_common+0xca>
 800083a:	2900      	cmp	r1, #0
 800083c:	dcdd      	bgt.n	80007fa <_printf_common+0xce>
 800083e:	2000      	movs	r0, #0
 8000840:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000844:	68e1      	ldr	r1, [r4, #12]
 8000846:	f8da 3000 	ldr.w	r3, [sl]
 800084a:	1acb      	subs	r3, r1, r3
 800084c:	2b00      	cmp	r3, #0
 800084e:	bfd8      	it	le
 8000850:	4611      	movle	r1, r2
 8000852:	dc93      	bgt.n	800077c <_printf_common+0x50>
 8000854:	e7ab      	b.n	80007ae <_printf_common+0x82>
 8000856:	bf00      	nop

08000858 <_printf_i>:
 8000858:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800085c:	460c      	mov	r4, r1
 800085e:	b084      	sub	sp, #16
 8000860:	4690      	mov	r8, r2
 8000862:	7e22      	ldrb	r2, [r4, #24]
 8000864:	990c      	ldr	r1, [sp, #48]	; 0x30
 8000866:	4607      	mov	r7, r0
 8000868:	4699      	mov	r9, r3
 800086a:	f104 0043 	add.w	r0, r4, #67	; 0x43
 800086e:	2a00      	cmp	r2, #0
 8000870:	d033      	beq.n	80008da <_printf_i+0x82>
 8000872:	f1a2 0358 	sub.w	r3, r2, #88	; 0x58
 8000876:	b2dd      	uxtb	r5, r3
 8000878:	2d20      	cmp	r5, #32
 800087a:	d867      	bhi.n	800094c <_printf_i+0xf4>
 800087c:	2b20      	cmp	r3, #32
 800087e:	d865      	bhi.n	800094c <_printf_i+0xf4>
 8000880:	e8df f013 	tbh	[pc, r3, lsl #1]
 8000884:	006400de 	.word	0x006400de
 8000888:	00640064 	.word	0x00640064
 800088c:	00640064 	.word	0x00640064
 8000890:	00640064 	.word	0x00640064
 8000894:	00640064 	.word	0x00640064
 8000898:	00a30064 	.word	0x00a30064
 800089c:	0064006e 	.word	0x0064006e
 80008a0:	00640064 	.word	0x00640064
 80008a4:	006e0064 	.word	0x006e0064
 80008a8:	00640064 	.word	0x00640064
 80008ac:	00640064 	.word	0x00640064
 80008b0:	007f0021 	.word	0x007f0021
 80008b4:	006400c0 	.word	0x006400c0
 80008b8:	00ae0064 	.word	0x00ae0064
 80008bc:	007f0064 	.word	0x007f0064
 80008c0:	00640064 	.word	0x00640064
 80008c4:	00e5      	.short	0x00e5
 80008c6:	6823      	ldr	r3, [r4, #0]
 80008c8:	061a      	lsls	r2, r3, #24
 80008ca:	f140 8104 	bpl.w	8000ad6 <_printf_i+0x27e>
 80008ce:	680b      	ldr	r3, [r1, #0]
 80008d0:	6962      	ldr	r2, [r4, #20]
 80008d2:	1d1d      	adds	r5, r3, #4
 80008d4:	600d      	str	r5, [r1, #0]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	601a      	str	r2, [r3, #0]
 80008da:	2300      	movs	r3, #0
 80008dc:	4682      	mov	sl, r0
 80008de:	6123      	str	r3, [r4, #16]
 80008e0:	f8cd 9000 	str.w	r9, [sp]
 80008e4:	4643      	mov	r3, r8
 80008e6:	aa03      	add	r2, sp, #12
 80008e8:	4621      	mov	r1, r4
 80008ea:	4638      	mov	r0, r7
 80008ec:	f7ff ff1e 	bl	800072c <_printf_common>
 80008f0:	3001      	adds	r0, #1
 80008f2:	d020      	beq.n	8000936 <_printf_i+0xde>
 80008f4:	6923      	ldr	r3, [r4, #16]
 80008f6:	4652      	mov	r2, sl
 80008f8:	4641      	mov	r1, r8
 80008fa:	4638      	mov	r0, r7
 80008fc:	47c8      	blx	r9
 80008fe:	3001      	adds	r0, #1
 8000900:	d019      	beq.n	8000936 <_printf_i+0xde>
 8000902:	6823      	ldr	r3, [r4, #0]
 8000904:	68e0      	ldr	r0, [r4, #12]
 8000906:	9e03      	ldr	r6, [sp, #12]
 8000908:	079b      	lsls	r3, r3, #30
 800090a:	d519      	bpl.n	8000940 <_printf_i+0xe8>
 800090c:	1b83      	subs	r3, r0, r6
 800090e:	2b00      	cmp	r3, #0
 8000910:	dd16      	ble.n	8000940 <_printf_i+0xe8>
 8000912:	f104 0a19 	add.w	sl, r4, #25
 8000916:	2500      	movs	r5, #0
 8000918:	e004      	b.n	8000924 <_printf_i+0xcc>
 800091a:	68e0      	ldr	r0, [r4, #12]
 800091c:	9e03      	ldr	r6, [sp, #12]
 800091e:	1b83      	subs	r3, r0, r6
 8000920:	42ab      	cmp	r3, r5
 8000922:	dd0d      	ble.n	8000940 <_printf_i+0xe8>
 8000924:	2301      	movs	r3, #1
 8000926:	4652      	mov	r2, sl
 8000928:	4641      	mov	r1, r8
 800092a:	4638      	mov	r0, r7
 800092c:	47c8      	blx	r9
 800092e:	3001      	adds	r0, #1
 8000930:	f105 0501 	add.w	r5, r5, #1
 8000934:	d1f1      	bne.n	800091a <_printf_i+0xc2>
 8000936:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800093a:	b004      	add	sp, #16
 800093c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000940:	42b0      	cmp	r0, r6
 8000942:	bfb8      	it	lt
 8000944:	4630      	movlt	r0, r6
 8000946:	b004      	add	sp, #16
 8000948:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800094c:	2301      	movs	r3, #1
 800094e:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8000952:	6123      	str	r3, [r4, #16]
 8000954:	f104 0a42 	add.w	sl, r4, #66	; 0x42
 8000958:	2300      	movs	r3, #0
 800095a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800095e:	e7bf      	b.n	80008e0 <_printf_i+0x88>
 8000960:	6823      	ldr	r3, [r4, #0]
 8000962:	061a      	lsls	r2, r3, #24
 8000964:	d402      	bmi.n	800096c <_printf_i+0x114>
 8000966:	065e      	lsls	r6, r3, #25
 8000968:	f100 80c1 	bmi.w	8000aee <_printf_i+0x296>
 800096c:	680d      	ldr	r5, [r1, #0]
 800096e:	682a      	ldr	r2, [r5, #0]
 8000970:	3504      	adds	r5, #4
 8000972:	600d      	str	r5, [r1, #0]
 8000974:	4615      	mov	r5, r2
 8000976:	2a00      	cmp	r2, #0
 8000978:	db6b      	blt.n	8000a52 <_printf_i+0x1fa>
 800097a:	f8df c184 	ldr.w	ip, [pc, #388]	; 8000b00 <_printf_i+0x2a8>
 800097e:	260a      	movs	r6, #10
 8000980:	e010      	b.n	80009a4 <_printf_i+0x14c>
 8000982:	6823      	ldr	r3, [r4, #0]
 8000984:	061d      	lsls	r5, r3, #24
 8000986:	f140 809c 	bpl.w	8000ac2 <_printf_i+0x26a>
 800098a:	680b      	ldr	r3, [r1, #0]
 800098c:	1d1d      	adds	r5, r3, #4
 800098e:	600d      	str	r5, [r1, #0]
 8000990:	681d      	ldr	r5, [r3, #0]
 8000992:	f8df c16c 	ldr.w	ip, [pc, #364]	; 8000b00 <_printf_i+0x2a8>
 8000996:	2a6f      	cmp	r2, #111	; 0x6f
 8000998:	bf0c      	ite	eq
 800099a:	2608      	moveq	r6, #8
 800099c:	260a      	movne	r6, #10
 800099e:	2300      	movs	r3, #0
 80009a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80009a4:	6862      	ldr	r2, [r4, #4]
 80009a6:	60a2      	str	r2, [r4, #8]
 80009a8:	2a00      	cmp	r2, #0
 80009aa:	db7f      	blt.n	8000aac <_printf_i+0x254>
 80009ac:	6823      	ldr	r3, [r4, #0]
 80009ae:	f023 0304 	bic.w	r3, r3, #4
 80009b2:	6023      	str	r3, [r4, #0]
 80009b4:	2d00      	cmp	r5, #0
 80009b6:	d15b      	bne.n	8000a70 <_printf_i+0x218>
 80009b8:	2a00      	cmp	r2, #0
 80009ba:	d179      	bne.n	8000ab0 <_printf_i+0x258>
 80009bc:	4682      	mov	sl, r0
 80009be:	2e08      	cmp	r6, #8
 80009c0:	d065      	beq.n	8000a8e <_printf_i+0x236>
 80009c2:	eba0 000a 	sub.w	r0, r0, sl
 80009c6:	6120      	str	r0, [r4, #16]
 80009c8:	e78a      	b.n	80008e0 <_printf_i+0x88>
 80009ca:	680b      	ldr	r3, [r1, #0]
 80009cc:	2201      	movs	r2, #1
 80009ce:	6818      	ldr	r0, [r3, #0]
 80009d0:	3304      	adds	r3, #4
 80009d2:	600b      	str	r3, [r1, #0]
 80009d4:	f104 0a42 	add.w	sl, r4, #66	; 0x42
 80009d8:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
 80009dc:	6122      	str	r2, [r4, #16]
 80009de:	e7bb      	b.n	8000958 <_printf_i+0x100>
 80009e0:	680b      	ldr	r3, [r1, #0]
 80009e2:	6862      	ldr	r2, [r4, #4]
 80009e4:	1d18      	adds	r0, r3, #4
 80009e6:	6008      	str	r0, [r1, #0]
 80009e8:	f8d3 a000 	ldr.w	sl, [r3]
 80009ec:	2100      	movs	r1, #0
 80009ee:	4650      	mov	r0, sl
 80009f0:	f000 fdd6 	bl	80015a0 <memchr>
 80009f4:	2800      	cmp	r0, #0
 80009f6:	f000 8081 	beq.w	8000afc <_printf_i+0x2a4>
 80009fa:	eba0 000a 	sub.w	r0, r0, sl
 80009fe:	6060      	str	r0, [r4, #4]
 8000a00:	6120      	str	r0, [r4, #16]
 8000a02:	e7a9      	b.n	8000958 <_printf_i+0x100>
 8000a04:	6823      	ldr	r3, [r4, #0]
 8000a06:	f043 0320 	orr.w	r3, r3, #32
 8000a0a:	6023      	str	r3, [r4, #0]
 8000a0c:	2278      	movs	r2, #120	; 0x78
 8000a0e:	f8df c0f4 	ldr.w	ip, [pc, #244]	; 8000b04 <_printf_i+0x2ac>
 8000a12:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8000a16:	680a      	ldr	r2, [r1, #0]
 8000a18:	1d15      	adds	r5, r2, #4
 8000a1a:	600d      	str	r5, [r1, #0]
 8000a1c:	061d      	lsls	r5, r3, #24
 8000a1e:	d443      	bmi.n	8000aa8 <_printf_i+0x250>
 8000a20:	0659      	lsls	r1, r3, #25
 8000a22:	d541      	bpl.n	8000aa8 <_printf_i+0x250>
 8000a24:	8815      	ldrh	r5, [r2, #0]
 8000a26:	07de      	lsls	r6, r3, #31
 8000a28:	bf44      	itt	mi
 8000a2a:	f043 0320 	orrmi.w	r3, r3, #32
 8000a2e:	6023      	strmi	r3, [r4, #0]
 8000a30:	2d00      	cmp	r5, #0
 8000a32:	d144      	bne.n	8000abe <_printf_i+0x266>
 8000a34:	6823      	ldr	r3, [r4, #0]
 8000a36:	f023 0320 	bic.w	r3, r3, #32
 8000a3a:	6023      	str	r3, [r4, #0]
 8000a3c:	2610      	movs	r6, #16
 8000a3e:	e7ae      	b.n	800099e <_printf_i+0x146>
 8000a40:	2358      	movs	r3, #88	; 0x58
 8000a42:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8000a46:	f8df c0b8 	ldr.w	ip, [pc, #184]	; 8000b00 <_printf_i+0x2a8>
 8000a4a:	6823      	ldr	r3, [r4, #0]
 8000a4c:	e7e3      	b.n	8000a16 <_printf_i+0x1be>
 8000a4e:	6823      	ldr	r3, [r4, #0]
 8000a50:	e7dc      	b.n	8000a0c <_printf_i+0x1b4>
 8000a52:	6862      	ldr	r2, [r4, #4]
 8000a54:	60a2      	str	r2, [r4, #8]
 8000a56:	212d      	movs	r1, #45	; 0x2d
 8000a58:	2a00      	cmp	r2, #0
 8000a5a:	f1c5 0500 	rsb	r5, r5, #0
 8000a5e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8000a62:	db02      	blt.n	8000a6a <_printf_i+0x212>
 8000a64:	f023 0304 	bic.w	r3, r3, #4
 8000a68:	6023      	str	r3, [r4, #0]
 8000a6a:	f8df c094 	ldr.w	ip, [pc, #148]	; 8000b00 <_printf_i+0x2a8>
 8000a6e:	260a      	movs	r6, #10
 8000a70:	4682      	mov	sl, r0
 8000a72:	fbb5 f3f6 	udiv	r3, r5, r6
 8000a76:	fb06 5113 	mls	r1, r6, r3, r5
 8000a7a:	462a      	mov	r2, r5
 8000a7c:	f81c 1001 	ldrb.w	r1, [ip, r1]
 8000a80:	f80a 1d01 	strb.w	r1, [sl, #-1]!
 8000a84:	42b2      	cmp	r2, r6
 8000a86:	461d      	mov	r5, r3
 8000a88:	d2f3      	bcs.n	8000a72 <_printf_i+0x21a>
 8000a8a:	2e08      	cmp	r6, #8
 8000a8c:	d199      	bne.n	80009c2 <_printf_i+0x16a>
 8000a8e:	6823      	ldr	r3, [r4, #0]
 8000a90:	07d9      	lsls	r1, r3, #31
 8000a92:	d596      	bpl.n	80009c2 <_printf_i+0x16a>
 8000a94:	6862      	ldr	r2, [r4, #4]
 8000a96:	6923      	ldr	r3, [r4, #16]
 8000a98:	429a      	cmp	r2, r3
 8000a9a:	dc92      	bgt.n	80009c2 <_printf_i+0x16a>
 8000a9c:	2330      	movs	r3, #48	; 0x30
 8000a9e:	f80a 3c01 	strb.w	r3, [sl, #-1]
 8000aa2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8000aa6:	e78c      	b.n	80009c2 <_printf_i+0x16a>
 8000aa8:	6815      	ldr	r5, [r2, #0]
 8000aaa:	e7bc      	b.n	8000a26 <_printf_i+0x1ce>
 8000aac:	2d00      	cmp	r5, #0
 8000aae:	d1df      	bne.n	8000a70 <_printf_i+0x218>
 8000ab0:	f89c 3000 	ldrb.w	r3, [ip]
 8000ab4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8000ab8:	f104 0a42 	add.w	sl, r4, #66	; 0x42
 8000abc:	e77f      	b.n	80009be <_printf_i+0x166>
 8000abe:	2610      	movs	r6, #16
 8000ac0:	e76d      	b.n	800099e <_printf_i+0x146>
 8000ac2:	f013 0f40 	tst.w	r3, #64	; 0x40
 8000ac6:	680b      	ldr	r3, [r1, #0]
 8000ac8:	f103 0504 	add.w	r5, r3, #4
 8000acc:	600d      	str	r5, [r1, #0]
 8000ace:	bf0c      	ite	eq
 8000ad0:	681d      	ldreq	r5, [r3, #0]
 8000ad2:	881d      	ldrhne	r5, [r3, #0]
 8000ad4:	e75d      	b.n	8000992 <_printf_i+0x13a>
 8000ad6:	f013 0f40 	tst.w	r3, #64	; 0x40
 8000ada:	680b      	ldr	r3, [r1, #0]
 8000adc:	6962      	ldr	r2, [r4, #20]
 8000ade:	f103 0504 	add.w	r5, r3, #4
 8000ae2:	600d      	str	r5, [r1, #0]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	bf14      	ite	ne
 8000ae8:	801a      	strhne	r2, [r3, #0]
 8000aea:	601a      	streq	r2, [r3, #0]
 8000aec:	e6f5      	b.n	80008da <_printf_i+0x82>
 8000aee:	680a      	ldr	r2, [r1, #0]
 8000af0:	f9b2 5000 	ldrsh.w	r5, [r2]
 8000af4:	3204      	adds	r2, #4
 8000af6:	600a      	str	r2, [r1, #0]
 8000af8:	462a      	mov	r2, r5
 8000afa:	e73c      	b.n	8000976 <_printf_i+0x11e>
 8000afc:	6860      	ldr	r0, [r4, #4]
 8000afe:	e77f      	b.n	8000a00 <_printf_i+0x1a8>
 8000b00:	08007384 	.word	0x08007384
 8000b04:	08007398 	.word	0x08007398

08000b08 <__swbuf_r>:
 8000b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b0a:	460d      	mov	r5, r1
 8000b0c:	4614      	mov	r4, r2
 8000b0e:	4606      	mov	r6, r0
 8000b10:	b108      	cbz	r0, 8000b16 <__swbuf_r+0xe>
 8000b12:	6983      	ldr	r3, [r0, #24]
 8000b14:	b343      	cbz	r3, 8000b68 <__swbuf_r+0x60>
 8000b16:	4b25      	ldr	r3, [pc, #148]	; (8000bac <__swbuf_r+0xa4>)
 8000b18:	429c      	cmp	r4, r3
 8000b1a:	d02a      	beq.n	8000b72 <__swbuf_r+0x6a>
 8000b1c:	4b24      	ldr	r3, [pc, #144]	; (8000bb0 <__swbuf_r+0xa8>)
 8000b1e:	429c      	cmp	r4, r3
 8000b20:	d029      	beq.n	8000b76 <__swbuf_r+0x6e>
 8000b22:	4b24      	ldr	r3, [pc, #144]	; (8000bb4 <__swbuf_r+0xac>)
 8000b24:	429c      	cmp	r4, r3
 8000b26:	bf08      	it	eq
 8000b28:	68f4      	ldreq	r4, [r6, #12]
 8000b2a:	89a3      	ldrh	r3, [r4, #12]
 8000b2c:	69a2      	ldr	r2, [r4, #24]
 8000b2e:	60a2      	str	r2, [r4, #8]
 8000b30:	071a      	lsls	r2, r3, #28
 8000b32:	d522      	bpl.n	8000b7a <__swbuf_r+0x72>
 8000b34:	6923      	ldr	r3, [r4, #16]
 8000b36:	b303      	cbz	r3, 8000b7a <__swbuf_r+0x72>
 8000b38:	6822      	ldr	r2, [r4, #0]
 8000b3a:	6961      	ldr	r1, [r4, #20]
 8000b3c:	1ad3      	subs	r3, r2, r3
 8000b3e:	b2ed      	uxtb	r5, r5
 8000b40:	4299      	cmp	r1, r3
 8000b42:	462f      	mov	r7, r5
 8000b44:	dd29      	ble.n	8000b9a <__swbuf_r+0x92>
 8000b46:	3301      	adds	r3, #1
 8000b48:	68a1      	ldr	r1, [r4, #8]
 8000b4a:	3901      	subs	r1, #1
 8000b4c:	60a1      	str	r1, [r4, #8]
 8000b4e:	1c51      	adds	r1, r2, #1
 8000b50:	6021      	str	r1, [r4, #0]
 8000b52:	7015      	strb	r5, [r2, #0]
 8000b54:	6962      	ldr	r2, [r4, #20]
 8000b56:	429a      	cmp	r2, r3
 8000b58:	d016      	beq.n	8000b88 <__swbuf_r+0x80>
 8000b5a:	89a3      	ldrh	r3, [r4, #12]
 8000b5c:	07db      	lsls	r3, r3, #31
 8000b5e:	d501      	bpl.n	8000b64 <__swbuf_r+0x5c>
 8000b60:	2d0a      	cmp	r5, #10
 8000b62:	d011      	beq.n	8000b88 <__swbuf_r+0x80>
 8000b64:	4638      	mov	r0, r7
 8000b66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000b68:	f000 faac 	bl	80010c4 <__sinit>
 8000b6c:	4b0f      	ldr	r3, [pc, #60]	; (8000bac <__swbuf_r+0xa4>)
 8000b6e:	429c      	cmp	r4, r3
 8000b70:	d1d4      	bne.n	8000b1c <__swbuf_r+0x14>
 8000b72:	6874      	ldr	r4, [r6, #4]
 8000b74:	e7d9      	b.n	8000b2a <__swbuf_r+0x22>
 8000b76:	68b4      	ldr	r4, [r6, #8]
 8000b78:	e7d7      	b.n	8000b2a <__swbuf_r+0x22>
 8000b7a:	4621      	mov	r1, r4
 8000b7c:	4630      	mov	r0, r6
 8000b7e:	f000 f827 	bl	8000bd0 <__swsetup_r>
 8000b82:	b938      	cbnz	r0, 8000b94 <__swbuf_r+0x8c>
 8000b84:	6923      	ldr	r3, [r4, #16]
 8000b86:	e7d7      	b.n	8000b38 <__swbuf_r+0x30>
 8000b88:	4621      	mov	r1, r4
 8000b8a:	4630      	mov	r0, r6
 8000b8c:	f000 f934 	bl	8000df8 <_fflush_r>
 8000b90:	2800      	cmp	r0, #0
 8000b92:	d0e7      	beq.n	8000b64 <__swbuf_r+0x5c>
 8000b94:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8000b98:	e7e4      	b.n	8000b64 <__swbuf_r+0x5c>
 8000b9a:	4621      	mov	r1, r4
 8000b9c:	4630      	mov	r0, r6
 8000b9e:	f000 f92b 	bl	8000df8 <_fflush_r>
 8000ba2:	2800      	cmp	r0, #0
 8000ba4:	d1f6      	bne.n	8000b94 <__swbuf_r+0x8c>
 8000ba6:	6822      	ldr	r2, [r4, #0]
 8000ba8:	2301      	movs	r3, #1
 8000baa:	e7cd      	b.n	8000b48 <__swbuf_r+0x40>
 8000bac:	080071dc 	.word	0x080071dc
 8000bb0:	080071bc 	.word	0x080071bc
 8000bb4:	0800719c 	.word	0x0800719c

08000bb8 <__swbuf>:
 8000bb8:	b410      	push	{r4}
 8000bba:	4c04      	ldr	r4, [pc, #16]	; (8000bcc <__swbuf+0x14>)
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	460a      	mov	r2, r1
 8000bc0:	6820      	ldr	r0, [r4, #0]
 8000bc2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	f7ff bf9e 	b.w	8000b08 <__swbuf_r>
 8000bcc:	20000000 	.word	0x20000000

08000bd0 <__swsetup_r>:
 8000bd0:	4b3c      	ldr	r3, [pc, #240]	; (8000cc4 <__swsetup_r+0xf4>)
 8000bd2:	b570      	push	{r4, r5, r6, lr}
 8000bd4:	681d      	ldr	r5, [r3, #0]
 8000bd6:	4606      	mov	r6, r0
 8000bd8:	460c      	mov	r4, r1
 8000bda:	b10d      	cbz	r5, 8000be0 <__swsetup_r+0x10>
 8000bdc:	69ab      	ldr	r3, [r5, #24]
 8000bde:	b1e3      	cbz	r3, 8000c1a <__swsetup_r+0x4a>
 8000be0:	4b39      	ldr	r3, [pc, #228]	; (8000cc8 <__swsetup_r+0xf8>)
 8000be2:	429c      	cmp	r4, r3
 8000be4:	d01f      	beq.n	8000c26 <__swsetup_r+0x56>
 8000be6:	4b39      	ldr	r3, [pc, #228]	; (8000ccc <__swsetup_r+0xfc>)
 8000be8:	429c      	cmp	r4, r3
 8000bea:	d04d      	beq.n	8000c88 <__swsetup_r+0xb8>
 8000bec:	4b38      	ldr	r3, [pc, #224]	; (8000cd0 <__swsetup_r+0x100>)
 8000bee:	429c      	cmp	r4, r3
 8000bf0:	bf08      	it	eq
 8000bf2:	68ec      	ldreq	r4, [r5, #12]
 8000bf4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000bf8:	0718      	lsls	r0, r3, #28
 8000bfa:	b29a      	uxth	r2, r3
 8000bfc:	d519      	bpl.n	8000c32 <__swsetup_r+0x62>
 8000bfe:	6921      	ldr	r1, [r4, #16]
 8000c00:	b311      	cbz	r1, 8000c48 <__swsetup_r+0x78>
 8000c02:	f012 0001 	ands.w	r0, r2, #1
 8000c06:	d02f      	beq.n	8000c68 <__swsetup_r+0x98>
 8000c08:	2000      	movs	r0, #0
 8000c0a:	60a0      	str	r0, [r4, #8]
 8000c0c:	6960      	ldr	r0, [r4, #20]
 8000c0e:	4240      	negs	r0, r0
 8000c10:	61a0      	str	r0, [r4, #24]
 8000c12:	2900      	cmp	r1, #0
 8000c14:	d02e      	beq.n	8000c74 <__swsetup_r+0xa4>
 8000c16:	2000      	movs	r0, #0
 8000c18:	bd70      	pop	{r4, r5, r6, pc}
 8000c1a:	4628      	mov	r0, r5
 8000c1c:	f000 fa52 	bl	80010c4 <__sinit>
 8000c20:	4b29      	ldr	r3, [pc, #164]	; (8000cc8 <__swsetup_r+0xf8>)
 8000c22:	429c      	cmp	r4, r3
 8000c24:	d1df      	bne.n	8000be6 <__swsetup_r+0x16>
 8000c26:	686c      	ldr	r4, [r5, #4]
 8000c28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000c2c:	0718      	lsls	r0, r3, #28
 8000c2e:	b29a      	uxth	r2, r3
 8000c30:	d4e5      	bmi.n	8000bfe <__swsetup_r+0x2e>
 8000c32:	06d1      	lsls	r1, r2, #27
 8000c34:	d53e      	bpl.n	8000cb4 <__swsetup_r+0xe4>
 8000c36:	0752      	lsls	r2, r2, #29
 8000c38:	d428      	bmi.n	8000c8c <__swsetup_r+0xbc>
 8000c3a:	6921      	ldr	r1, [r4, #16]
 8000c3c:	f043 0308 	orr.w	r3, r3, #8
 8000c40:	81a3      	strh	r3, [r4, #12]
 8000c42:	b29a      	uxth	r2, r3
 8000c44:	2900      	cmp	r1, #0
 8000c46:	d1dc      	bne.n	8000c02 <__swsetup_r+0x32>
 8000c48:	f402 7020 	and.w	r0, r2, #640	; 0x280
 8000c4c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8000c50:	d0d7      	beq.n	8000c02 <__swsetup_r+0x32>
 8000c52:	4621      	mov	r1, r4
 8000c54:	4630      	mov	r0, r6
 8000c56:	f000 fc11 	bl	800147c <__smakebuf_r>
 8000c5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000c5e:	6921      	ldr	r1, [r4, #16]
 8000c60:	b29a      	uxth	r2, r3
 8000c62:	f012 0001 	ands.w	r0, r2, #1
 8000c66:	d1cf      	bne.n	8000c08 <__swsetup_r+0x38>
 8000c68:	0795      	lsls	r5, r2, #30
 8000c6a:	bf58      	it	pl
 8000c6c:	6960      	ldrpl	r0, [r4, #20]
 8000c6e:	60a0      	str	r0, [r4, #8]
 8000c70:	2900      	cmp	r1, #0
 8000c72:	d1d0      	bne.n	8000c16 <__swsetup_r+0x46>
 8000c74:	0612      	lsls	r2, r2, #24
 8000c76:	bf58      	it	pl
 8000c78:	4608      	movpl	r0, r1
 8000c7a:	d5cd      	bpl.n	8000c18 <__swsetup_r+0x48>
 8000c7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c80:	81a3      	strh	r3, [r4, #12]
 8000c82:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c86:	bd70      	pop	{r4, r5, r6, pc}
 8000c88:	68ac      	ldr	r4, [r5, #8]
 8000c8a:	e7b3      	b.n	8000bf4 <__swsetup_r+0x24>
 8000c8c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000c8e:	b151      	cbz	r1, 8000ca6 <__swsetup_r+0xd6>
 8000c90:	f104 0244 	add.w	r2, r4, #68	; 0x44
 8000c94:	4291      	cmp	r1, r2
 8000c96:	d004      	beq.n	8000ca2 <__swsetup_r+0xd2>
 8000c98:	4630      	mov	r0, r6
 8000c9a:	f000 fde7 	bl	800186c <_free_r>
 8000c9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	6362      	str	r2, [r4, #52]	; 0x34
 8000ca6:	6921      	ldr	r1, [r4, #16]
 8000ca8:	2200      	movs	r2, #0
 8000caa:	e9c4 1200 	strd	r1, r2, [r4]
 8000cae:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8000cb2:	e7c3      	b.n	8000c3c <__swsetup_r+0x6c>
 8000cb4:	2209      	movs	r2, #9
 8000cb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cba:	6032      	str	r2, [r6, #0]
 8000cbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000cc0:	81a3      	strh	r3, [r4, #12]
 8000cc2:	bd70      	pop	{r4, r5, r6, pc}
 8000cc4:	20000000 	.word	0x20000000
 8000cc8:	080071dc 	.word	0x080071dc
 8000ccc:	080071bc 	.word	0x080071bc
 8000cd0:	0800719c 	.word	0x0800719c

08000cd4 <abort>:
 8000cd4:	b508      	push	{r3, lr}
 8000cd6:	2006      	movs	r0, #6
 8000cd8:	f000 ff52 	bl	8001b80 <raise>
 8000cdc:	2001      	movs	r0, #1
 8000cde:	f006 f909 	bl	8006ef4 <_exit>
 8000ce2:	bf00      	nop

08000ce4 <__sflush_r>:
 8000ce4:	898b      	ldrh	r3, [r1, #12]
 8000ce6:	071a      	lsls	r2, r3, #28
 8000ce8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000cec:	460c      	mov	r4, r1
 8000cee:	4680      	mov	r8, r0
 8000cf0:	d43f      	bmi.n	8000d72 <__sflush_r+0x8e>
 8000cf2:	684a      	ldr	r2, [r1, #4]
 8000cf4:	2a00      	cmp	r2, #0
 8000cf6:	dd58      	ble.n	8000daa <__sflush_r+0xc6>
 8000cf8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000cfa:	2e00      	cmp	r6, #0
 8000cfc:	d052      	beq.n	8000da4 <__sflush_r+0xc0>
 8000cfe:	2200      	movs	r2, #0
 8000d00:	f8d8 5000 	ldr.w	r5, [r8]
 8000d04:	f8c8 2000 	str.w	r2, [r8]
 8000d08:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
 8000d0c:	d151      	bne.n	8000db2 <__sflush_r+0xce>
 8000d0e:	2301      	movs	r3, #1
 8000d10:	6a21      	ldr	r1, [r4, #32]
 8000d12:	4640      	mov	r0, r8
 8000d14:	47b0      	blx	r6
 8000d16:	1c43      	adds	r3, r0, #1
 8000d18:	d05e      	beq.n	8000dd8 <__sflush_r+0xf4>
 8000d1a:	89a3      	ldrh	r3, [r4, #12]
 8000d1c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000d1e:	075f      	lsls	r7, r3, #29
 8000d20:	d505      	bpl.n	8000d2e <__sflush_r+0x4a>
 8000d22:	6863      	ldr	r3, [r4, #4]
 8000d24:	1ac0      	subs	r0, r0, r3
 8000d26:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000d28:	b10b      	cbz	r3, 8000d2e <__sflush_r+0x4a>
 8000d2a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000d2c:	1ac0      	subs	r0, r0, r3
 8000d2e:	6a21      	ldr	r1, [r4, #32]
 8000d30:	4602      	mov	r2, r0
 8000d32:	2300      	movs	r3, #0
 8000d34:	4640      	mov	r0, r8
 8000d36:	47b0      	blx	r6
 8000d38:	1c41      	adds	r1, r0, #1
 8000d3a:	d13c      	bne.n	8000db6 <__sflush_r+0xd2>
 8000d3c:	f8d8 3000 	ldr.w	r3, [r8]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d038      	beq.n	8000db6 <__sflush_r+0xd2>
 8000d44:	2b1d      	cmp	r3, #29
 8000d46:	d001      	beq.n	8000d4c <__sflush_r+0x68>
 8000d48:	2b16      	cmp	r3, #22
 8000d4a:	d14d      	bne.n	8000de8 <__sflush_r+0x104>
 8000d4c:	6923      	ldr	r3, [r4, #16]
 8000d4e:	2200      	movs	r2, #0
 8000d50:	e9c4 3200 	strd	r3, r2, [r4]
 8000d54:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000d56:	f8c8 5000 	str.w	r5, [r8]
 8000d5a:	b319      	cbz	r1, 8000da4 <__sflush_r+0xc0>
 8000d5c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000d60:	4299      	cmp	r1, r3
 8000d62:	d002      	beq.n	8000d6a <__sflush_r+0x86>
 8000d64:	4640      	mov	r0, r8
 8000d66:	f000 fd81 	bl	800186c <_free_r>
 8000d6a:	2000      	movs	r0, #0
 8000d6c:	6360      	str	r0, [r4, #52]	; 0x34
 8000d6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000d72:	690e      	ldr	r6, [r1, #16]
 8000d74:	b1b6      	cbz	r6, 8000da4 <__sflush_r+0xc0>
 8000d76:	680d      	ldr	r5, [r1, #0]
 8000d78:	600e      	str	r6, [r1, #0]
 8000d7a:	079a      	lsls	r2, r3, #30
 8000d7c:	bf0c      	ite	eq
 8000d7e:	694b      	ldreq	r3, [r1, #20]
 8000d80:	2300      	movne	r3, #0
 8000d82:	1bad      	subs	r5, r5, r6
 8000d84:	608b      	str	r3, [r1, #8]
 8000d86:	e00b      	b.n	8000da0 <__sflush_r+0xbc>
 8000d88:	462b      	mov	r3, r5
 8000d8a:	4632      	mov	r2, r6
 8000d8c:	6a21      	ldr	r1, [r4, #32]
 8000d8e:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8000d90:	4640      	mov	r0, r8
 8000d92:	47b8      	blx	r7
 8000d94:	f1b0 0c00 	subs.w	ip, r0, #0
 8000d98:	eba5 050c 	sub.w	r5, r5, ip
 8000d9c:	4466      	add	r6, ip
 8000d9e:	dd13      	ble.n	8000dc8 <__sflush_r+0xe4>
 8000da0:	2d00      	cmp	r5, #0
 8000da2:	dcf1      	bgt.n	8000d88 <__sflush_r+0xa4>
 8000da4:	2000      	movs	r0, #0
 8000da6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000daa:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8000dac:	2a00      	cmp	r2, #0
 8000dae:	dca3      	bgt.n	8000cf8 <__sflush_r+0x14>
 8000db0:	e7f8      	b.n	8000da4 <__sflush_r+0xc0>
 8000db2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000db4:	e7b3      	b.n	8000d1e <__sflush_r+0x3a>
 8000db6:	2300      	movs	r3, #0
 8000db8:	6063      	str	r3, [r4, #4]
 8000dba:	6923      	ldr	r3, [r4, #16]
 8000dbc:	6023      	str	r3, [r4, #0]
 8000dbe:	89a3      	ldrh	r3, [r4, #12]
 8000dc0:	04db      	lsls	r3, r3, #19
 8000dc2:	d5c7      	bpl.n	8000d54 <__sflush_r+0x70>
 8000dc4:	6560      	str	r0, [r4, #84]	; 0x54
 8000dc6:	e7c5      	b.n	8000d54 <__sflush_r+0x70>
 8000dc8:	89a3      	ldrh	r3, [r4, #12]
 8000dca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000dce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000dd2:	81a3      	strh	r3, [r4, #12]
 8000dd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000dd8:	f8d8 3000 	ldr.w	r3, [r8]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d09c      	beq.n	8000d1a <__sflush_r+0x36>
 8000de0:	2b1d      	cmp	r3, #29
 8000de2:	d006      	beq.n	8000df2 <__sflush_r+0x10e>
 8000de4:	2b16      	cmp	r3, #22
 8000de6:	d004      	beq.n	8000df2 <__sflush_r+0x10e>
 8000de8:	89a3      	ldrh	r3, [r4, #12]
 8000dea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000dee:	81a3      	strh	r3, [r4, #12]
 8000df0:	e7d9      	b.n	8000da6 <__sflush_r+0xc2>
 8000df2:	f8c8 5000 	str.w	r5, [r8]
 8000df6:	e7d5      	b.n	8000da4 <__sflush_r+0xc0>

08000df8 <_fflush_r>:
 8000df8:	b538      	push	{r3, r4, r5, lr}
 8000dfa:	690b      	ldr	r3, [r1, #16]
 8000dfc:	b1bb      	cbz	r3, 8000e2e <_fflush_r+0x36>
 8000dfe:	460d      	mov	r5, r1
 8000e00:	4604      	mov	r4, r0
 8000e02:	b108      	cbz	r0, 8000e08 <_fflush_r+0x10>
 8000e04:	6983      	ldr	r3, [r0, #24]
 8000e06:	b1b3      	cbz	r3, 8000e36 <_fflush_r+0x3e>
 8000e08:	4b0d      	ldr	r3, [pc, #52]	; (8000e40 <_fflush_r+0x48>)
 8000e0a:	429d      	cmp	r5, r3
 8000e0c:	d011      	beq.n	8000e32 <_fflush_r+0x3a>
 8000e0e:	4b0d      	ldr	r3, [pc, #52]	; (8000e44 <_fflush_r+0x4c>)
 8000e10:	429d      	cmp	r5, r3
 8000e12:	d013      	beq.n	8000e3c <_fflush_r+0x44>
 8000e14:	4b0c      	ldr	r3, [pc, #48]	; (8000e48 <_fflush_r+0x50>)
 8000e16:	429d      	cmp	r5, r3
 8000e18:	bf08      	it	eq
 8000e1a:	68e5      	ldreq	r5, [r4, #12]
 8000e1c:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
 8000e20:	b12b      	cbz	r3, 8000e2e <_fflush_r+0x36>
 8000e22:	4629      	mov	r1, r5
 8000e24:	4620      	mov	r0, r4
 8000e26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000e2a:	f7ff bf5b 	b.w	8000ce4 <__sflush_r>
 8000e2e:	2000      	movs	r0, #0
 8000e30:	bd38      	pop	{r3, r4, r5, pc}
 8000e32:	6865      	ldr	r5, [r4, #4]
 8000e34:	e7f2      	b.n	8000e1c <_fflush_r+0x24>
 8000e36:	f000 f945 	bl	80010c4 <__sinit>
 8000e3a:	e7e5      	b.n	8000e08 <_fflush_r+0x10>
 8000e3c:	68a5      	ldr	r5, [r4, #8]
 8000e3e:	e7ed      	b.n	8000e1c <_fflush_r+0x24>
 8000e40:	080071dc 	.word	0x080071dc
 8000e44:	080071bc 	.word	0x080071bc
 8000e48:	0800719c 	.word	0x0800719c

08000e4c <fflush>:
 8000e4c:	b538      	push	{r3, r4, r5, lr}
 8000e4e:	b340      	cbz	r0, 8000ea2 <fflush+0x56>
 8000e50:	6903      	ldr	r3, [r0, #16]
 8000e52:	4604      	mov	r4, r0
 8000e54:	b1e3      	cbz	r3, 8000e90 <fflush+0x44>
 8000e56:	4b17      	ldr	r3, [pc, #92]	; (8000eb4 <fflush+0x68>)
 8000e58:	681d      	ldr	r5, [r3, #0]
 8000e5a:	b10d      	cbz	r5, 8000e60 <fflush+0x14>
 8000e5c:	69ab      	ldr	r3, [r5, #24]
 8000e5e:	b1cb      	cbz	r3, 8000e94 <fflush+0x48>
 8000e60:	4b15      	ldr	r3, [pc, #84]	; (8000eb8 <fflush+0x6c>)
 8000e62:	429c      	cmp	r4, r3
 8000e64:	d00f      	beq.n	8000e86 <fflush+0x3a>
 8000e66:	4b15      	ldr	r3, [pc, #84]	; (8000ebc <fflush+0x70>)
 8000e68:	429c      	cmp	r4, r3
 8000e6a:	d021      	beq.n	8000eb0 <fflush+0x64>
 8000e6c:	4b14      	ldr	r3, [pc, #80]	; (8000ec0 <fflush+0x74>)
 8000e6e:	429c      	cmp	r4, r3
 8000e70:	bf08      	it	eq
 8000e72:	68ec      	ldreq	r4, [r5, #12]
 8000e74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000e78:	b153      	cbz	r3, 8000e90 <fflush+0x44>
 8000e7a:	4621      	mov	r1, r4
 8000e7c:	4628      	mov	r0, r5
 8000e7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000e82:	f7ff bf2f 	b.w	8000ce4 <__sflush_r>
 8000e86:	686c      	ldr	r4, [r5, #4]
 8000e88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d1f4      	bne.n	8000e7a <fflush+0x2e>
 8000e90:	2000      	movs	r0, #0
 8000e92:	bd38      	pop	{r3, r4, r5, pc}
 8000e94:	4628      	mov	r0, r5
 8000e96:	f000 f915 	bl	80010c4 <__sinit>
 8000e9a:	4b07      	ldr	r3, [pc, #28]	; (8000eb8 <fflush+0x6c>)
 8000e9c:	429c      	cmp	r4, r3
 8000e9e:	d1e2      	bne.n	8000e66 <fflush+0x1a>
 8000ea0:	e7f1      	b.n	8000e86 <fflush+0x3a>
 8000ea2:	4b08      	ldr	r3, [pc, #32]	; (8000ec4 <fflush+0x78>)
 8000ea4:	4908      	ldr	r1, [pc, #32]	; (8000ec8 <fflush+0x7c>)
 8000ea6:	6818      	ldr	r0, [r3, #0]
 8000ea8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000eac:	f000 bac2 	b.w	8001434 <_fwalk_reent>
 8000eb0:	68ac      	ldr	r4, [r5, #8]
 8000eb2:	e7df      	b.n	8000e74 <fflush+0x28>
 8000eb4:	20000000 	.word	0x20000000
 8000eb8:	080071dc 	.word	0x080071dc
 8000ebc:	080071bc 	.word	0x080071bc
 8000ec0:	0800719c 	.word	0x0800719c
 8000ec4:	08007198 	.word	0x08007198
 8000ec8:	08000df9 	.word	0x08000df9

08000ecc <__fp_lock>:
 8000ecc:	2000      	movs	r0, #0
 8000ece:	4770      	bx	lr

08000ed0 <_cleanup_r>:
 8000ed0:	4901      	ldr	r1, [pc, #4]	; (8000ed8 <_cleanup_r+0x8>)
 8000ed2:	f000 baaf 	b.w	8001434 <_fwalk_reent>
 8000ed6:	bf00      	nop
 8000ed8:	08000df9 	.word	0x08000df9

08000edc <__fp_unlock>:
 8000edc:	2000      	movs	r0, #0
 8000ede:	4770      	bx	lr

08000ee0 <__sfmoreglue>:
 8000ee0:	b570      	push	{r4, r5, r6, lr}
 8000ee2:	2268      	movs	r2, #104	; 0x68
 8000ee4:	1e4d      	subs	r5, r1, #1
 8000ee6:	fb02 f505 	mul.w	r5, r2, r5
 8000eea:	460e      	mov	r6, r1
 8000eec:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8000ef0:	f000 fd1e 	bl	8001930 <_malloc_r>
 8000ef4:	4604      	mov	r4, r0
 8000ef6:	b140      	cbz	r0, 8000f0a <__sfmoreglue+0x2a>
 8000ef8:	2100      	movs	r1, #0
 8000efa:	300c      	adds	r0, #12
 8000efc:	e9c4 1600 	strd	r1, r6, [r4]
 8000f00:	60a0      	str	r0, [r4, #8]
 8000f02:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000f06:	f7ff fa2b 	bl	8000360 <memset>
 8000f0a:	4620      	mov	r0, r4
 8000f0c:	bd70      	pop	{r4, r5, r6, pc}
 8000f0e:	bf00      	nop

08000f10 <__sfp>:
 8000f10:	4b27      	ldr	r3, [pc, #156]	; (8000fb0 <__sfp+0xa0>)
 8000f12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000f16:	681e      	ldr	r6, [r3, #0]
 8000f18:	69b3      	ldr	r3, [r6, #24]
 8000f1a:	4607      	mov	r7, r0
 8000f1c:	b353      	cbz	r3, 8000f74 <__sfp+0x64>
 8000f1e:	3648      	adds	r6, #72	; 0x48
 8000f20:	f04f 0804 	mov.w	r8, #4
 8000f24:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000f28:	3b01      	subs	r3, #1
 8000f2a:	d504      	bpl.n	8000f36 <__sfp+0x26>
 8000f2c:	e01e      	b.n	8000f6c <__sfp+0x5c>
 8000f2e:	1c5a      	adds	r2, r3, #1
 8000f30:	f104 0468 	add.w	r4, r4, #104	; 0x68
 8000f34:	d01a      	beq.n	8000f6c <__sfp+0x5c>
 8000f36:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000f3a:	3b01      	subs	r3, #1
 8000f3c:	2d00      	cmp	r5, #0
 8000f3e:	d1f6      	bne.n	8000f2e <__sfp+0x1e>
 8000f40:	4b1c      	ldr	r3, [pc, #112]	; (8000fb4 <__sfp+0xa4>)
 8000f42:	6665      	str	r5, [r4, #100]	; 0x64
 8000f44:	e9c4 5500 	strd	r5, r5, [r4]
 8000f48:	e9c4 5302 	strd	r5, r3, [r4, #8]
 8000f4c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000f50:	61a5      	str	r5, [r4, #24]
 8000f52:	2208      	movs	r2, #8
 8000f54:	4629      	mov	r1, r5
 8000f56:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000f5a:	f7ff fa01 	bl	8000360 <memset>
 8000f5e:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000f62:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000f66:	4620      	mov	r0, r4
 8000f68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000f6c:	6835      	ldr	r5, [r6, #0]
 8000f6e:	b12d      	cbz	r5, 8000f7c <__sfp+0x6c>
 8000f70:	462e      	mov	r6, r5
 8000f72:	e7d7      	b.n	8000f24 <__sfp+0x14>
 8000f74:	4630      	mov	r0, r6
 8000f76:	f000 f81f 	bl	8000fb8 <__sinit.part.0>
 8000f7a:	e7d0      	b.n	8000f1e <__sfp+0xe>
 8000f7c:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 8000f80:	4638      	mov	r0, r7
 8000f82:	f000 fcd5 	bl	8001930 <_malloc_r>
 8000f86:	4604      	mov	r4, r0
 8000f88:	b168      	cbz	r0, 8000fa6 <__sfp+0x96>
 8000f8a:	6005      	str	r5, [r0, #0]
 8000f8c:	f8c0 8004 	str.w	r8, [r0, #4]
 8000f90:	300c      	adds	r0, #12
 8000f92:	4629      	mov	r1, r5
 8000f94:	60a0      	str	r0, [r4, #8]
 8000f96:	4625      	mov	r5, r4
 8000f98:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 8000f9c:	f7ff f9e0 	bl	8000360 <memset>
 8000fa0:	6034      	str	r4, [r6, #0]
 8000fa2:	462e      	mov	r6, r5
 8000fa4:	e7be      	b.n	8000f24 <__sfp+0x14>
 8000fa6:	230c      	movs	r3, #12
 8000fa8:	6030      	str	r0, [r6, #0]
 8000faa:	603b      	str	r3, [r7, #0]
 8000fac:	e7db      	b.n	8000f66 <__sfp+0x56>
 8000fae:	bf00      	nop
 8000fb0:	08007198 	.word	0x08007198
 8000fb4:	ffff0001 	.word	0xffff0001

08000fb8 <__sinit.part.0>:
 8000fb8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000fbc:	4b34      	ldr	r3, [pc, #208]	; (8001090 <__sinit.part.0+0xd8>)
 8000fbe:	4935      	ldr	r1, [pc, #212]	; (8001094 <__sinit.part.0+0xdc>)
 8000fc0:	681a      	ldr	r2, [r3, #0]
 8000fc2:	6281      	str	r1, [r0, #40]	; 0x28
 8000fc4:	4290      	cmp	r0, r2
 8000fc6:	f04f 0300 	mov.w	r3, #0
 8000fca:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8000fce:	6503      	str	r3, [r0, #80]	; 0x50
 8000fd0:	bf04      	itt	eq
 8000fd2:	2301      	moveq	r3, #1
 8000fd4:	6183      	streq	r3, [r0, #24]
 8000fd6:	4605      	mov	r5, r0
 8000fd8:	f7ff ff9a 	bl	8000f10 <__sfp>
 8000fdc:	6068      	str	r0, [r5, #4]
 8000fde:	4628      	mov	r0, r5
 8000fe0:	f7ff ff96 	bl	8000f10 <__sfp>
 8000fe4:	60a8      	str	r0, [r5, #8]
 8000fe6:	4628      	mov	r0, r5
 8000fe8:	f7ff ff92 	bl	8000f10 <__sfp>
 8000fec:	686f      	ldr	r7, [r5, #4]
 8000fee:	60e8      	str	r0, [r5, #12]
 8000ff0:	2400      	movs	r4, #0
 8000ff2:	2304      	movs	r3, #4
 8000ff4:	e9c7 4302 	strd	r4, r3, [r7, #8]
 8000ff8:	2208      	movs	r2, #8
 8000ffa:	4621      	mov	r1, r4
 8000ffc:	e9c7 4400 	strd	r4, r4, [r7]
 8001000:	e9c7 4404 	strd	r4, r4, [r7, #16]
 8001004:	667c      	str	r4, [r7, #100]	; 0x64
 8001006:	61bc      	str	r4, [r7, #24]
 8001008:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 800100c:	f7ff f9a8 	bl	8000360 <memset>
 8001010:	f8df b08c 	ldr.w	fp, [pc, #140]	; 80010a0 <__sinit.part.0+0xe8>
 8001014:	68ae      	ldr	r6, [r5, #8]
 8001016:	f8df a08c 	ldr.w	sl, [pc, #140]	; 80010a4 <__sinit.part.0+0xec>
 800101a:	f8df 908c 	ldr.w	r9, [pc, #140]	; 80010a8 <__sinit.part.0+0xf0>
 800101e:	f8df 808c 	ldr.w	r8, [pc, #140]	; 80010ac <__sinit.part.0+0xf4>
 8001022:	4b1d      	ldr	r3, [pc, #116]	; (8001098 <__sinit.part.0+0xe0>)
 8001024:	f8c7 a028 	str.w	sl, [r7, #40]	; 0x28
 8001028:	e9c7 7b08 	strd	r7, fp, [r7, #32]
 800102c:	f8c7 902c 	str.w	r9, [r7, #44]	; 0x2c
 8001030:	f8c7 8030 	str.w	r8, [r7, #48]	; 0x30
 8001034:	2208      	movs	r2, #8
 8001036:	60f3      	str	r3, [r6, #12]
 8001038:	e9c6 4400 	strd	r4, r4, [r6]
 800103c:	e9c6 4404 	strd	r4, r4, [r6, #16]
 8001040:	6674      	str	r4, [r6, #100]	; 0x64
 8001042:	60b4      	str	r4, [r6, #8]
 8001044:	61b4      	str	r4, [r6, #24]
 8001046:	4621      	mov	r1, r4
 8001048:	f106 005c 	add.w	r0, r6, #92	; 0x5c
 800104c:	f7ff f988 	bl	8000360 <memset>
 8001050:	e9c6 6b08 	strd	r6, fp, [r6, #32]
 8001054:	e9c6 a90a 	strd	sl, r9, [r6, #40]	; 0x28
 8001058:	f8c6 8030 	str.w	r8, [r6, #48]	; 0x30
 800105c:	68ee      	ldr	r6, [r5, #12]
 800105e:	4b0f      	ldr	r3, [pc, #60]	; (800109c <__sinit.part.0+0xe4>)
 8001060:	60f3      	str	r3, [r6, #12]
 8001062:	e9c6 4400 	strd	r4, r4, [r6]
 8001066:	e9c6 4404 	strd	r4, r4, [r6, #16]
 800106a:	6674      	str	r4, [r6, #100]	; 0x64
 800106c:	60b4      	str	r4, [r6, #8]
 800106e:	61b4      	str	r4, [r6, #24]
 8001070:	4621      	mov	r1, r4
 8001072:	2208      	movs	r2, #8
 8001074:	f106 005c 	add.w	r0, r6, #92	; 0x5c
 8001078:	f7ff f972 	bl	8000360 <memset>
 800107c:	2301      	movs	r3, #1
 800107e:	e9c6 6b08 	strd	r6, fp, [r6, #32]
 8001082:	e9c6 980b 	strd	r9, r8, [r6, #44]	; 0x2c
 8001086:	f8c6 a028 	str.w	sl, [r6, #40]	; 0x28
 800108a:	61ab      	str	r3, [r5, #24]
 800108c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001090:	08007198 	.word	0x08007198
 8001094:	08000ed1 	.word	0x08000ed1
 8001098:	00010009 	.word	0x00010009
 800109c:	00020012 	.word	0x00020012
 80010a0:	08001cf1 	.word	0x08001cf1
 80010a4:	08001d19 	.word	0x08001d19
 80010a8:	08001d59 	.word	0x08001d59
 80010ac:	08001d79 	.word	0x08001d79

080010b0 <_cleanup>:
 80010b0:	4b02      	ldr	r3, [pc, #8]	; (80010bc <_cleanup+0xc>)
 80010b2:	4903      	ldr	r1, [pc, #12]	; (80010c0 <_cleanup+0x10>)
 80010b4:	6818      	ldr	r0, [r3, #0]
 80010b6:	f000 b9bd 	b.w	8001434 <_fwalk_reent>
 80010ba:	bf00      	nop
 80010bc:	08007198 	.word	0x08007198
 80010c0:	08000df9 	.word	0x08000df9

080010c4 <__sinit>:
 80010c4:	6983      	ldr	r3, [r0, #24]
 80010c6:	b903      	cbnz	r3, 80010ca <__sinit+0x6>
 80010c8:	e776      	b.n	8000fb8 <__sinit.part.0>
 80010ca:	4770      	bx	lr

080010cc <__sfp_lock_acquire>:
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop

080010d0 <__sfp_lock_release>:
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop

080010d4 <__sinit_lock_acquire>:
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop

080010d8 <__sinit_lock_release>:
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop

080010dc <__fp_lock_all>:
 80010dc:	4b02      	ldr	r3, [pc, #8]	; (80010e8 <__fp_lock_all+0xc>)
 80010de:	4903      	ldr	r1, [pc, #12]	; (80010ec <__fp_lock_all+0x10>)
 80010e0:	6818      	ldr	r0, [r3, #0]
 80010e2:	f000 b987 	b.w	80013f4 <_fwalk>
 80010e6:	bf00      	nop
 80010e8:	20000000 	.word	0x20000000
 80010ec:	08000ecd 	.word	0x08000ecd

080010f0 <__fp_unlock_all>:
 80010f0:	4b02      	ldr	r3, [pc, #8]	; (80010fc <__fp_unlock_all+0xc>)
 80010f2:	4903      	ldr	r1, [pc, #12]	; (8001100 <__fp_unlock_all+0x10>)
 80010f4:	6818      	ldr	r0, [r3, #0]
 80010f6:	f000 b97d 	b.w	80013f4 <_fwalk>
 80010fa:	bf00      	nop
 80010fc:	20000000 	.word	0x20000000
 8001100:	08000edd 	.word	0x08000edd

08001104 <__sfvwrite_r>:
 8001104:	6893      	ldr	r3, [r2, #8]
 8001106:	2b00      	cmp	r3, #0
 8001108:	f000 8085 	beq.w	8001216 <__sfvwrite_r+0x112>
 800110c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001110:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 8001114:	460c      	mov	r4, r1
 8001116:	0719      	lsls	r1, r3, #28
 8001118:	4680      	mov	r8, r0
 800111a:	b083      	sub	sp, #12
 800111c:	4617      	mov	r7, r2
 800111e:	b298      	uxth	r0, r3
 8001120:	d525      	bpl.n	800116e <__sfvwrite_r+0x6a>
 8001122:	6923      	ldr	r3, [r4, #16]
 8001124:	b31b      	cbz	r3, 800116e <__sfvwrite_r+0x6a>
 8001126:	f010 0302 	ands.w	r3, r0, #2
 800112a:	683d      	ldr	r5, [r7, #0]
 800112c:	d02d      	beq.n	800118a <__sfvwrite_r+0x86>
 800112e:	f04f 0a00 	mov.w	sl, #0
 8001132:	f8df b2bc 	ldr.w	fp, [pc, #700]	; 80013f0 <__sfvwrite_r+0x2ec>
 8001136:	4656      	mov	r6, sl
 8001138:	46b9      	mov	r9, r7
 800113a:	455e      	cmp	r6, fp
 800113c:	4633      	mov	r3, r6
 800113e:	4652      	mov	r2, sl
 8001140:	bf28      	it	cs
 8001142:	465b      	movcs	r3, fp
 8001144:	4640      	mov	r0, r8
 8001146:	2e00      	cmp	r6, #0
 8001148:	d052      	beq.n	80011f0 <__sfvwrite_r+0xec>
 800114a:	6a21      	ldr	r1, [r4, #32]
 800114c:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 800114e:	47b8      	blx	r7
 8001150:	2800      	cmp	r0, #0
 8001152:	dd56      	ble.n	8001202 <__sfvwrite_r+0xfe>
 8001154:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8001158:	1a1b      	subs	r3, r3, r0
 800115a:	4482      	add	sl, r0
 800115c:	1a36      	subs	r6, r6, r0
 800115e:	f8c9 3008 	str.w	r3, [r9, #8]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d1e9      	bne.n	800113a <__sfvwrite_r+0x36>
 8001166:	2000      	movs	r0, #0
 8001168:	b003      	add	sp, #12
 800116a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800116e:	4621      	mov	r1, r4
 8001170:	4640      	mov	r0, r8
 8001172:	f7ff fd2d 	bl	8000bd0 <__swsetup_r>
 8001176:	2800      	cmp	r0, #0
 8001178:	f040 8136 	bne.w	80013e8 <__sfvwrite_r+0x2e4>
 800117c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001180:	683d      	ldr	r5, [r7, #0]
 8001182:	b298      	uxth	r0, r3
 8001184:	f010 0302 	ands.w	r3, r0, #2
 8001188:	d1d1      	bne.n	800112e <__sfvwrite_r+0x2a>
 800118a:	f010 0901 	ands.w	r9, r0, #1
 800118e:	d144      	bne.n	800121a <__sfvwrite_r+0x116>
 8001190:	464e      	mov	r6, r9
 8001192:	9700      	str	r7, [sp, #0]
 8001194:	b346      	cbz	r6, 80011e8 <__sfvwrite_r+0xe4>
 8001196:	0582      	lsls	r2, r0, #22
 8001198:	f8d4 b008 	ldr.w	fp, [r4, #8]
 800119c:	f140 8083 	bpl.w	80012a6 <__sfvwrite_r+0x1a2>
 80011a0:	45b3      	cmp	fp, r6
 80011a2:	465a      	mov	r2, fp
 80011a4:	f200 80b2 	bhi.w	800130c <__sfvwrite_r+0x208>
 80011a8:	f410 6f90 	tst.w	r0, #1152	; 0x480
 80011ac:	f040 80bf 	bne.w	800132e <__sfvwrite_r+0x22a>
 80011b0:	6820      	ldr	r0, [r4, #0]
 80011b2:	9201      	str	r2, [sp, #4]
 80011b4:	4649      	mov	r1, r9
 80011b6:	f000 fadd 	bl	8001774 <memmove>
 80011ba:	68a3      	ldr	r3, [r4, #8]
 80011bc:	9a01      	ldr	r2, [sp, #4]
 80011be:	eba3 010b 	sub.w	r1, r3, fp
 80011c2:	6823      	ldr	r3, [r4, #0]
 80011c4:	60a1      	str	r1, [r4, #8]
 80011c6:	4413      	add	r3, r2
 80011c8:	46b2      	mov	sl, r6
 80011ca:	6023      	str	r3, [r4, #0]
 80011cc:	2600      	movs	r6, #0
 80011ce:	9b00      	ldr	r3, [sp, #0]
 80011d0:	6898      	ldr	r0, [r3, #8]
 80011d2:	eba0 000a 	sub.w	r0, r0, sl
 80011d6:	44d1      	add	r9, sl
 80011d8:	6098      	str	r0, [r3, #8]
 80011da:	2800      	cmp	r0, #0
 80011dc:	d0c3      	beq.n	8001166 <__sfvwrite_r+0x62>
 80011de:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 80011e2:	b280      	uxth	r0, r0
 80011e4:	2e00      	cmp	r6, #0
 80011e6:	d1d6      	bne.n	8001196 <__sfvwrite_r+0x92>
 80011e8:	e9d5 9600 	ldrd	r9, r6, [r5]
 80011ec:	3508      	adds	r5, #8
 80011ee:	e7d1      	b.n	8001194 <__sfvwrite_r+0x90>
 80011f0:	e9d5 a600 	ldrd	sl, r6, [r5]
 80011f4:	3508      	adds	r5, #8
 80011f6:	e7a0      	b.n	800113a <__sfvwrite_r+0x36>
 80011f8:	4621      	mov	r1, r4
 80011fa:	4640      	mov	r0, r8
 80011fc:	f7ff fdfc 	bl	8000df8 <_fflush_r>
 8001200:	b380      	cbz	r0, 8001264 <__sfvwrite_r+0x160>
 8001202:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001206:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800120a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800120e:	81a3      	strh	r3, [r4, #12]
 8001210:	b003      	add	sp, #12
 8001212:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001216:	2000      	movs	r0, #0
 8001218:	4770      	bx	lr
 800121a:	461e      	mov	r6, r3
 800121c:	46aa      	mov	sl, r5
 800121e:	4699      	mov	r9, r3
 8001220:	4618      	mov	r0, r3
 8001222:	461d      	mov	r5, r3
 8001224:	9700      	str	r7, [sp, #0]
 8001226:	b356      	cbz	r6, 800127e <__sfvwrite_r+0x17a>
 8001228:	b388      	cbz	r0, 800128e <__sfvwrite_r+0x18a>
 800122a:	464a      	mov	r2, r9
 800122c:	e9d4 1304 	ldrd	r1, r3, [r4, #16]
 8001230:	6820      	ldr	r0, [r4, #0]
 8001232:	42b2      	cmp	r2, r6
 8001234:	bf28      	it	cs
 8001236:	4632      	movcs	r2, r6
 8001238:	4288      	cmp	r0, r1
 800123a:	d905      	bls.n	8001248 <__sfvwrite_r+0x144>
 800123c:	68a1      	ldr	r1, [r4, #8]
 800123e:	eb03 0b01 	add.w	fp, r3, r1
 8001242:	455a      	cmp	r2, fp
 8001244:	f300 80a6 	bgt.w	8001394 <__sfvwrite_r+0x290>
 8001248:	4293      	cmp	r3, r2
 800124a:	dc63      	bgt.n	8001314 <__sfvwrite_r+0x210>
 800124c:	6a21      	ldr	r1, [r4, #32]
 800124e:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8001250:	462a      	mov	r2, r5
 8001252:	4640      	mov	r0, r8
 8001254:	47b8      	blx	r7
 8001256:	f1b0 0b00 	subs.w	fp, r0, #0
 800125a:	ddd2      	ble.n	8001202 <__sfvwrite_r+0xfe>
 800125c:	ebb9 090b 	subs.w	r9, r9, fp
 8001260:	d0ca      	beq.n	80011f8 <__sfvwrite_r+0xf4>
 8001262:	2001      	movs	r0, #1
 8001264:	9a00      	ldr	r2, [sp, #0]
 8001266:	6893      	ldr	r3, [r2, #8]
 8001268:	eba3 030b 	sub.w	r3, r3, fp
 800126c:	445d      	add	r5, fp
 800126e:	eba6 060b 	sub.w	r6, r6, fp
 8001272:	6093      	str	r3, [r2, #8]
 8001274:	2b00      	cmp	r3, #0
 8001276:	f43f af76 	beq.w	8001166 <__sfvwrite_r+0x62>
 800127a:	2e00      	cmp	r6, #0
 800127c:	d1d4      	bne.n	8001228 <__sfvwrite_r+0x124>
 800127e:	f10a 0308 	add.w	r3, sl, #8
 8001282:	e953 5602 	ldrd	r5, r6, [r3, #-8]
 8001286:	469a      	mov	sl, r3
 8001288:	3308      	adds	r3, #8
 800128a:	2e00      	cmp	r6, #0
 800128c:	d0f9      	beq.n	8001282 <__sfvwrite_r+0x17e>
 800128e:	4632      	mov	r2, r6
 8001290:	210a      	movs	r1, #10
 8001292:	4628      	mov	r0, r5
 8001294:	f000 f984 	bl	80015a0 <memchr>
 8001298:	2800      	cmp	r0, #0
 800129a:	f000 809c 	beq.w	80013d6 <__sfvwrite_r+0x2d2>
 800129e:	3001      	adds	r0, #1
 80012a0:	eba0 0905 	sub.w	r9, r0, r5
 80012a4:	e7c1      	b.n	800122a <__sfvwrite_r+0x126>
 80012a6:	6820      	ldr	r0, [r4, #0]
 80012a8:	6923      	ldr	r3, [r4, #16]
 80012aa:	4298      	cmp	r0, r3
 80012ac:	d816      	bhi.n	80012dc <__sfvwrite_r+0x1d8>
 80012ae:	6963      	ldr	r3, [r4, #20]
 80012b0:	42b3      	cmp	r3, r6
 80012b2:	d813      	bhi.n	80012dc <__sfvwrite_r+0x1d8>
 80012b4:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80012b8:	42b2      	cmp	r2, r6
 80012ba:	bf28      	it	cs
 80012bc:	4632      	movcs	r2, r6
 80012be:	6a21      	ldr	r1, [r4, #32]
 80012c0:	fb92 f2f3 	sdiv	r2, r2, r3
 80012c4:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 80012c6:	fb02 f303 	mul.w	r3, r2, r3
 80012ca:	4640      	mov	r0, r8
 80012cc:	464a      	mov	r2, r9
 80012ce:	47b8      	blx	r7
 80012d0:	f1b0 0a00 	subs.w	sl, r0, #0
 80012d4:	dd95      	ble.n	8001202 <__sfvwrite_r+0xfe>
 80012d6:	eba6 060a 	sub.w	r6, r6, sl
 80012da:	e778      	b.n	80011ce <__sfvwrite_r+0xca>
 80012dc:	45b3      	cmp	fp, r6
 80012de:	46da      	mov	sl, fp
 80012e0:	bf28      	it	cs
 80012e2:	46b2      	movcs	sl, r6
 80012e4:	4652      	mov	r2, sl
 80012e6:	4649      	mov	r1, r9
 80012e8:	f000 fa44 	bl	8001774 <memmove>
 80012ec:	68a3      	ldr	r3, [r4, #8]
 80012ee:	6822      	ldr	r2, [r4, #0]
 80012f0:	eba3 030a 	sub.w	r3, r3, sl
 80012f4:	4452      	add	r2, sl
 80012f6:	60a3      	str	r3, [r4, #8]
 80012f8:	6022      	str	r2, [r4, #0]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d1eb      	bne.n	80012d6 <__sfvwrite_r+0x1d2>
 80012fe:	4621      	mov	r1, r4
 8001300:	4640      	mov	r0, r8
 8001302:	f7ff fd79 	bl	8000df8 <_fflush_r>
 8001306:	2800      	cmp	r0, #0
 8001308:	d0e5      	beq.n	80012d6 <__sfvwrite_r+0x1d2>
 800130a:	e77a      	b.n	8001202 <__sfvwrite_r+0xfe>
 800130c:	6820      	ldr	r0, [r4, #0]
 800130e:	46b3      	mov	fp, r6
 8001310:	4632      	mov	r2, r6
 8001312:	e74e      	b.n	80011b2 <__sfvwrite_r+0xae>
 8001314:	4629      	mov	r1, r5
 8001316:	9201      	str	r2, [sp, #4]
 8001318:	f000 fa2c 	bl	8001774 <memmove>
 800131c:	9a01      	ldr	r2, [sp, #4]
 800131e:	68a3      	ldr	r3, [r4, #8]
 8001320:	1a9b      	subs	r3, r3, r2
 8001322:	60a3      	str	r3, [r4, #8]
 8001324:	6823      	ldr	r3, [r4, #0]
 8001326:	4413      	add	r3, r2
 8001328:	6023      	str	r3, [r4, #0]
 800132a:	4693      	mov	fp, r2
 800132c:	e796      	b.n	800125c <__sfvwrite_r+0x158>
 800132e:	6823      	ldr	r3, [r4, #0]
 8001330:	6921      	ldr	r1, [r4, #16]
 8001332:	eba3 0b01 	sub.w	fp, r3, r1
 8001336:	6963      	ldr	r3, [r4, #20]
 8001338:	eb03 0a43 	add.w	sl, r3, r3, lsl #1
 800133c:	eb0a 7ada 	add.w	sl, sl, sl, lsr #31
 8001340:	f10b 0301 	add.w	r3, fp, #1
 8001344:	ea4f 0a6a 	mov.w	sl, sl, asr #1
 8001348:	4433      	add	r3, r6
 800134a:	4553      	cmp	r3, sl
 800134c:	4652      	mov	r2, sl
 800134e:	bf84      	itt	hi
 8001350:	469a      	movhi	sl, r3
 8001352:	4652      	movhi	r2, sl
 8001354:	0543      	lsls	r3, r0, #21
 8001356:	d52c      	bpl.n	80013b2 <__sfvwrite_r+0x2ae>
 8001358:	4611      	mov	r1, r2
 800135a:	4640      	mov	r0, r8
 800135c:	f000 fae8 	bl	8001930 <_malloc_r>
 8001360:	2800      	cmp	r0, #0
 8001362:	d03b      	beq.n	80013dc <__sfvwrite_r+0x2d8>
 8001364:	465a      	mov	r2, fp
 8001366:	6921      	ldr	r1, [r4, #16]
 8001368:	9001      	str	r0, [sp, #4]
 800136a:	f000 f969 	bl	8001640 <memcpy>
 800136e:	89a2      	ldrh	r2, [r4, #12]
 8001370:	9b01      	ldr	r3, [sp, #4]
 8001372:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8001376:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800137a:	81a2      	strh	r2, [r4, #12]
 800137c:	eb03 000b 	add.w	r0, r3, fp
 8001380:	6123      	str	r3, [r4, #16]
 8001382:	ebaa 030b 	sub.w	r3, sl, fp
 8001386:	f8c4 a014 	str.w	sl, [r4, #20]
 800138a:	60a3      	str	r3, [r4, #8]
 800138c:	6020      	str	r0, [r4, #0]
 800138e:	46b3      	mov	fp, r6
 8001390:	4632      	mov	r2, r6
 8001392:	e70e      	b.n	80011b2 <__sfvwrite_r+0xae>
 8001394:	4629      	mov	r1, r5
 8001396:	465a      	mov	r2, fp
 8001398:	f000 f9ec 	bl	8001774 <memmove>
 800139c:	6823      	ldr	r3, [r4, #0]
 800139e:	445b      	add	r3, fp
 80013a0:	6023      	str	r3, [r4, #0]
 80013a2:	4621      	mov	r1, r4
 80013a4:	4640      	mov	r0, r8
 80013a6:	f7ff fd27 	bl	8000df8 <_fflush_r>
 80013aa:	2800      	cmp	r0, #0
 80013ac:	f43f af56 	beq.w	800125c <__sfvwrite_r+0x158>
 80013b0:	e727      	b.n	8001202 <__sfvwrite_r+0xfe>
 80013b2:	4640      	mov	r0, r8
 80013b4:	f000 fb16 	bl	80019e4 <_realloc_r>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2800      	cmp	r0, #0
 80013bc:	d1de      	bne.n	800137c <__sfvwrite_r+0x278>
 80013be:	6921      	ldr	r1, [r4, #16]
 80013c0:	4640      	mov	r0, r8
 80013c2:	f000 fa53 	bl	800186c <_free_r>
 80013c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80013ca:	220c      	movs	r2, #12
 80013cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80013d0:	f8c8 2000 	str.w	r2, [r8]
 80013d4:	e717      	b.n	8001206 <__sfvwrite_r+0x102>
 80013d6:	1c72      	adds	r2, r6, #1
 80013d8:	4691      	mov	r9, r2
 80013da:	e727      	b.n	800122c <__sfvwrite_r+0x128>
 80013dc:	220c      	movs	r2, #12
 80013de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80013e2:	f8c8 2000 	str.w	r2, [r8]
 80013e6:	e70e      	b.n	8001206 <__sfvwrite_r+0x102>
 80013e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80013ec:	e6bc      	b.n	8001168 <__sfvwrite_r+0x64>
 80013ee:	bf00      	nop
 80013f0:	7ffffc00 	.word	0x7ffffc00

080013f4 <_fwalk>:
 80013f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80013f8:	4688      	mov	r8, r1
 80013fa:	f100 0748 	add.w	r7, r0, #72	; 0x48
 80013fe:	2600      	movs	r6, #0
 8001400:	e9d7 5401 	ldrd	r5, r4, [r7, #4]
 8001404:	3d01      	subs	r5, #1
 8001406:	d40f      	bmi.n	8001428 <_fwalk+0x34>
 8001408:	89a3      	ldrh	r3, [r4, #12]
 800140a:	2b01      	cmp	r3, #1
 800140c:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 8001410:	d906      	bls.n	8001420 <_fwalk+0x2c>
 8001412:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8001416:	3301      	adds	r3, #1
 8001418:	4620      	mov	r0, r4
 800141a:	d001      	beq.n	8001420 <_fwalk+0x2c>
 800141c:	47c0      	blx	r8
 800141e:	4306      	orrs	r6, r0
 8001420:	1c6b      	adds	r3, r5, #1
 8001422:	f104 0468 	add.w	r4, r4, #104	; 0x68
 8001426:	d1ef      	bne.n	8001408 <_fwalk+0x14>
 8001428:	683f      	ldr	r7, [r7, #0]
 800142a:	2f00      	cmp	r7, #0
 800142c:	d1e8      	bne.n	8001400 <_fwalk+0xc>
 800142e:	4630      	mov	r0, r6
 8001430:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001434 <_fwalk_reent>:
 8001434:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001438:	4607      	mov	r7, r0
 800143a:	4688      	mov	r8, r1
 800143c:	f100 0648 	add.w	r6, r0, #72	; 0x48
 8001440:	f04f 0900 	mov.w	r9, #0
 8001444:	e9d6 5401 	ldrd	r5, r4, [r6, #4]
 8001448:	3d01      	subs	r5, #1
 800144a:	d411      	bmi.n	8001470 <_fwalk_reent+0x3c>
 800144c:	89a3      	ldrh	r3, [r4, #12]
 800144e:	2b01      	cmp	r3, #1
 8001450:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 8001454:	d908      	bls.n	8001468 <_fwalk_reent+0x34>
 8001456:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 800145a:	3301      	adds	r3, #1
 800145c:	4621      	mov	r1, r4
 800145e:	d003      	beq.n	8001468 <_fwalk_reent+0x34>
 8001460:	4638      	mov	r0, r7
 8001462:	47c0      	blx	r8
 8001464:	ea49 0900 	orr.w	r9, r9, r0
 8001468:	1c6b      	adds	r3, r5, #1
 800146a:	f104 0468 	add.w	r4, r4, #104	; 0x68
 800146e:	d1ed      	bne.n	800144c <_fwalk_reent+0x18>
 8001470:	6836      	ldr	r6, [r6, #0]
 8001472:	2e00      	cmp	r6, #0
 8001474:	d1e6      	bne.n	8001444 <_fwalk_reent+0x10>
 8001476:	4648      	mov	r0, r9
 8001478:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800147c <__smakebuf_r>:
 800147c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800147e:	898b      	ldrh	r3, [r1, #12]
 8001480:	460c      	mov	r4, r1
 8001482:	0799      	lsls	r1, r3, #30
 8001484:	b097      	sub	sp, #92	; 0x5c
 8001486:	d507      	bpl.n	8001498 <__smakebuf_r+0x1c>
 8001488:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800148c:	2201      	movs	r2, #1
 800148e:	e9c4 3204 	strd	r3, r2, [r4, #16]
 8001492:	6023      	str	r3, [r4, #0]
 8001494:	b017      	add	sp, #92	; 0x5c
 8001496:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001498:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800149c:	2900      	cmp	r1, #0
 800149e:	4605      	mov	r5, r0
 80014a0:	db2d      	blt.n	80014fe <__smakebuf_r+0x82>
 80014a2:	466a      	mov	r2, sp
 80014a4:	f000 fc94 	bl	8001dd0 <_fstat_r>
 80014a8:	2800      	cmp	r0, #0
 80014aa:	db27      	blt.n	80014fc <__smakebuf_r+0x80>
 80014ac:	9e01      	ldr	r6, [sp, #4]
 80014ae:	f406 4670 	and.w	r6, r6, #61440	; 0xf000
 80014b2:	f44f 6780 	mov.w	r7, #1024	; 0x400
 80014b6:	f5a6 5600 	sub.w	r6, r6, #8192	; 0x2000
 80014ba:	fab6 f686 	clz	r6, r6
 80014be:	4639      	mov	r1, r7
 80014c0:	4628      	mov	r0, r5
 80014c2:	0976      	lsrs	r6, r6, #5
 80014c4:	f000 fa34 	bl	8001930 <_malloc_r>
 80014c8:	b330      	cbz	r0, 8001518 <__smakebuf_r+0x9c>
 80014ca:	89a3      	ldrh	r3, [r4, #12]
 80014cc:	4a1a      	ldr	r2, [pc, #104]	; (8001538 <__smakebuf_r+0xbc>)
 80014ce:	62aa      	str	r2, [r5, #40]	; 0x28
 80014d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014d4:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80014d8:	81a3      	strh	r3, [r4, #12]
 80014da:	6020      	str	r0, [r4, #0]
 80014dc:	2e00      	cmp	r6, #0
 80014de:	d0d9      	beq.n	8001494 <__smakebuf_r+0x18>
 80014e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80014e4:	4628      	mov	r0, r5
 80014e6:	f000 fc89 	bl	8001dfc <_isatty_r>
 80014ea:	2800      	cmp	r0, #0
 80014ec:	d0d2      	beq.n	8001494 <__smakebuf_r+0x18>
 80014ee:	89a3      	ldrh	r3, [r4, #12]
 80014f0:	f023 0303 	bic.w	r3, r3, #3
 80014f4:	f043 0301 	orr.w	r3, r3, #1
 80014f8:	81a3      	strh	r3, [r4, #12]
 80014fa:	e7cb      	b.n	8001494 <__smakebuf_r+0x18>
 80014fc:	89a3      	ldrh	r3, [r4, #12]
 80014fe:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001502:	bf14      	ite	ne
 8001504:	2740      	movne	r7, #64	; 0x40
 8001506:	f44f 6780 	moveq.w	r7, #1024	; 0x400
 800150a:	4639      	mov	r1, r7
 800150c:	4628      	mov	r0, r5
 800150e:	2600      	movs	r6, #0
 8001510:	f000 fa0e 	bl	8001930 <_malloc_r>
 8001514:	2800      	cmp	r0, #0
 8001516:	d1d8      	bne.n	80014ca <__smakebuf_r+0x4e>
 8001518:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800151c:	059a      	lsls	r2, r3, #22
 800151e:	d4b9      	bmi.n	8001494 <__smakebuf_r+0x18>
 8001520:	f023 0303 	bic.w	r3, r3, #3
 8001524:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8001528:	f043 0302 	orr.w	r3, r3, #2
 800152c:	2101      	movs	r1, #1
 800152e:	e9c4 2104 	strd	r2, r1, [r4, #16]
 8001532:	81a3      	strh	r3, [r4, #12]
 8001534:	6022      	str	r2, [r4, #0]
 8001536:	e7ad      	b.n	8001494 <__smakebuf_r+0x18>
 8001538:	08000ed1 	.word	0x08000ed1

0800153c <__swhatbuf_r>:
 800153c:	b570      	push	{r4, r5, r6, lr}
 800153e:	460c      	mov	r4, r1
 8001540:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001544:	2900      	cmp	r1, #0
 8001546:	b096      	sub	sp, #88	; 0x58
 8001548:	4616      	mov	r6, r2
 800154a:	461d      	mov	r5, r3
 800154c:	db13      	blt.n	8001576 <__swhatbuf_r+0x3a>
 800154e:	466a      	mov	r2, sp
 8001550:	f000 fc3e 	bl	8001dd0 <_fstat_r>
 8001554:	2800      	cmp	r0, #0
 8001556:	db0e      	blt.n	8001576 <__swhatbuf_r+0x3a>
 8001558:	9901      	ldr	r1, [sp, #4]
 800155a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800155e:	f5a1 5100 	sub.w	r1, r1, #8192	; 0x2000
 8001562:	fab1 f181 	clz	r1, r1
 8001566:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800156a:	0949      	lsrs	r1, r1, #5
 800156c:	2000      	movs	r0, #0
 800156e:	6029      	str	r1, [r5, #0]
 8001570:	6033      	str	r3, [r6, #0]
 8001572:	b016      	add	sp, #88	; 0x58
 8001574:	bd70      	pop	{r4, r5, r6, pc}
 8001576:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800157a:	2200      	movs	r2, #0
 800157c:	061b      	lsls	r3, r3, #24
 800157e:	602a      	str	r2, [r5, #0]
 8001580:	d504      	bpl.n	800158c <__swhatbuf_r+0x50>
 8001582:	2340      	movs	r3, #64	; 0x40
 8001584:	2000      	movs	r0, #0
 8001586:	6033      	str	r3, [r6, #0]
 8001588:	b016      	add	sp, #88	; 0x58
 800158a:	bd70      	pop	{r4, r5, r6, pc}
 800158c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001590:	2000      	movs	r0, #0
 8001592:	6033      	str	r3, [r6, #0]
 8001594:	b016      	add	sp, #88	; 0x58
 8001596:	bd70      	pop	{r4, r5, r6, pc}
	...

080015a0 <memchr>:
 80015a0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80015a4:	2a10      	cmp	r2, #16
 80015a6:	db2b      	blt.n	8001600 <memchr+0x60>
 80015a8:	f010 0f07 	tst.w	r0, #7
 80015ac:	d008      	beq.n	80015c0 <memchr+0x20>
 80015ae:	f810 3b01 	ldrb.w	r3, [r0], #1
 80015b2:	3a01      	subs	r2, #1
 80015b4:	428b      	cmp	r3, r1
 80015b6:	d02d      	beq.n	8001614 <memchr+0x74>
 80015b8:	f010 0f07 	tst.w	r0, #7
 80015bc:	b342      	cbz	r2, 8001610 <memchr+0x70>
 80015be:	d1f6      	bne.n	80015ae <memchr+0xe>
 80015c0:	b4f0      	push	{r4, r5, r6, r7}
 80015c2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80015c6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80015ca:	f022 0407 	bic.w	r4, r2, #7
 80015ce:	f07f 0700 	mvns.w	r7, #0
 80015d2:	2300      	movs	r3, #0
 80015d4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80015d8:	3c08      	subs	r4, #8
 80015da:	ea85 0501 	eor.w	r5, r5, r1
 80015de:	ea86 0601 	eor.w	r6, r6, r1
 80015e2:	fa85 f547 	uadd8	r5, r5, r7
 80015e6:	faa3 f587 	sel	r5, r3, r7
 80015ea:	fa86 f647 	uadd8	r6, r6, r7
 80015ee:	faa5 f687 	sel	r6, r5, r7
 80015f2:	b98e      	cbnz	r6, 8001618 <memchr+0x78>
 80015f4:	d1ee      	bne.n	80015d4 <memchr+0x34>
 80015f6:	bcf0      	pop	{r4, r5, r6, r7}
 80015f8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80015fc:	f002 0207 	and.w	r2, r2, #7
 8001600:	b132      	cbz	r2, 8001610 <memchr+0x70>
 8001602:	f810 3b01 	ldrb.w	r3, [r0], #1
 8001606:	3a01      	subs	r2, #1
 8001608:	ea83 0301 	eor.w	r3, r3, r1
 800160c:	b113      	cbz	r3, 8001614 <memchr+0x74>
 800160e:	d1f8      	bne.n	8001602 <memchr+0x62>
 8001610:	2000      	movs	r0, #0
 8001612:	4770      	bx	lr
 8001614:	3801      	subs	r0, #1
 8001616:	4770      	bx	lr
 8001618:	2d00      	cmp	r5, #0
 800161a:	bf06      	itte	eq
 800161c:	4635      	moveq	r5, r6
 800161e:	3803      	subeq	r0, #3
 8001620:	3807      	subne	r0, #7
 8001622:	f015 0f01 	tst.w	r5, #1
 8001626:	d107      	bne.n	8001638 <memchr+0x98>
 8001628:	3001      	adds	r0, #1
 800162a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800162e:	bf02      	ittt	eq
 8001630:	3001      	addeq	r0, #1
 8001632:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8001636:	3001      	addeq	r0, #1
 8001638:	bcf0      	pop	{r4, r5, r6, r7}
 800163a:	3801      	subs	r0, #1
 800163c:	4770      	bx	lr
 800163e:	bf00      	nop

08001640 <memcpy>:
 8001640:	4684      	mov	ip, r0
 8001642:	ea41 0300 	orr.w	r3, r1, r0
 8001646:	f013 0303 	ands.w	r3, r3, #3
 800164a:	d16d      	bne.n	8001728 <memcpy+0xe8>
 800164c:	3a40      	subs	r2, #64	; 0x40
 800164e:	d341      	bcc.n	80016d4 <memcpy+0x94>
 8001650:	f851 3b04 	ldr.w	r3, [r1], #4
 8001654:	f840 3b04 	str.w	r3, [r0], #4
 8001658:	f851 3b04 	ldr.w	r3, [r1], #4
 800165c:	f840 3b04 	str.w	r3, [r0], #4
 8001660:	f851 3b04 	ldr.w	r3, [r1], #4
 8001664:	f840 3b04 	str.w	r3, [r0], #4
 8001668:	f851 3b04 	ldr.w	r3, [r1], #4
 800166c:	f840 3b04 	str.w	r3, [r0], #4
 8001670:	f851 3b04 	ldr.w	r3, [r1], #4
 8001674:	f840 3b04 	str.w	r3, [r0], #4
 8001678:	f851 3b04 	ldr.w	r3, [r1], #4
 800167c:	f840 3b04 	str.w	r3, [r0], #4
 8001680:	f851 3b04 	ldr.w	r3, [r1], #4
 8001684:	f840 3b04 	str.w	r3, [r0], #4
 8001688:	f851 3b04 	ldr.w	r3, [r1], #4
 800168c:	f840 3b04 	str.w	r3, [r0], #4
 8001690:	f851 3b04 	ldr.w	r3, [r1], #4
 8001694:	f840 3b04 	str.w	r3, [r0], #4
 8001698:	f851 3b04 	ldr.w	r3, [r1], #4
 800169c:	f840 3b04 	str.w	r3, [r0], #4
 80016a0:	f851 3b04 	ldr.w	r3, [r1], #4
 80016a4:	f840 3b04 	str.w	r3, [r0], #4
 80016a8:	f851 3b04 	ldr.w	r3, [r1], #4
 80016ac:	f840 3b04 	str.w	r3, [r0], #4
 80016b0:	f851 3b04 	ldr.w	r3, [r1], #4
 80016b4:	f840 3b04 	str.w	r3, [r0], #4
 80016b8:	f851 3b04 	ldr.w	r3, [r1], #4
 80016bc:	f840 3b04 	str.w	r3, [r0], #4
 80016c0:	f851 3b04 	ldr.w	r3, [r1], #4
 80016c4:	f840 3b04 	str.w	r3, [r0], #4
 80016c8:	f851 3b04 	ldr.w	r3, [r1], #4
 80016cc:	f840 3b04 	str.w	r3, [r0], #4
 80016d0:	3a40      	subs	r2, #64	; 0x40
 80016d2:	d2bd      	bcs.n	8001650 <memcpy+0x10>
 80016d4:	3230      	adds	r2, #48	; 0x30
 80016d6:	d311      	bcc.n	80016fc <memcpy+0xbc>
 80016d8:	f851 3b04 	ldr.w	r3, [r1], #4
 80016dc:	f840 3b04 	str.w	r3, [r0], #4
 80016e0:	f851 3b04 	ldr.w	r3, [r1], #4
 80016e4:	f840 3b04 	str.w	r3, [r0], #4
 80016e8:	f851 3b04 	ldr.w	r3, [r1], #4
 80016ec:	f840 3b04 	str.w	r3, [r0], #4
 80016f0:	f851 3b04 	ldr.w	r3, [r1], #4
 80016f4:	f840 3b04 	str.w	r3, [r0], #4
 80016f8:	3a10      	subs	r2, #16
 80016fa:	d2ed      	bcs.n	80016d8 <memcpy+0x98>
 80016fc:	320c      	adds	r2, #12
 80016fe:	d305      	bcc.n	800170c <memcpy+0xcc>
 8001700:	f851 3b04 	ldr.w	r3, [r1], #4
 8001704:	f840 3b04 	str.w	r3, [r0], #4
 8001708:	3a04      	subs	r2, #4
 800170a:	d2f9      	bcs.n	8001700 <memcpy+0xc0>
 800170c:	3204      	adds	r2, #4
 800170e:	d008      	beq.n	8001722 <memcpy+0xe2>
 8001710:	07d2      	lsls	r2, r2, #31
 8001712:	bf1c      	itt	ne
 8001714:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8001718:	f800 3b01 	strbne.w	r3, [r0], #1
 800171c:	d301      	bcc.n	8001722 <memcpy+0xe2>
 800171e:	880b      	ldrh	r3, [r1, #0]
 8001720:	8003      	strh	r3, [r0, #0]
 8001722:	4660      	mov	r0, ip
 8001724:	4770      	bx	lr
 8001726:	bf00      	nop
 8001728:	2a08      	cmp	r2, #8
 800172a:	d313      	bcc.n	8001754 <memcpy+0x114>
 800172c:	078b      	lsls	r3, r1, #30
 800172e:	d08d      	beq.n	800164c <memcpy+0xc>
 8001730:	f010 0303 	ands.w	r3, r0, #3
 8001734:	d08a      	beq.n	800164c <memcpy+0xc>
 8001736:	f1c3 0304 	rsb	r3, r3, #4
 800173a:	1ad2      	subs	r2, r2, r3
 800173c:	07db      	lsls	r3, r3, #31
 800173e:	bf1c      	itt	ne
 8001740:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8001744:	f800 3b01 	strbne.w	r3, [r0], #1
 8001748:	d380      	bcc.n	800164c <memcpy+0xc>
 800174a:	f831 3b02 	ldrh.w	r3, [r1], #2
 800174e:	f820 3b02 	strh.w	r3, [r0], #2
 8001752:	e77b      	b.n	800164c <memcpy+0xc>
 8001754:	3a04      	subs	r2, #4
 8001756:	d3d9      	bcc.n	800170c <memcpy+0xcc>
 8001758:	3a01      	subs	r2, #1
 800175a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800175e:	f800 3b01 	strb.w	r3, [r0], #1
 8001762:	d2f9      	bcs.n	8001758 <memcpy+0x118>
 8001764:	780b      	ldrb	r3, [r1, #0]
 8001766:	7003      	strb	r3, [r0, #0]
 8001768:	784b      	ldrb	r3, [r1, #1]
 800176a:	7043      	strb	r3, [r0, #1]
 800176c:	788b      	ldrb	r3, [r1, #2]
 800176e:	7083      	strb	r3, [r0, #2]
 8001770:	4660      	mov	r0, ip
 8001772:	4770      	bx	lr

08001774 <memmove>:
 8001774:	4288      	cmp	r0, r1
 8001776:	d90d      	bls.n	8001794 <memmove+0x20>
 8001778:	188b      	adds	r3, r1, r2
 800177a:	4283      	cmp	r3, r0
 800177c:	d90a      	bls.n	8001794 <memmove+0x20>
 800177e:	eb00 0c02 	add.w	ip, r0, r2
 8001782:	b1ba      	cbz	r2, 80017b4 <memmove+0x40>
 8001784:	4662      	mov	r2, ip
 8001786:	f813 cd01 	ldrb.w	ip, [r3, #-1]!
 800178a:	f802 cd01 	strb.w	ip, [r2, #-1]!
 800178e:	4299      	cmp	r1, r3
 8001790:	d1f9      	bne.n	8001786 <memmove+0x12>
 8001792:	4770      	bx	lr
 8001794:	2a0f      	cmp	r2, #15
 8001796:	d80e      	bhi.n	80017b6 <memmove+0x42>
 8001798:	4603      	mov	r3, r0
 800179a:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
 800179e:	b14a      	cbz	r2, 80017b4 <memmove+0x40>
 80017a0:	f10c 0c01 	add.w	ip, ip, #1
 80017a4:	3b01      	subs	r3, #1
 80017a6:	448c      	add	ip, r1
 80017a8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80017ac:	f803 2f01 	strb.w	r2, [r3, #1]!
 80017b0:	4561      	cmp	r1, ip
 80017b2:	d1f9      	bne.n	80017a8 <memmove+0x34>
 80017b4:	4770      	bx	lr
 80017b6:	ea40 0301 	orr.w	r3, r0, r1
 80017ba:	079b      	lsls	r3, r3, #30
 80017bc:	d150      	bne.n	8001860 <memmove+0xec>
 80017be:	f1a2 0310 	sub.w	r3, r2, #16
 80017c2:	b570      	push	{r4, r5, r6, lr}
 80017c4:	f101 0c20 	add.w	ip, r1, #32
 80017c8:	f023 050f 	bic.w	r5, r3, #15
 80017cc:	f101 0e10 	add.w	lr, r1, #16
 80017d0:	f100 0410 	add.w	r4, r0, #16
 80017d4:	44ac      	add	ip, r5
 80017d6:	091b      	lsrs	r3, r3, #4
 80017d8:	f85e 5c10 	ldr.w	r5, [lr, #-16]
 80017dc:	f844 5c10 	str.w	r5, [r4, #-16]
 80017e0:	f85e 5c0c 	ldr.w	r5, [lr, #-12]
 80017e4:	f844 5c0c 	str.w	r5, [r4, #-12]
 80017e8:	f85e 5c08 	ldr.w	r5, [lr, #-8]
 80017ec:	f844 5c08 	str.w	r5, [r4, #-8]
 80017f0:	f85e 5c04 	ldr.w	r5, [lr, #-4]
 80017f4:	f844 5c04 	str.w	r5, [r4, #-4]
 80017f8:	f10e 0e10 	add.w	lr, lr, #16
 80017fc:	45e6      	cmp	lr, ip
 80017fe:	f104 0410 	add.w	r4, r4, #16
 8001802:	d1e9      	bne.n	80017d8 <memmove+0x64>
 8001804:	3301      	adds	r3, #1
 8001806:	f012 0f0c 	tst.w	r2, #12
 800180a:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 800180e:	f002 040f 	and.w	r4, r2, #15
 8001812:	eb00 1303 	add.w	r3, r0, r3, lsl #4
 8001816:	d027      	beq.n	8001868 <memmove+0xf4>
 8001818:	3c04      	subs	r4, #4
 800181a:	f024 0603 	bic.w	r6, r4, #3
 800181e:	ea4f 0c94 	mov.w	ip, r4, lsr #2
 8001822:	441e      	add	r6, r3
 8001824:	1f1c      	subs	r4, r3, #4
 8001826:	468e      	mov	lr, r1
 8001828:	f85e 5b04 	ldr.w	r5, [lr], #4
 800182c:	f844 5f04 	str.w	r5, [r4, #4]!
 8001830:	42b4      	cmp	r4, r6
 8001832:	d1f9      	bne.n	8001828 <memmove+0xb4>
 8001834:	f10c 0401 	add.w	r4, ip, #1
 8001838:	f002 0203 	and.w	r2, r2, #3
 800183c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8001840:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8001844:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
 8001848:	b14a      	cbz	r2, 800185e <memmove+0xea>
 800184a:	f10c 0c01 	add.w	ip, ip, #1
 800184e:	3b01      	subs	r3, #1
 8001850:	448c      	add	ip, r1
 8001852:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001856:	f803 2f01 	strb.w	r2, [r3, #1]!
 800185a:	4561      	cmp	r1, ip
 800185c:	d1f9      	bne.n	8001852 <memmove+0xde>
 800185e:	bd70      	pop	{r4, r5, r6, pc}
 8001860:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
 8001864:	4603      	mov	r3, r0
 8001866:	e79b      	b.n	80017a0 <memmove+0x2c>
 8001868:	4622      	mov	r2, r4
 800186a:	e7eb      	b.n	8001844 <memmove+0xd0>

0800186c <_free_r>:
 800186c:	2900      	cmp	r1, #0
 800186e:	d058      	beq.n	8001922 <_free_r+0xb6>
 8001870:	b530      	push	{r4, r5, lr}
 8001872:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001876:	b083      	sub	sp, #12
 8001878:	2b00      	cmp	r3, #0
 800187a:	f1a1 0404 	sub.w	r4, r1, #4
 800187e:	bfb8      	it	lt
 8001880:	18e4      	addlt	r4, r4, r3
 8001882:	9001      	str	r0, [sp, #4]
 8001884:	f000 fae2 	bl	8001e4c <__malloc_lock>
 8001888:	4a28      	ldr	r2, [pc, #160]	; (800192c <_free_r+0xc0>)
 800188a:	9801      	ldr	r0, [sp, #4]
 800188c:	6813      	ldr	r3, [r2, #0]
 800188e:	b133      	cbz	r3, 800189e <_free_r+0x32>
 8001890:	42a3      	cmp	r3, r4
 8001892:	d90d      	bls.n	80018b0 <_free_r+0x44>
 8001894:	6821      	ldr	r1, [r4, #0]
 8001896:	eb04 0c01 	add.w	ip, r4, r1
 800189a:	4563      	cmp	r3, ip
 800189c:	d02f      	beq.n	80018fe <_free_r+0x92>
 800189e:	6063      	str	r3, [r4, #4]
 80018a0:	6014      	str	r4, [r2, #0]
 80018a2:	b003      	add	sp, #12
 80018a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80018a8:	f000 bad2 	b.w	8001e50 <__malloc_unlock>
 80018ac:	42a3      	cmp	r3, r4
 80018ae:	d810      	bhi.n	80018d2 <_free_r+0x66>
 80018b0:	461a      	mov	r2, r3
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d1f9      	bne.n	80018ac <_free_r+0x40>
 80018b8:	6811      	ldr	r1, [r2, #0]
 80018ba:	eb02 0c01 	add.w	ip, r2, r1
 80018be:	4564      	cmp	r4, ip
 80018c0:	d019      	beq.n	80018f6 <_free_r+0x8a>
 80018c2:	d32f      	bcc.n	8001924 <_free_r+0xb8>
 80018c4:	6063      	str	r3, [r4, #4]
 80018c6:	6054      	str	r4, [r2, #4]
 80018c8:	b003      	add	sp, #12
 80018ca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80018ce:	f000 babf 	b.w	8001e50 <__malloc_unlock>
 80018d2:	6811      	ldr	r1, [r2, #0]
 80018d4:	eb02 0c01 	add.w	ip, r2, r1
 80018d8:	45a4      	cmp	ip, r4
 80018da:	d016      	beq.n	800190a <_free_r+0x9e>
 80018dc:	d822      	bhi.n	8001924 <_free_r+0xb8>
 80018de:	6821      	ldr	r1, [r4, #0]
 80018e0:	eb04 0c01 	add.w	ip, r4, r1
 80018e4:	4563      	cmp	r3, ip
 80018e6:	d1ed      	bne.n	80018c4 <_free_r+0x58>
 80018e8:	681d      	ldr	r5, [r3, #0]
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	4429      	add	r1, r5
 80018ee:	e9c4 1300 	strd	r1, r3, [r4]
 80018f2:	6054      	str	r4, [r2, #4]
 80018f4:	e7d5      	b.n	80018a2 <_free_r+0x36>
 80018f6:	6823      	ldr	r3, [r4, #0]
 80018f8:	4419      	add	r1, r3
 80018fa:	6011      	str	r1, [r2, #0]
 80018fc:	e7d1      	b.n	80018a2 <_free_r+0x36>
 80018fe:	681d      	ldr	r5, [r3, #0]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	4429      	add	r1, r5
 8001904:	e9c4 1300 	strd	r1, r3, [r4]
 8001908:	e7ca      	b.n	80018a0 <_free_r+0x34>
 800190a:	6824      	ldr	r4, [r4, #0]
 800190c:	4421      	add	r1, r4
 800190e:	1854      	adds	r4, r2, r1
 8001910:	42a3      	cmp	r3, r4
 8001912:	6011      	str	r1, [r2, #0]
 8001914:	d1c5      	bne.n	80018a2 <_free_r+0x36>
 8001916:	e9d3 4300 	ldrd	r4, r3, [r3]
 800191a:	4421      	add	r1, r4
 800191c:	e9c2 1300 	strd	r1, r3, [r2]
 8001920:	e7bf      	b.n	80018a2 <_free_r+0x36>
 8001922:	4770      	bx	lr
 8001924:	230c      	movs	r3, #12
 8001926:	6003      	str	r3, [r0, #0]
 8001928:	e7bb      	b.n	80018a2 <_free_r+0x36>
 800192a:	bf00      	nop
 800192c:	20000124 	.word	0x20000124

08001930 <_malloc_r>:
 8001930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001932:	1ccd      	adds	r5, r1, #3
 8001934:	f025 0503 	bic.w	r5, r5, #3
 8001938:	3508      	adds	r5, #8
 800193a:	2d0c      	cmp	r5, #12
 800193c:	bf38      	it	cc
 800193e:	250c      	movcc	r5, #12
 8001940:	2d00      	cmp	r5, #0
 8001942:	4606      	mov	r6, r0
 8001944:	db23      	blt.n	800198e <_malloc_r+0x5e>
 8001946:	42a9      	cmp	r1, r5
 8001948:	d821      	bhi.n	800198e <_malloc_r+0x5e>
 800194a:	4f25      	ldr	r7, [pc, #148]	; (80019e0 <_malloc_r+0xb0>)
 800194c:	f000 fa7e 	bl	8001e4c <__malloc_lock>
 8001950:	683a      	ldr	r2, [r7, #0]
 8001952:	b322      	cbz	r2, 800199e <_malloc_r+0x6e>
 8001954:	4614      	mov	r4, r2
 8001956:	e003      	b.n	8001960 <_malloc_r+0x30>
 8001958:	6863      	ldr	r3, [r4, #4]
 800195a:	4622      	mov	r2, r4
 800195c:	b1fb      	cbz	r3, 800199e <_malloc_r+0x6e>
 800195e:	461c      	mov	r4, r3
 8001960:	6823      	ldr	r3, [r4, #0]
 8001962:	1b5b      	subs	r3, r3, r5
 8001964:	d4f8      	bmi.n	8001958 <_malloc_r+0x28>
 8001966:	2b0b      	cmp	r3, #11
 8001968:	d815      	bhi.n	8001996 <_malloc_r+0x66>
 800196a:	6863      	ldr	r3, [r4, #4]
 800196c:	4294      	cmp	r4, r2
 800196e:	bf0c      	ite	eq
 8001970:	603b      	streq	r3, [r7, #0]
 8001972:	6053      	strne	r3, [r2, #4]
 8001974:	4630      	mov	r0, r6
 8001976:	f000 fa6b 	bl	8001e50 <__malloc_unlock>
 800197a:	f104 000b 	add.w	r0, r4, #11
 800197e:	1d23      	adds	r3, r4, #4
 8001980:	f020 0007 	bic.w	r0, r0, #7
 8001984:	1ac2      	subs	r2, r0, r3
 8001986:	d001      	beq.n	800198c <_malloc_r+0x5c>
 8001988:	1a1b      	subs	r3, r3, r0
 800198a:	50a3      	str	r3, [r4, r2]
 800198c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800198e:	230c      	movs	r3, #12
 8001990:	6033      	str	r3, [r6, #0]
 8001992:	2000      	movs	r0, #0
 8001994:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001996:	6023      	str	r3, [r4, #0]
 8001998:	441c      	add	r4, r3
 800199a:	6025      	str	r5, [r4, #0]
 800199c:	e7ea      	b.n	8001974 <_malloc_r+0x44>
 800199e:	6879      	ldr	r1, [r7, #4]
 80019a0:	b1c9      	cbz	r1, 80019d6 <_malloc_r+0xa6>
 80019a2:	4629      	mov	r1, r5
 80019a4:	4630      	mov	r0, r6
 80019a6:	f000 f845 	bl	8001a34 <_sbrk_r>
 80019aa:	1c43      	adds	r3, r0, #1
 80019ac:	d00c      	beq.n	80019c8 <_malloc_r+0x98>
 80019ae:	1cc4      	adds	r4, r0, #3
 80019b0:	f024 0403 	bic.w	r4, r4, #3
 80019b4:	42a0      	cmp	r0, r4
 80019b6:	d005      	beq.n	80019c4 <_malloc_r+0x94>
 80019b8:	1a21      	subs	r1, r4, r0
 80019ba:	4630      	mov	r0, r6
 80019bc:	f000 f83a 	bl	8001a34 <_sbrk_r>
 80019c0:	3001      	adds	r0, #1
 80019c2:	d001      	beq.n	80019c8 <_malloc_r+0x98>
 80019c4:	6025      	str	r5, [r4, #0]
 80019c6:	e7d5      	b.n	8001974 <_malloc_r+0x44>
 80019c8:	230c      	movs	r3, #12
 80019ca:	4630      	mov	r0, r6
 80019cc:	6033      	str	r3, [r6, #0]
 80019ce:	f000 fa3f 	bl	8001e50 <__malloc_unlock>
 80019d2:	2000      	movs	r0, #0
 80019d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80019d6:	4630      	mov	r0, r6
 80019d8:	f000 f82c 	bl	8001a34 <_sbrk_r>
 80019dc:	6078      	str	r0, [r7, #4]
 80019de:	e7e0      	b.n	80019a2 <_malloc_r+0x72>
 80019e0:	20000124 	.word	0x20000124

080019e4 <_realloc_r>:
 80019e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019e6:	4614      	mov	r4, r2
 80019e8:	b1f9      	cbz	r1, 8001a2a <_realloc_r+0x46>
 80019ea:	b1ca      	cbz	r2, 8001a20 <_realloc_r+0x3c>
 80019ec:	4606      	mov	r6, r0
 80019ee:	460d      	mov	r5, r1
 80019f0:	f000 fa30 	bl	8001e54 <_malloc_usable_size_r>
 80019f4:	42a0      	cmp	r0, r4
 80019f6:	d302      	bcc.n	80019fe <_realloc_r+0x1a>
 80019f8:	462f      	mov	r7, r5
 80019fa:	4638      	mov	r0, r7
 80019fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80019fe:	4621      	mov	r1, r4
 8001a00:	4630      	mov	r0, r6
 8001a02:	f7ff ff95 	bl	8001930 <_malloc_r>
 8001a06:	4607      	mov	r7, r0
 8001a08:	2800      	cmp	r0, #0
 8001a0a:	d0f6      	beq.n	80019fa <_realloc_r+0x16>
 8001a0c:	4622      	mov	r2, r4
 8001a0e:	4629      	mov	r1, r5
 8001a10:	f7ff fe16 	bl	8001640 <memcpy>
 8001a14:	4630      	mov	r0, r6
 8001a16:	4629      	mov	r1, r5
 8001a18:	f7ff ff28 	bl	800186c <_free_r>
 8001a1c:	4638      	mov	r0, r7
 8001a1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001a20:	4627      	mov	r7, r4
 8001a22:	f7ff ff23 	bl	800186c <_free_r>
 8001a26:	4638      	mov	r0, r7
 8001a28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001a2a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8001a2e:	4611      	mov	r1, r2
 8001a30:	f7ff bf7e 	b.w	8001930 <_malloc_r>

08001a34 <_sbrk_r>:
 8001a34:	b538      	push	{r3, r4, r5, lr}
 8001a36:	4d07      	ldr	r5, [pc, #28]	; (8001a54 <_sbrk_r+0x20>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	4604      	mov	r4, r0
 8001a3c:	4608      	mov	r0, r1
 8001a3e:	602a      	str	r2, [r5, #0]
 8001a40:	f005 fa88 	bl	8006f54 <_sbrk>
 8001a44:	1c43      	adds	r3, r0, #1
 8001a46:	d000      	beq.n	8001a4a <_sbrk_r+0x16>
 8001a48:	bd38      	pop	{r3, r4, r5, pc}
 8001a4a:	682b      	ldr	r3, [r5, #0]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d0fb      	beq.n	8001a48 <_sbrk_r+0x14>
 8001a50:	6023      	str	r3, [r4, #0]
 8001a52:	bd38      	pop	{r3, r4, r5, pc}
 8001a54:	2000012c 	.word	0x2000012c

08001a58 <_init_signal_r>:
 8001a58:	b538      	push	{r3, r4, r5, lr}
 8001a5a:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001a5c:	b10c      	cbz	r4, 8001a62 <_init_signal_r+0xa>
 8001a5e:	2000      	movs	r0, #0
 8001a60:	bd38      	pop	{r3, r4, r5, pc}
 8001a62:	2180      	movs	r1, #128	; 0x80
 8001a64:	4605      	mov	r5, r0
 8001a66:	f7ff ff63 	bl	8001930 <_malloc_r>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	6468      	str	r0, [r5, #68]	; 0x44
 8001a6e:	b130      	cbz	r0, 8001a7e <_init_signal_r+0x26>
 8001a70:	1f03      	subs	r3, r0, #4
 8001a72:	327c      	adds	r2, #124	; 0x7c
 8001a74:	f843 4f04 	str.w	r4, [r3, #4]!
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d1fb      	bne.n	8001a74 <_init_signal_r+0x1c>
 8001a7c:	e7ef      	b.n	8001a5e <_init_signal_r+0x6>
 8001a7e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a82:	bd38      	pop	{r3, r4, r5, pc}

08001a84 <_signal_r>:
 8001a84:	291f      	cmp	r1, #31
 8001a86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a88:	4605      	mov	r5, r0
 8001a8a:	d808      	bhi.n	8001a9e <_signal_r+0x1a>
 8001a8c:	6c46      	ldr	r6, [r0, #68]	; 0x44
 8001a8e:	460c      	mov	r4, r1
 8001a90:	4617      	mov	r7, r2
 8001a92:	b14e      	cbz	r6, 8001aa8 <_signal_r+0x24>
 8001a94:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8001a98:	f846 7024 	str.w	r7, [r6, r4, lsl #2]
 8001a9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001a9e:	2316      	movs	r3, #22
 8001aa0:	6003      	str	r3, [r0, #0]
 8001aa2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001aa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001aa8:	2180      	movs	r1, #128	; 0x80
 8001aaa:	f7ff ff41 	bl	8001930 <_malloc_r>
 8001aae:	4606      	mov	r6, r0
 8001ab0:	6468      	str	r0, [r5, #68]	; 0x44
 8001ab2:	b140      	cbz	r0, 8001ac6 <_signal_r+0x42>
 8001ab4:	1f03      	subs	r3, r0, #4
 8001ab6:	f100 057c 	add.w	r5, r0, #124	; 0x7c
 8001aba:	2100      	movs	r1, #0
 8001abc:	f843 1f04 	str.w	r1, [r3, #4]!
 8001ac0:	429d      	cmp	r5, r3
 8001ac2:	d1fb      	bne.n	8001abc <_signal_r+0x38>
 8001ac4:	e7e6      	b.n	8001a94 <_signal_r+0x10>
 8001ac6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001aca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001acc <_raise_r>:
 8001acc:	291f      	cmp	r1, #31
 8001ace:	b538      	push	{r3, r4, r5, lr}
 8001ad0:	4605      	mov	r5, r0
 8001ad2:	d820      	bhi.n	8001b16 <_raise_r+0x4a>
 8001ad4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8001ad6:	460c      	mov	r4, r1
 8001ad8:	b16a      	cbz	r2, 8001af6 <_raise_r+0x2a>
 8001ada:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8001ade:	b153      	cbz	r3, 8001af6 <_raise_r+0x2a>
 8001ae0:	2b01      	cmp	r3, #1
 8001ae2:	d016      	beq.n	8001b12 <_raise_r+0x46>
 8001ae4:	1c59      	adds	r1, r3, #1
 8001ae6:	d010      	beq.n	8001b0a <_raise_r+0x3e>
 8001ae8:	2500      	movs	r5, #0
 8001aea:	4620      	mov	r0, r4
 8001aec:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
 8001af0:	4798      	blx	r3
 8001af2:	4628      	mov	r0, r5
 8001af4:	bd38      	pop	{r3, r4, r5, pc}
 8001af6:	4628      	mov	r0, r5
 8001af8:	f000 f8f8 	bl	8001cec <_getpid_r>
 8001afc:	4622      	mov	r2, r4
 8001afe:	4601      	mov	r1, r0
 8001b00:	4628      	mov	r0, r5
 8001b02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001b06:	f000 b8db 	b.w	8001cc0 <_kill_r>
 8001b0a:	2316      	movs	r3, #22
 8001b0c:	6003      	str	r3, [r0, #0]
 8001b0e:	2001      	movs	r0, #1
 8001b10:	bd38      	pop	{r3, r4, r5, pc}
 8001b12:	2000      	movs	r0, #0
 8001b14:	bd38      	pop	{r3, r4, r5, pc}
 8001b16:	2316      	movs	r3, #22
 8001b18:	6003      	str	r3, [r0, #0]
 8001b1a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b1e:	bd38      	pop	{r3, r4, r5, pc}

08001b20 <__sigtramp_r>:
 8001b20:	291f      	cmp	r1, #31
 8001b22:	d82a      	bhi.n	8001b7a <__sigtramp_r+0x5a>
 8001b24:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8001b26:	b538      	push	{r3, r4, r5, lr}
 8001b28:	460c      	mov	r4, r1
 8001b2a:	4605      	mov	r5, r0
 8001b2c:	b182      	cbz	r2, 8001b50 <__sigtramp_r+0x30>
 8001b2e:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
 8001b32:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8001b36:	b14b      	cbz	r3, 8001b4c <__sigtramp_r+0x2c>
 8001b38:	1c59      	adds	r1, r3, #1
 8001b3a:	d019      	beq.n	8001b70 <__sigtramp_r+0x50>
 8001b3c:	2b01      	cmp	r3, #1
 8001b3e:	d015      	beq.n	8001b6c <__sigtramp_r+0x4c>
 8001b40:	2500      	movs	r5, #0
 8001b42:	4620      	mov	r0, r4
 8001b44:	6015      	str	r5, [r2, #0]
 8001b46:	4798      	blx	r3
 8001b48:	4628      	mov	r0, r5
 8001b4a:	bd38      	pop	{r3, r4, r5, pc}
 8001b4c:	2001      	movs	r0, #1
 8001b4e:	bd38      	pop	{r3, r4, r5, pc}
 8001b50:	2180      	movs	r1, #128	; 0x80
 8001b52:	f7ff feed 	bl	8001930 <_malloc_r>
 8001b56:	4602      	mov	r2, r0
 8001b58:	6468      	str	r0, [r5, #68]	; 0x44
 8001b5a:	b158      	cbz	r0, 8001b74 <__sigtramp_r+0x54>
 8001b5c:	1f03      	subs	r3, r0, #4
 8001b5e:	2100      	movs	r1, #0
 8001b60:	307c      	adds	r0, #124	; 0x7c
 8001b62:	f843 1f04 	str.w	r1, [r3, #4]!
 8001b66:	4298      	cmp	r0, r3
 8001b68:	d1fb      	bne.n	8001b62 <__sigtramp_r+0x42>
 8001b6a:	e7e0      	b.n	8001b2e <__sigtramp_r+0xe>
 8001b6c:	2003      	movs	r0, #3
 8001b6e:	bd38      	pop	{r3, r4, r5, pc}
 8001b70:	2002      	movs	r0, #2
 8001b72:	bd38      	pop	{r3, r4, r5, pc}
 8001b74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b78:	bd38      	pop	{r3, r4, r5, pc}
 8001b7a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b7e:	4770      	bx	lr

08001b80 <raise>:
 8001b80:	b538      	push	{r3, r4, r5, lr}
 8001b82:	4b14      	ldr	r3, [pc, #80]	; (8001bd4 <raise+0x54>)
 8001b84:	281f      	cmp	r0, #31
 8001b86:	681d      	ldr	r5, [r3, #0]
 8001b88:	d81f      	bhi.n	8001bca <raise+0x4a>
 8001b8a:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 8001b8c:	4604      	mov	r4, r0
 8001b8e:	b162      	cbz	r2, 8001baa <raise+0x2a>
 8001b90:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
 8001b94:	b14b      	cbz	r3, 8001baa <raise+0x2a>
 8001b96:	2b01      	cmp	r3, #1
 8001b98:	d015      	beq.n	8001bc6 <raise+0x46>
 8001b9a:	1c59      	adds	r1, r3, #1
 8001b9c:	d00f      	beq.n	8001bbe <raise+0x3e>
 8001b9e:	2500      	movs	r5, #0
 8001ba0:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
 8001ba4:	4798      	blx	r3
 8001ba6:	4628      	mov	r0, r5
 8001ba8:	bd38      	pop	{r3, r4, r5, pc}
 8001baa:	4628      	mov	r0, r5
 8001bac:	f000 f89e 	bl	8001cec <_getpid_r>
 8001bb0:	4622      	mov	r2, r4
 8001bb2:	4601      	mov	r1, r0
 8001bb4:	4628      	mov	r0, r5
 8001bb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001bba:	f000 b881 	b.w	8001cc0 <_kill_r>
 8001bbe:	2316      	movs	r3, #22
 8001bc0:	602b      	str	r3, [r5, #0]
 8001bc2:	2001      	movs	r0, #1
 8001bc4:	bd38      	pop	{r3, r4, r5, pc}
 8001bc6:	2000      	movs	r0, #0
 8001bc8:	bd38      	pop	{r3, r4, r5, pc}
 8001bca:	2316      	movs	r3, #22
 8001bcc:	602b      	str	r3, [r5, #0]
 8001bce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001bd2:	bd38      	pop	{r3, r4, r5, pc}
 8001bd4:	20000000 	.word	0x20000000

08001bd8 <signal>:
 8001bd8:	4b12      	ldr	r3, [pc, #72]	; (8001c24 <signal+0x4c>)
 8001bda:	281f      	cmp	r0, #31
 8001bdc:	b570      	push	{r4, r5, r6, lr}
 8001bde:	681e      	ldr	r6, [r3, #0]
 8001be0:	d808      	bhi.n	8001bf4 <signal+0x1c>
 8001be2:	460d      	mov	r5, r1
 8001be4:	6c71      	ldr	r1, [r6, #68]	; 0x44
 8001be6:	4604      	mov	r4, r0
 8001be8:	b149      	cbz	r1, 8001bfe <signal+0x26>
 8001bea:	f851 0024 	ldr.w	r0, [r1, r4, lsl #2]
 8001bee:	f841 5024 	str.w	r5, [r1, r4, lsl #2]
 8001bf2:	bd70      	pop	{r4, r5, r6, pc}
 8001bf4:	2316      	movs	r3, #22
 8001bf6:	6033      	str	r3, [r6, #0]
 8001bf8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001bfc:	bd70      	pop	{r4, r5, r6, pc}
 8001bfe:	2180      	movs	r1, #128	; 0x80
 8001c00:	4630      	mov	r0, r6
 8001c02:	f7ff fe95 	bl	8001930 <_malloc_r>
 8001c06:	4601      	mov	r1, r0
 8001c08:	6470      	str	r0, [r6, #68]	; 0x44
 8001c0a:	b140      	cbz	r0, 8001c1e <signal+0x46>
 8001c0c:	1f03      	subs	r3, r0, #4
 8001c0e:	f100 0c7c 	add.w	ip, r0, #124	; 0x7c
 8001c12:	2200      	movs	r2, #0
 8001c14:	f843 2f04 	str.w	r2, [r3, #4]!
 8001c18:	4563      	cmp	r3, ip
 8001c1a:	d1fb      	bne.n	8001c14 <signal+0x3c>
 8001c1c:	e7e5      	b.n	8001bea <signal+0x12>
 8001c1e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c22:	bd70      	pop	{r4, r5, r6, pc}
 8001c24:	20000000 	.word	0x20000000

08001c28 <_init_signal>:
 8001c28:	b538      	push	{r3, r4, r5, lr}
 8001c2a:	4b0b      	ldr	r3, [pc, #44]	; (8001c58 <_init_signal+0x30>)
 8001c2c:	681d      	ldr	r5, [r3, #0]
 8001c2e:	6c6c      	ldr	r4, [r5, #68]	; 0x44
 8001c30:	b10c      	cbz	r4, 8001c36 <_init_signal+0xe>
 8001c32:	2000      	movs	r0, #0
 8001c34:	bd38      	pop	{r3, r4, r5, pc}
 8001c36:	2180      	movs	r1, #128	; 0x80
 8001c38:	4628      	mov	r0, r5
 8001c3a:	f7ff fe79 	bl	8001930 <_malloc_r>
 8001c3e:	6468      	str	r0, [r5, #68]	; 0x44
 8001c40:	b138      	cbz	r0, 8001c52 <_init_signal+0x2a>
 8001c42:	1f03      	subs	r3, r0, #4
 8001c44:	f100 027c 	add.w	r2, r0, #124	; 0x7c
 8001c48:	f843 4f04 	str.w	r4, [r3, #4]!
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d1fb      	bne.n	8001c48 <_init_signal+0x20>
 8001c50:	e7ef      	b.n	8001c32 <_init_signal+0xa>
 8001c52:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c56:	bd38      	pop	{r3, r4, r5, pc}
 8001c58:	20000000 	.word	0x20000000

08001c5c <__sigtramp>:
 8001c5c:	b538      	push	{r3, r4, r5, lr}
 8001c5e:	4b17      	ldr	r3, [pc, #92]	; (8001cbc <__sigtramp+0x60>)
 8001c60:	281f      	cmp	r0, #31
 8001c62:	681d      	ldr	r5, [r3, #0]
 8001c64:	d826      	bhi.n	8001cb4 <__sigtramp+0x58>
 8001c66:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 8001c68:	4604      	mov	r4, r0
 8001c6a:	b182      	cbz	r2, 8001c8e <__sigtramp+0x32>
 8001c6c:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
 8001c70:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8001c74:	b14b      	cbz	r3, 8001c8a <__sigtramp+0x2e>
 8001c76:	1c59      	adds	r1, r3, #1
 8001c78:	d01a      	beq.n	8001cb0 <__sigtramp+0x54>
 8001c7a:	2b01      	cmp	r3, #1
 8001c7c:	d016      	beq.n	8001cac <__sigtramp+0x50>
 8001c7e:	2500      	movs	r5, #0
 8001c80:	4620      	mov	r0, r4
 8001c82:	6015      	str	r5, [r2, #0]
 8001c84:	4798      	blx	r3
 8001c86:	4628      	mov	r0, r5
 8001c88:	bd38      	pop	{r3, r4, r5, pc}
 8001c8a:	2001      	movs	r0, #1
 8001c8c:	bd38      	pop	{r3, r4, r5, pc}
 8001c8e:	2180      	movs	r1, #128	; 0x80
 8001c90:	4628      	mov	r0, r5
 8001c92:	f7ff fe4d 	bl	8001930 <_malloc_r>
 8001c96:	4602      	mov	r2, r0
 8001c98:	6468      	str	r0, [r5, #68]	; 0x44
 8001c9a:	b158      	cbz	r0, 8001cb4 <__sigtramp+0x58>
 8001c9c:	1f03      	subs	r3, r0, #4
 8001c9e:	2100      	movs	r1, #0
 8001ca0:	307c      	adds	r0, #124	; 0x7c
 8001ca2:	f843 1f04 	str.w	r1, [r3, #4]!
 8001ca6:	4283      	cmp	r3, r0
 8001ca8:	d1fb      	bne.n	8001ca2 <__sigtramp+0x46>
 8001caa:	e7df      	b.n	8001c6c <__sigtramp+0x10>
 8001cac:	2003      	movs	r0, #3
 8001cae:	bd38      	pop	{r3, r4, r5, pc}
 8001cb0:	2002      	movs	r0, #2
 8001cb2:	bd38      	pop	{r3, r4, r5, pc}
 8001cb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001cb8:	bd38      	pop	{r3, r4, r5, pc}
 8001cba:	bf00      	nop
 8001cbc:	20000000 	.word	0x20000000

08001cc0 <_kill_r>:
 8001cc0:	b570      	push	{r4, r5, r6, lr}
 8001cc2:	460c      	mov	r4, r1
 8001cc4:	4d08      	ldr	r5, [pc, #32]	; (8001ce8 <_kill_r+0x28>)
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2600      	movs	r6, #0
 8001cca:	4620      	mov	r0, r4
 8001ccc:	4611      	mov	r1, r2
 8001cce:	461c      	mov	r4, r3
 8001cd0:	602e      	str	r6, [r5, #0]
 8001cd2:	f005 f907 	bl	8006ee4 <_kill>
 8001cd6:	1c43      	adds	r3, r0, #1
 8001cd8:	d000      	beq.n	8001cdc <_kill_r+0x1c>
 8001cda:	bd70      	pop	{r4, r5, r6, pc}
 8001cdc:	682b      	ldr	r3, [r5, #0]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d0fb      	beq.n	8001cda <_kill_r+0x1a>
 8001ce2:	6023      	str	r3, [r4, #0]
 8001ce4:	bd70      	pop	{r4, r5, r6, pc}
 8001ce6:	bf00      	nop
 8001ce8:	2000012c 	.word	0x2000012c

08001cec <_getpid_r>:
 8001cec:	f005 b8f8 	b.w	8006ee0 <_getpid>

08001cf0 <__sread>:
 8001cf0:	b510      	push	{r4, lr}
 8001cf2:	460c      	mov	r4, r1
 8001cf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001cf8:	f000 f8b6 	bl	8001e68 <_read_r>
 8001cfc:	2800      	cmp	r0, #0
 8001cfe:	db03      	blt.n	8001d08 <__sread+0x18>
 8001d00:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001d02:	4403      	add	r3, r0
 8001d04:	6563      	str	r3, [r4, #84]	; 0x54
 8001d06:	bd10      	pop	{r4, pc}
 8001d08:	89a3      	ldrh	r3, [r4, #12]
 8001d0a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001d0e:	81a3      	strh	r3, [r4, #12]
 8001d10:	bd10      	pop	{r4, pc}
 8001d12:	bf00      	nop

08001d14 <__seofread>:
 8001d14:	2000      	movs	r0, #0
 8001d16:	4770      	bx	lr

08001d18 <__swrite>:
 8001d18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001d1c:	460c      	mov	r4, r1
 8001d1e:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
 8001d22:	461f      	mov	r7, r3
 8001d24:	05cb      	lsls	r3, r1, #23
 8001d26:	4605      	mov	r5, r0
 8001d28:	4616      	mov	r6, r2
 8001d2a:	d40b      	bmi.n	8001d44 <__swrite+0x2c>
 8001d2c:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
 8001d30:	81a1      	strh	r1, [r4, #12]
 8001d32:	463b      	mov	r3, r7
 8001d34:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001d38:	4632      	mov	r2, r6
 8001d3a:	4628      	mov	r0, r5
 8001d3c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001d40:	f000 b81e 	b.w	8001d80 <_write_r>
 8001d44:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001d48:	2302      	movs	r3, #2
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	f000 f868 	bl	8001e20 <_lseek_r>
 8001d50:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 8001d54:	e7ea      	b.n	8001d2c <__swrite+0x14>
 8001d56:	bf00      	nop

08001d58 <__sseek>:
 8001d58:	b510      	push	{r4, lr}
 8001d5a:	460c      	mov	r4, r1
 8001d5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001d60:	f000 f85e 	bl	8001e20 <_lseek_r>
 8001d64:	89a3      	ldrh	r3, [r4, #12]
 8001d66:	1c42      	adds	r2, r0, #1
 8001d68:	bf0e      	itee	eq
 8001d6a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001d6e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001d72:	6560      	strne	r0, [r4, #84]	; 0x54
 8001d74:	81a3      	strh	r3, [r4, #12]
 8001d76:	bd10      	pop	{r4, pc}

08001d78 <__sclose>:
 8001d78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001d7c:	f000 b816 	b.w	8001dac <_close_r>

08001d80 <_write_r>:
 8001d80:	b538      	push	{r3, r4, r5, lr}
 8001d82:	460c      	mov	r4, r1
 8001d84:	4d08      	ldr	r5, [pc, #32]	; (8001da8 <_write_r+0x28>)
 8001d86:	4684      	mov	ip, r0
 8001d88:	4611      	mov	r1, r2
 8001d8a:	4620      	mov	r0, r4
 8001d8c:	461a      	mov	r2, r3
 8001d8e:	2300      	movs	r3, #0
 8001d90:	602b      	str	r3, [r5, #0]
 8001d92:	4664      	mov	r4, ip
 8001d94:	f005 f8c4 	bl	8006f20 <_write>
 8001d98:	1c43      	adds	r3, r0, #1
 8001d9a:	d000      	beq.n	8001d9e <_write_r+0x1e>
 8001d9c:	bd38      	pop	{r3, r4, r5, pc}
 8001d9e:	682b      	ldr	r3, [r5, #0]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d0fb      	beq.n	8001d9c <_write_r+0x1c>
 8001da4:	6023      	str	r3, [r4, #0]
 8001da6:	bd38      	pop	{r3, r4, r5, pc}
 8001da8:	2000012c 	.word	0x2000012c

08001dac <_close_r>:
 8001dac:	b538      	push	{r3, r4, r5, lr}
 8001dae:	4d07      	ldr	r5, [pc, #28]	; (8001dcc <_close_r+0x20>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	4604      	mov	r4, r0
 8001db4:	4608      	mov	r0, r1
 8001db6:	602a      	str	r2, [r5, #0]
 8001db8:	f005 f8c0 	bl	8006f3c <_close>
 8001dbc:	1c43      	adds	r3, r0, #1
 8001dbe:	d000      	beq.n	8001dc2 <_close_r+0x16>
 8001dc0:	bd38      	pop	{r3, r4, r5, pc}
 8001dc2:	682b      	ldr	r3, [r5, #0]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d0fb      	beq.n	8001dc0 <_close_r+0x14>
 8001dc8:	6023      	str	r3, [r4, #0]
 8001dca:	bd38      	pop	{r3, r4, r5, pc}
 8001dcc:	2000012c 	.word	0x2000012c

08001dd0 <_fstat_r>:
 8001dd0:	b570      	push	{r4, r5, r6, lr}
 8001dd2:	460c      	mov	r4, r1
 8001dd4:	4d08      	ldr	r5, [pc, #32]	; (8001df8 <_fstat_r+0x28>)
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2600      	movs	r6, #0
 8001dda:	4620      	mov	r0, r4
 8001ddc:	4611      	mov	r1, r2
 8001dde:	461c      	mov	r4, r3
 8001de0:	602e      	str	r6, [r5, #0]
 8001de2:	f005 f8ae 	bl	8006f42 <_fstat>
 8001de6:	1c43      	adds	r3, r0, #1
 8001de8:	d000      	beq.n	8001dec <_fstat_r+0x1c>
 8001dea:	bd70      	pop	{r4, r5, r6, pc}
 8001dec:	682b      	ldr	r3, [r5, #0]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d0fb      	beq.n	8001dea <_fstat_r+0x1a>
 8001df2:	6023      	str	r3, [r4, #0]
 8001df4:	bd70      	pop	{r4, r5, r6, pc}
 8001df6:	bf00      	nop
 8001df8:	2000012c 	.word	0x2000012c

08001dfc <_isatty_r>:
 8001dfc:	b538      	push	{r3, r4, r5, lr}
 8001dfe:	4d07      	ldr	r5, [pc, #28]	; (8001e1c <_isatty_r+0x20>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	4604      	mov	r4, r0
 8001e04:	4608      	mov	r0, r1
 8001e06:	602a      	str	r2, [r5, #0]
 8001e08:	f005 f8a0 	bl	8006f4c <_isatty>
 8001e0c:	1c43      	adds	r3, r0, #1
 8001e0e:	d000      	beq.n	8001e12 <_isatty_r+0x16>
 8001e10:	bd38      	pop	{r3, r4, r5, pc}
 8001e12:	682b      	ldr	r3, [r5, #0]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d0fb      	beq.n	8001e10 <_isatty_r+0x14>
 8001e18:	6023      	str	r3, [r4, #0]
 8001e1a:	bd38      	pop	{r3, r4, r5, pc}
 8001e1c:	2000012c 	.word	0x2000012c

08001e20 <_lseek_r>:
 8001e20:	b538      	push	{r3, r4, r5, lr}
 8001e22:	460c      	mov	r4, r1
 8001e24:	4d08      	ldr	r5, [pc, #32]	; (8001e48 <_lseek_r+0x28>)
 8001e26:	4684      	mov	ip, r0
 8001e28:	4611      	mov	r1, r2
 8001e2a:	4620      	mov	r0, r4
 8001e2c:	461a      	mov	r2, r3
 8001e2e:	2300      	movs	r3, #0
 8001e30:	602b      	str	r3, [r5, #0]
 8001e32:	4664      	mov	r4, ip
 8001e34:	f005 f88c 	bl	8006f50 <_lseek>
 8001e38:	1c43      	adds	r3, r0, #1
 8001e3a:	d000      	beq.n	8001e3e <_lseek_r+0x1e>
 8001e3c:	bd38      	pop	{r3, r4, r5, pc}
 8001e3e:	682b      	ldr	r3, [r5, #0]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d0fb      	beq.n	8001e3c <_lseek_r+0x1c>
 8001e44:	6023      	str	r3, [r4, #0]
 8001e46:	bd38      	pop	{r3, r4, r5, pc}
 8001e48:	2000012c 	.word	0x2000012c

08001e4c <__malloc_lock>:
 8001e4c:	4770      	bx	lr
 8001e4e:	bf00      	nop

08001e50 <__malloc_unlock>:
 8001e50:	4770      	bx	lr
 8001e52:	bf00      	nop

08001e54 <_malloc_usable_size_r>:
 8001e54:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8001e58:	2800      	cmp	r0, #0
 8001e5a:	f1a0 0004 	sub.w	r0, r0, #4
 8001e5e:	bfbc      	itt	lt
 8001e60:	580b      	ldrlt	r3, [r1, r0]
 8001e62:	18c0      	addlt	r0, r0, r3
 8001e64:	4770      	bx	lr
 8001e66:	bf00      	nop

08001e68 <_read_r>:
 8001e68:	b538      	push	{r3, r4, r5, lr}
 8001e6a:	460c      	mov	r4, r1
 8001e6c:	4d08      	ldr	r5, [pc, #32]	; (8001e90 <_read_r+0x28>)
 8001e6e:	4684      	mov	ip, r0
 8001e70:	4611      	mov	r1, r2
 8001e72:	4620      	mov	r0, r4
 8001e74:	461a      	mov	r2, r3
 8001e76:	2300      	movs	r3, #0
 8001e78:	602b      	str	r3, [r5, #0]
 8001e7a:	4664      	mov	r4, ip
 8001e7c:	f005 f840 	bl	8006f00 <_read>
 8001e80:	1c43      	adds	r3, r0, #1
 8001e82:	d000      	beq.n	8001e86 <_read_r+0x1e>
 8001e84:	bd38      	pop	{r3, r4, r5, pc}
 8001e86:	682b      	ldr	r3, [r5, #0]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d0fb      	beq.n	8001e84 <_read_r+0x1c>
 8001e8c:	6023      	str	r3, [r4, #0]
 8001e8e:	bd38      	pop	{r3, r4, r5, pc}
 8001e90:	2000012c 	.word	0x2000012c

08001e94 <__aeabi_drsub>:
 8001e94:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8001e98:	e002      	b.n	8001ea0 <__adddf3>
 8001e9a:	bf00      	nop

08001e9c <__aeabi_dsub>:
 8001e9c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08001ea0 <__adddf3>:
 8001ea0:	b530      	push	{r4, r5, lr}
 8001ea2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8001ea6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8001eaa:	ea94 0f05 	teq	r4, r5
 8001eae:	bf08      	it	eq
 8001eb0:	ea90 0f02 	teqeq	r0, r2
 8001eb4:	bf1f      	itttt	ne
 8001eb6:	ea54 0c00 	orrsne.w	ip, r4, r0
 8001eba:	ea55 0c02 	orrsne.w	ip, r5, r2
 8001ebe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8001ec2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8001ec6:	f000 80e2 	beq.w	800208e <__adddf3+0x1ee>
 8001eca:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8001ece:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8001ed2:	bfb8      	it	lt
 8001ed4:	426d      	neglt	r5, r5
 8001ed6:	dd0c      	ble.n	8001ef2 <__adddf3+0x52>
 8001ed8:	442c      	add	r4, r5
 8001eda:	ea80 0202 	eor.w	r2, r0, r2
 8001ede:	ea81 0303 	eor.w	r3, r1, r3
 8001ee2:	ea82 0000 	eor.w	r0, r2, r0
 8001ee6:	ea83 0101 	eor.w	r1, r3, r1
 8001eea:	ea80 0202 	eor.w	r2, r0, r2
 8001eee:	ea81 0303 	eor.w	r3, r1, r3
 8001ef2:	2d36      	cmp	r5, #54	; 0x36
 8001ef4:	bf88      	it	hi
 8001ef6:	bd30      	pophi	{r4, r5, pc}
 8001ef8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8001efc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8001f00:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8001f04:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8001f08:	d002      	beq.n	8001f10 <__adddf3+0x70>
 8001f0a:	4240      	negs	r0, r0
 8001f0c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001f10:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8001f14:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8001f18:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8001f1c:	d002      	beq.n	8001f24 <__adddf3+0x84>
 8001f1e:	4252      	negs	r2, r2
 8001f20:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8001f24:	ea94 0f05 	teq	r4, r5
 8001f28:	f000 80a7 	beq.w	800207a <__adddf3+0x1da>
 8001f2c:	f1a4 0401 	sub.w	r4, r4, #1
 8001f30:	f1d5 0e20 	rsbs	lr, r5, #32
 8001f34:	db0d      	blt.n	8001f52 <__adddf3+0xb2>
 8001f36:	fa02 fc0e 	lsl.w	ip, r2, lr
 8001f3a:	fa22 f205 	lsr.w	r2, r2, r5
 8001f3e:	1880      	adds	r0, r0, r2
 8001f40:	f141 0100 	adc.w	r1, r1, #0
 8001f44:	fa03 f20e 	lsl.w	r2, r3, lr
 8001f48:	1880      	adds	r0, r0, r2
 8001f4a:	fa43 f305 	asr.w	r3, r3, r5
 8001f4e:	4159      	adcs	r1, r3
 8001f50:	e00e      	b.n	8001f70 <__adddf3+0xd0>
 8001f52:	f1a5 0520 	sub.w	r5, r5, #32
 8001f56:	f10e 0e20 	add.w	lr, lr, #32
 8001f5a:	2a01      	cmp	r2, #1
 8001f5c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8001f60:	bf28      	it	cs
 8001f62:	f04c 0c02 	orrcs.w	ip, ip, #2
 8001f66:	fa43 f305 	asr.w	r3, r3, r5
 8001f6a:	18c0      	adds	r0, r0, r3
 8001f6c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8001f70:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8001f74:	d507      	bpl.n	8001f86 <__adddf3+0xe6>
 8001f76:	f04f 0e00 	mov.w	lr, #0
 8001f7a:	f1dc 0c00 	rsbs	ip, ip, #0
 8001f7e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8001f82:	eb6e 0101 	sbc.w	r1, lr, r1
 8001f86:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8001f8a:	d31b      	bcc.n	8001fc4 <__adddf3+0x124>
 8001f8c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8001f90:	d30c      	bcc.n	8001fac <__adddf3+0x10c>
 8001f92:	0849      	lsrs	r1, r1, #1
 8001f94:	ea5f 0030 	movs.w	r0, r0, rrx
 8001f98:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8001f9c:	f104 0401 	add.w	r4, r4, #1
 8001fa0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8001fa4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8001fa8:	f080 809a 	bcs.w	80020e0 <__adddf3+0x240>
 8001fac:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8001fb0:	bf08      	it	eq
 8001fb2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8001fb6:	f150 0000 	adcs.w	r0, r0, #0
 8001fba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8001fbe:	ea41 0105 	orr.w	r1, r1, r5
 8001fc2:	bd30      	pop	{r4, r5, pc}
 8001fc4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8001fc8:	4140      	adcs	r0, r0
 8001fca:	eb41 0101 	adc.w	r1, r1, r1
 8001fce:	3c01      	subs	r4, #1
 8001fd0:	bf28      	it	cs
 8001fd2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8001fd6:	d2e9      	bcs.n	8001fac <__adddf3+0x10c>
 8001fd8:	f091 0f00 	teq	r1, #0
 8001fdc:	bf04      	itt	eq
 8001fde:	4601      	moveq	r1, r0
 8001fe0:	2000      	moveq	r0, #0
 8001fe2:	fab1 f381 	clz	r3, r1
 8001fe6:	bf08      	it	eq
 8001fe8:	3320      	addeq	r3, #32
 8001fea:	f1a3 030b 	sub.w	r3, r3, #11
 8001fee:	f1b3 0220 	subs.w	r2, r3, #32
 8001ff2:	da0c      	bge.n	800200e <__adddf3+0x16e>
 8001ff4:	320c      	adds	r2, #12
 8001ff6:	dd08      	ble.n	800200a <__adddf3+0x16a>
 8001ff8:	f102 0c14 	add.w	ip, r2, #20
 8001ffc:	f1c2 020c 	rsb	r2, r2, #12
 8002000:	fa01 f00c 	lsl.w	r0, r1, ip
 8002004:	fa21 f102 	lsr.w	r1, r1, r2
 8002008:	e00c      	b.n	8002024 <__adddf3+0x184>
 800200a:	f102 0214 	add.w	r2, r2, #20
 800200e:	bfd8      	it	le
 8002010:	f1c2 0c20 	rsble	ip, r2, #32
 8002014:	fa01 f102 	lsl.w	r1, r1, r2
 8002018:	fa20 fc0c 	lsr.w	ip, r0, ip
 800201c:	bfdc      	itt	le
 800201e:	ea41 010c 	orrle.w	r1, r1, ip
 8002022:	4090      	lslle	r0, r2
 8002024:	1ae4      	subs	r4, r4, r3
 8002026:	bfa2      	ittt	ge
 8002028:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800202c:	4329      	orrge	r1, r5
 800202e:	bd30      	popge	{r4, r5, pc}
 8002030:	ea6f 0404 	mvn.w	r4, r4
 8002034:	3c1f      	subs	r4, #31
 8002036:	da1c      	bge.n	8002072 <__adddf3+0x1d2>
 8002038:	340c      	adds	r4, #12
 800203a:	dc0e      	bgt.n	800205a <__adddf3+0x1ba>
 800203c:	f104 0414 	add.w	r4, r4, #20
 8002040:	f1c4 0220 	rsb	r2, r4, #32
 8002044:	fa20 f004 	lsr.w	r0, r0, r4
 8002048:	fa01 f302 	lsl.w	r3, r1, r2
 800204c:	ea40 0003 	orr.w	r0, r0, r3
 8002050:	fa21 f304 	lsr.w	r3, r1, r4
 8002054:	ea45 0103 	orr.w	r1, r5, r3
 8002058:	bd30      	pop	{r4, r5, pc}
 800205a:	f1c4 040c 	rsb	r4, r4, #12
 800205e:	f1c4 0220 	rsb	r2, r4, #32
 8002062:	fa20 f002 	lsr.w	r0, r0, r2
 8002066:	fa01 f304 	lsl.w	r3, r1, r4
 800206a:	ea40 0003 	orr.w	r0, r0, r3
 800206e:	4629      	mov	r1, r5
 8002070:	bd30      	pop	{r4, r5, pc}
 8002072:	fa21 f004 	lsr.w	r0, r1, r4
 8002076:	4629      	mov	r1, r5
 8002078:	bd30      	pop	{r4, r5, pc}
 800207a:	f094 0f00 	teq	r4, #0
 800207e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8002082:	bf06      	itte	eq
 8002084:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8002088:	3401      	addeq	r4, #1
 800208a:	3d01      	subne	r5, #1
 800208c:	e74e      	b.n	8001f2c <__adddf3+0x8c>
 800208e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8002092:	bf18      	it	ne
 8002094:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8002098:	d029      	beq.n	80020ee <__adddf3+0x24e>
 800209a:	ea94 0f05 	teq	r4, r5
 800209e:	bf08      	it	eq
 80020a0:	ea90 0f02 	teqeq	r0, r2
 80020a4:	d005      	beq.n	80020b2 <__adddf3+0x212>
 80020a6:	ea54 0c00 	orrs.w	ip, r4, r0
 80020aa:	bf04      	itt	eq
 80020ac:	4619      	moveq	r1, r3
 80020ae:	4610      	moveq	r0, r2
 80020b0:	bd30      	pop	{r4, r5, pc}
 80020b2:	ea91 0f03 	teq	r1, r3
 80020b6:	bf1e      	ittt	ne
 80020b8:	2100      	movne	r1, #0
 80020ba:	2000      	movne	r0, #0
 80020bc:	bd30      	popne	{r4, r5, pc}
 80020be:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80020c2:	d105      	bne.n	80020d0 <__adddf3+0x230>
 80020c4:	0040      	lsls	r0, r0, #1
 80020c6:	4149      	adcs	r1, r1
 80020c8:	bf28      	it	cs
 80020ca:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80020ce:	bd30      	pop	{r4, r5, pc}
 80020d0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80020d4:	bf3c      	itt	cc
 80020d6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80020da:	bd30      	popcc	{r4, r5, pc}
 80020dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80020e0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80020e4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80020e8:	f04f 0000 	mov.w	r0, #0
 80020ec:	bd30      	pop	{r4, r5, pc}
 80020ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80020f2:	bf1a      	itte	ne
 80020f4:	4619      	movne	r1, r3
 80020f6:	4610      	movne	r0, r2
 80020f8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80020fc:	bf1c      	itt	ne
 80020fe:	460b      	movne	r3, r1
 8002100:	4602      	movne	r2, r0
 8002102:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8002106:	bf06      	itte	eq
 8002108:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800210c:	ea91 0f03 	teqeq	r1, r3
 8002110:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8002114:	bd30      	pop	{r4, r5, pc}
 8002116:	bf00      	nop

08002118 <__aeabi_ui2d>:
 8002118:	f090 0f00 	teq	r0, #0
 800211c:	bf04      	itt	eq
 800211e:	2100      	moveq	r1, #0
 8002120:	4770      	bxeq	lr
 8002122:	b530      	push	{r4, r5, lr}
 8002124:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8002128:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800212c:	f04f 0500 	mov.w	r5, #0
 8002130:	f04f 0100 	mov.w	r1, #0
 8002134:	e750      	b.n	8001fd8 <__adddf3+0x138>
 8002136:	bf00      	nop

08002138 <__aeabi_i2d>:
 8002138:	f090 0f00 	teq	r0, #0
 800213c:	bf04      	itt	eq
 800213e:	2100      	moveq	r1, #0
 8002140:	4770      	bxeq	lr
 8002142:	b530      	push	{r4, r5, lr}
 8002144:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8002148:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800214c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8002150:	bf48      	it	mi
 8002152:	4240      	negmi	r0, r0
 8002154:	f04f 0100 	mov.w	r1, #0
 8002158:	e73e      	b.n	8001fd8 <__adddf3+0x138>
 800215a:	bf00      	nop

0800215c <__aeabi_f2d>:
 800215c:	0042      	lsls	r2, r0, #1
 800215e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8002162:	ea4f 0131 	mov.w	r1, r1, rrx
 8002166:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800216a:	bf1f      	itttt	ne
 800216c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8002170:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8002174:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8002178:	4770      	bxne	lr
 800217a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800217e:	bf08      	it	eq
 8002180:	4770      	bxeq	lr
 8002182:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8002186:	bf04      	itt	eq
 8002188:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800218c:	4770      	bxeq	lr
 800218e:	b530      	push	{r4, r5, lr}
 8002190:	f44f 7460 	mov.w	r4, #896	; 0x380
 8002194:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8002198:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800219c:	e71c      	b.n	8001fd8 <__adddf3+0x138>
 800219e:	bf00      	nop

080021a0 <__aeabi_ul2d>:
 80021a0:	ea50 0201 	orrs.w	r2, r0, r1
 80021a4:	bf08      	it	eq
 80021a6:	4770      	bxeq	lr
 80021a8:	b530      	push	{r4, r5, lr}
 80021aa:	f04f 0500 	mov.w	r5, #0
 80021ae:	e00a      	b.n	80021c6 <__aeabi_l2d+0x16>

080021b0 <__aeabi_l2d>:
 80021b0:	ea50 0201 	orrs.w	r2, r0, r1
 80021b4:	bf08      	it	eq
 80021b6:	4770      	bxeq	lr
 80021b8:	b530      	push	{r4, r5, lr}
 80021ba:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80021be:	d502      	bpl.n	80021c6 <__aeabi_l2d+0x16>
 80021c0:	4240      	negs	r0, r0
 80021c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80021c6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80021ca:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80021ce:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80021d2:	f43f aed8 	beq.w	8001f86 <__adddf3+0xe6>
 80021d6:	f04f 0203 	mov.w	r2, #3
 80021da:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80021de:	bf18      	it	ne
 80021e0:	3203      	addne	r2, #3
 80021e2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80021e6:	bf18      	it	ne
 80021e8:	3203      	addne	r2, #3
 80021ea:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80021ee:	f1c2 0320 	rsb	r3, r2, #32
 80021f2:	fa00 fc03 	lsl.w	ip, r0, r3
 80021f6:	fa20 f002 	lsr.w	r0, r0, r2
 80021fa:	fa01 fe03 	lsl.w	lr, r1, r3
 80021fe:	ea40 000e 	orr.w	r0, r0, lr
 8002202:	fa21 f102 	lsr.w	r1, r1, r2
 8002206:	4414      	add	r4, r2
 8002208:	e6bd      	b.n	8001f86 <__adddf3+0xe6>
 800220a:	bf00      	nop

0800220c <__aeabi_dmul>:
 800220c:	b570      	push	{r4, r5, r6, lr}
 800220e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8002212:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8002216:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800221a:	bf1d      	ittte	ne
 800221c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8002220:	ea94 0f0c 	teqne	r4, ip
 8002224:	ea95 0f0c 	teqne	r5, ip
 8002228:	f000 f8de 	bleq	80023e8 <__aeabi_dmul+0x1dc>
 800222c:	442c      	add	r4, r5
 800222e:	ea81 0603 	eor.w	r6, r1, r3
 8002232:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8002236:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800223a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800223e:	bf18      	it	ne
 8002240:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8002244:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8002248:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800224c:	d038      	beq.n	80022c0 <__aeabi_dmul+0xb4>
 800224e:	fba0 ce02 	umull	ip, lr, r0, r2
 8002252:	f04f 0500 	mov.w	r5, #0
 8002256:	fbe1 e502 	umlal	lr, r5, r1, r2
 800225a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800225e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8002262:	f04f 0600 	mov.w	r6, #0
 8002266:	fbe1 5603 	umlal	r5, r6, r1, r3
 800226a:	f09c 0f00 	teq	ip, #0
 800226e:	bf18      	it	ne
 8002270:	f04e 0e01 	orrne.w	lr, lr, #1
 8002274:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8002278:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800227c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8002280:	d204      	bcs.n	800228c <__aeabi_dmul+0x80>
 8002282:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8002286:	416d      	adcs	r5, r5
 8002288:	eb46 0606 	adc.w	r6, r6, r6
 800228c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8002290:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8002294:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8002298:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800229c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80022a0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80022a4:	bf88      	it	hi
 80022a6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80022aa:	d81e      	bhi.n	80022ea <__aeabi_dmul+0xde>
 80022ac:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80022b0:	bf08      	it	eq
 80022b2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80022b6:	f150 0000 	adcs.w	r0, r0, #0
 80022ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80022be:	bd70      	pop	{r4, r5, r6, pc}
 80022c0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80022c4:	ea46 0101 	orr.w	r1, r6, r1
 80022c8:	ea40 0002 	orr.w	r0, r0, r2
 80022cc:	ea81 0103 	eor.w	r1, r1, r3
 80022d0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80022d4:	bfc2      	ittt	gt
 80022d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80022da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80022de:	bd70      	popgt	{r4, r5, r6, pc}
 80022e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80022e4:	f04f 0e00 	mov.w	lr, #0
 80022e8:	3c01      	subs	r4, #1
 80022ea:	f300 80ab 	bgt.w	8002444 <__aeabi_dmul+0x238>
 80022ee:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80022f2:	bfde      	ittt	le
 80022f4:	2000      	movle	r0, #0
 80022f6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80022fa:	bd70      	pople	{r4, r5, r6, pc}
 80022fc:	f1c4 0400 	rsb	r4, r4, #0
 8002300:	3c20      	subs	r4, #32
 8002302:	da35      	bge.n	8002370 <__aeabi_dmul+0x164>
 8002304:	340c      	adds	r4, #12
 8002306:	dc1b      	bgt.n	8002340 <__aeabi_dmul+0x134>
 8002308:	f104 0414 	add.w	r4, r4, #20
 800230c:	f1c4 0520 	rsb	r5, r4, #32
 8002310:	fa00 f305 	lsl.w	r3, r0, r5
 8002314:	fa20 f004 	lsr.w	r0, r0, r4
 8002318:	fa01 f205 	lsl.w	r2, r1, r5
 800231c:	ea40 0002 	orr.w	r0, r0, r2
 8002320:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8002324:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8002328:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800232c:	fa21 f604 	lsr.w	r6, r1, r4
 8002330:	eb42 0106 	adc.w	r1, r2, r6
 8002334:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8002338:	bf08      	it	eq
 800233a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800233e:	bd70      	pop	{r4, r5, r6, pc}
 8002340:	f1c4 040c 	rsb	r4, r4, #12
 8002344:	f1c4 0520 	rsb	r5, r4, #32
 8002348:	fa00 f304 	lsl.w	r3, r0, r4
 800234c:	fa20 f005 	lsr.w	r0, r0, r5
 8002350:	fa01 f204 	lsl.w	r2, r1, r4
 8002354:	ea40 0002 	orr.w	r0, r0, r2
 8002358:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800235c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8002360:	f141 0100 	adc.w	r1, r1, #0
 8002364:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8002368:	bf08      	it	eq
 800236a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800236e:	bd70      	pop	{r4, r5, r6, pc}
 8002370:	f1c4 0520 	rsb	r5, r4, #32
 8002374:	fa00 f205 	lsl.w	r2, r0, r5
 8002378:	ea4e 0e02 	orr.w	lr, lr, r2
 800237c:	fa20 f304 	lsr.w	r3, r0, r4
 8002380:	fa01 f205 	lsl.w	r2, r1, r5
 8002384:	ea43 0302 	orr.w	r3, r3, r2
 8002388:	fa21 f004 	lsr.w	r0, r1, r4
 800238c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8002390:	fa21 f204 	lsr.w	r2, r1, r4
 8002394:	ea20 0002 	bic.w	r0, r0, r2
 8002398:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800239c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80023a0:	bf08      	it	eq
 80023a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80023a6:	bd70      	pop	{r4, r5, r6, pc}
 80023a8:	f094 0f00 	teq	r4, #0
 80023ac:	d10f      	bne.n	80023ce <__aeabi_dmul+0x1c2>
 80023ae:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80023b2:	0040      	lsls	r0, r0, #1
 80023b4:	eb41 0101 	adc.w	r1, r1, r1
 80023b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80023bc:	bf08      	it	eq
 80023be:	3c01      	subeq	r4, #1
 80023c0:	d0f7      	beq.n	80023b2 <__aeabi_dmul+0x1a6>
 80023c2:	ea41 0106 	orr.w	r1, r1, r6
 80023c6:	f095 0f00 	teq	r5, #0
 80023ca:	bf18      	it	ne
 80023cc:	4770      	bxne	lr
 80023ce:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80023d2:	0052      	lsls	r2, r2, #1
 80023d4:	eb43 0303 	adc.w	r3, r3, r3
 80023d8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80023dc:	bf08      	it	eq
 80023de:	3d01      	subeq	r5, #1
 80023e0:	d0f7      	beq.n	80023d2 <__aeabi_dmul+0x1c6>
 80023e2:	ea43 0306 	orr.w	r3, r3, r6
 80023e6:	4770      	bx	lr
 80023e8:	ea94 0f0c 	teq	r4, ip
 80023ec:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80023f0:	bf18      	it	ne
 80023f2:	ea95 0f0c 	teqne	r5, ip
 80023f6:	d00c      	beq.n	8002412 <__aeabi_dmul+0x206>
 80023f8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80023fc:	bf18      	it	ne
 80023fe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8002402:	d1d1      	bne.n	80023a8 <__aeabi_dmul+0x19c>
 8002404:	ea81 0103 	eor.w	r1, r1, r3
 8002408:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800240c:	f04f 0000 	mov.w	r0, #0
 8002410:	bd70      	pop	{r4, r5, r6, pc}
 8002412:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8002416:	bf06      	itte	eq
 8002418:	4610      	moveq	r0, r2
 800241a:	4619      	moveq	r1, r3
 800241c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8002420:	d019      	beq.n	8002456 <__aeabi_dmul+0x24a>
 8002422:	ea94 0f0c 	teq	r4, ip
 8002426:	d102      	bne.n	800242e <__aeabi_dmul+0x222>
 8002428:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800242c:	d113      	bne.n	8002456 <__aeabi_dmul+0x24a>
 800242e:	ea95 0f0c 	teq	r5, ip
 8002432:	d105      	bne.n	8002440 <__aeabi_dmul+0x234>
 8002434:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8002438:	bf1c      	itt	ne
 800243a:	4610      	movne	r0, r2
 800243c:	4619      	movne	r1, r3
 800243e:	d10a      	bne.n	8002456 <__aeabi_dmul+0x24a>
 8002440:	ea81 0103 	eor.w	r1, r1, r3
 8002444:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8002448:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800244c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8002450:	f04f 0000 	mov.w	r0, #0
 8002454:	bd70      	pop	{r4, r5, r6, pc}
 8002456:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800245a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800245e:	bd70      	pop	{r4, r5, r6, pc}

08002460 <__aeabi_ddiv>:
 8002460:	b570      	push	{r4, r5, r6, lr}
 8002462:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8002466:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800246a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800246e:	bf1d      	ittte	ne
 8002470:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8002474:	ea94 0f0c 	teqne	r4, ip
 8002478:	ea95 0f0c 	teqne	r5, ip
 800247c:	f000 f8a7 	bleq	80025ce <__aeabi_ddiv+0x16e>
 8002480:	eba4 0405 	sub.w	r4, r4, r5
 8002484:	ea81 0e03 	eor.w	lr, r1, r3
 8002488:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800248c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8002490:	f000 8088 	beq.w	80025a4 <__aeabi_ddiv+0x144>
 8002494:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8002498:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800249c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80024a0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80024a4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80024a8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80024ac:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80024b0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80024b4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80024b8:	429d      	cmp	r5, r3
 80024ba:	bf08      	it	eq
 80024bc:	4296      	cmpeq	r6, r2
 80024be:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80024c2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80024c6:	d202      	bcs.n	80024ce <__aeabi_ddiv+0x6e>
 80024c8:	085b      	lsrs	r3, r3, #1
 80024ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80024ce:	1ab6      	subs	r6, r6, r2
 80024d0:	eb65 0503 	sbc.w	r5, r5, r3
 80024d4:	085b      	lsrs	r3, r3, #1
 80024d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80024da:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80024de:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80024e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80024e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80024ea:	bf22      	ittt	cs
 80024ec:	1ab6      	subcs	r6, r6, r2
 80024ee:	4675      	movcs	r5, lr
 80024f0:	ea40 000c 	orrcs.w	r0, r0, ip
 80024f4:	085b      	lsrs	r3, r3, #1
 80024f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80024fa:	ebb6 0e02 	subs.w	lr, r6, r2
 80024fe:	eb75 0e03 	sbcs.w	lr, r5, r3
 8002502:	bf22      	ittt	cs
 8002504:	1ab6      	subcs	r6, r6, r2
 8002506:	4675      	movcs	r5, lr
 8002508:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800250c:	085b      	lsrs	r3, r3, #1
 800250e:	ea4f 0232 	mov.w	r2, r2, rrx
 8002512:	ebb6 0e02 	subs.w	lr, r6, r2
 8002516:	eb75 0e03 	sbcs.w	lr, r5, r3
 800251a:	bf22      	ittt	cs
 800251c:	1ab6      	subcs	r6, r6, r2
 800251e:	4675      	movcs	r5, lr
 8002520:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8002524:	085b      	lsrs	r3, r3, #1
 8002526:	ea4f 0232 	mov.w	r2, r2, rrx
 800252a:	ebb6 0e02 	subs.w	lr, r6, r2
 800252e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8002532:	bf22      	ittt	cs
 8002534:	1ab6      	subcs	r6, r6, r2
 8002536:	4675      	movcs	r5, lr
 8002538:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800253c:	ea55 0e06 	orrs.w	lr, r5, r6
 8002540:	d018      	beq.n	8002574 <__aeabi_ddiv+0x114>
 8002542:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8002546:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800254a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800254e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8002552:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8002556:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800255a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800255e:	d1c0      	bne.n	80024e2 <__aeabi_ddiv+0x82>
 8002560:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8002564:	d10b      	bne.n	800257e <__aeabi_ddiv+0x11e>
 8002566:	ea41 0100 	orr.w	r1, r1, r0
 800256a:	f04f 0000 	mov.w	r0, #0
 800256e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8002572:	e7b6      	b.n	80024e2 <__aeabi_ddiv+0x82>
 8002574:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8002578:	bf04      	itt	eq
 800257a:	4301      	orreq	r1, r0
 800257c:	2000      	moveq	r0, #0
 800257e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8002582:	bf88      	it	hi
 8002584:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8002588:	f63f aeaf 	bhi.w	80022ea <__aeabi_dmul+0xde>
 800258c:	ebb5 0c03 	subs.w	ip, r5, r3
 8002590:	bf04      	itt	eq
 8002592:	ebb6 0c02 	subseq.w	ip, r6, r2
 8002596:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800259a:	f150 0000 	adcs.w	r0, r0, #0
 800259e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80025a2:	bd70      	pop	{r4, r5, r6, pc}
 80025a4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80025a8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80025ac:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80025b0:	bfc2      	ittt	gt
 80025b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80025b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80025ba:	bd70      	popgt	{r4, r5, r6, pc}
 80025bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80025c0:	f04f 0e00 	mov.w	lr, #0
 80025c4:	3c01      	subs	r4, #1
 80025c6:	e690      	b.n	80022ea <__aeabi_dmul+0xde>
 80025c8:	ea45 0e06 	orr.w	lr, r5, r6
 80025cc:	e68d      	b.n	80022ea <__aeabi_dmul+0xde>
 80025ce:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80025d2:	ea94 0f0c 	teq	r4, ip
 80025d6:	bf08      	it	eq
 80025d8:	ea95 0f0c 	teqeq	r5, ip
 80025dc:	f43f af3b 	beq.w	8002456 <__aeabi_dmul+0x24a>
 80025e0:	ea94 0f0c 	teq	r4, ip
 80025e4:	d10a      	bne.n	80025fc <__aeabi_ddiv+0x19c>
 80025e6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80025ea:	f47f af34 	bne.w	8002456 <__aeabi_dmul+0x24a>
 80025ee:	ea95 0f0c 	teq	r5, ip
 80025f2:	f47f af25 	bne.w	8002440 <__aeabi_dmul+0x234>
 80025f6:	4610      	mov	r0, r2
 80025f8:	4619      	mov	r1, r3
 80025fa:	e72c      	b.n	8002456 <__aeabi_dmul+0x24a>
 80025fc:	ea95 0f0c 	teq	r5, ip
 8002600:	d106      	bne.n	8002610 <__aeabi_ddiv+0x1b0>
 8002602:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8002606:	f43f aefd 	beq.w	8002404 <__aeabi_dmul+0x1f8>
 800260a:	4610      	mov	r0, r2
 800260c:	4619      	mov	r1, r3
 800260e:	e722      	b.n	8002456 <__aeabi_dmul+0x24a>
 8002610:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8002614:	bf18      	it	ne
 8002616:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800261a:	f47f aec5 	bne.w	80023a8 <__aeabi_dmul+0x19c>
 800261e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8002622:	f47f af0d 	bne.w	8002440 <__aeabi_dmul+0x234>
 8002626:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800262a:	f47f aeeb 	bne.w	8002404 <__aeabi_dmul+0x1f8>
 800262e:	e712      	b.n	8002456 <__aeabi_dmul+0x24a>

08002630 <__aeabi_d2f>:
 8002630:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8002634:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8002638:	bf24      	itt	cs
 800263a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800263e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8002642:	d90d      	bls.n	8002660 <__aeabi_d2f+0x30>
 8002644:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8002648:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 800264c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8002650:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8002654:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8002658:	bf08      	it	eq
 800265a:	f020 0001 	biceq.w	r0, r0, #1
 800265e:	4770      	bx	lr
 8002660:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8002664:	d121      	bne.n	80026aa <__aeabi_d2f+0x7a>
 8002666:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800266a:	bfbc      	itt	lt
 800266c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8002670:	4770      	bxlt	lr
 8002672:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8002676:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800267a:	f1c2 0218 	rsb	r2, r2, #24
 800267e:	f1c2 0c20 	rsb	ip, r2, #32
 8002682:	fa10 f30c 	lsls.w	r3, r0, ip
 8002686:	fa20 f002 	lsr.w	r0, r0, r2
 800268a:	bf18      	it	ne
 800268c:	f040 0001 	orrne.w	r0, r0, #1
 8002690:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8002694:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8002698:	fa03 fc0c 	lsl.w	ip, r3, ip
 800269c:	ea40 000c 	orr.w	r0, r0, ip
 80026a0:	fa23 f302 	lsr.w	r3, r3, r2
 80026a4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80026a8:	e7cc      	b.n	8002644 <__aeabi_d2f+0x14>
 80026aa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80026ae:	d107      	bne.n	80026c0 <__aeabi_d2f+0x90>
 80026b0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80026b4:	bf1e      	ittt	ne
 80026b6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80026ba:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80026be:	4770      	bxne	lr
 80026c0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80026c4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80026c8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80026cc:	4770      	bx	lr
 80026ce:	bf00      	nop

080026d0 <__aeabi_d2lz>:
 80026d0:	b538      	push	{r3, r4, r5, lr}
 80026d2:	2200      	movs	r2, #0
 80026d4:	2300      	movs	r3, #0
 80026d6:	4604      	mov	r4, r0
 80026d8:	460d      	mov	r5, r1
 80026da:	f000 f88f 	bl	80027fc <__aeabi_dcmplt>
 80026de:	b928      	cbnz	r0, 80026ec <__aeabi_d2lz+0x1c>
 80026e0:	4620      	mov	r0, r4
 80026e2:	4629      	mov	r1, r5
 80026e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80026e8:	f000 b80a 	b.w	8002700 <__aeabi_d2ulz>
 80026ec:	4620      	mov	r0, r4
 80026ee:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 80026f2:	f000 f805 	bl	8002700 <__aeabi_d2ulz>
 80026f6:	4240      	negs	r0, r0
 80026f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80026fc:	bd38      	pop	{r3, r4, r5, pc}
 80026fe:	bf00      	nop

08002700 <__aeabi_d2ulz>:
 8002700:	b5d0      	push	{r4, r6, r7, lr}
 8002702:	4b0c      	ldr	r3, [pc, #48]	; (8002734 <__aeabi_d2ulz+0x34>)
 8002704:	2200      	movs	r2, #0
 8002706:	4606      	mov	r6, r0
 8002708:	460f      	mov	r7, r1
 800270a:	f7ff fd7f 	bl	800220c <__aeabi_dmul>
 800270e:	f000 f89d 	bl	800284c <__aeabi_d2uiz>
 8002712:	4604      	mov	r4, r0
 8002714:	f7ff fd00 	bl	8002118 <__aeabi_ui2d>
 8002718:	4b07      	ldr	r3, [pc, #28]	; (8002738 <__aeabi_d2ulz+0x38>)
 800271a:	2200      	movs	r2, #0
 800271c:	f7ff fd76 	bl	800220c <__aeabi_dmul>
 8002720:	4602      	mov	r2, r0
 8002722:	460b      	mov	r3, r1
 8002724:	4630      	mov	r0, r6
 8002726:	4639      	mov	r1, r7
 8002728:	f7ff fbb8 	bl	8001e9c <__aeabi_dsub>
 800272c:	f000 f88e 	bl	800284c <__aeabi_d2uiz>
 8002730:	4621      	mov	r1, r4
 8002732:	bdd0      	pop	{r4, r6, r7, pc}
 8002734:	3df00000 	.word	0x3df00000
 8002738:	41f00000 	.word	0x41f00000

0800273c <__gedf2>:
 800273c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8002740:	e006      	b.n	8002750 <__cmpdf2+0x4>
 8002742:	bf00      	nop

08002744 <__ledf2>:
 8002744:	f04f 0c01 	mov.w	ip, #1
 8002748:	e002      	b.n	8002750 <__cmpdf2+0x4>
 800274a:	bf00      	nop

0800274c <__cmpdf2>:
 800274c:	f04f 0c01 	mov.w	ip, #1
 8002750:	f84d cd04 	str.w	ip, [sp, #-4]!
 8002754:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8002758:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800275c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8002760:	bf18      	it	ne
 8002762:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8002766:	d01b      	beq.n	80027a0 <__cmpdf2+0x54>
 8002768:	b001      	add	sp, #4
 800276a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800276e:	bf0c      	ite	eq
 8002770:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8002774:	ea91 0f03 	teqne	r1, r3
 8002778:	bf02      	ittt	eq
 800277a:	ea90 0f02 	teqeq	r0, r2
 800277e:	2000      	moveq	r0, #0
 8002780:	4770      	bxeq	lr
 8002782:	f110 0f00 	cmn.w	r0, #0
 8002786:	ea91 0f03 	teq	r1, r3
 800278a:	bf58      	it	pl
 800278c:	4299      	cmppl	r1, r3
 800278e:	bf08      	it	eq
 8002790:	4290      	cmpeq	r0, r2
 8002792:	bf2c      	ite	cs
 8002794:	17d8      	asrcs	r0, r3, #31
 8002796:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800279a:	f040 0001 	orr.w	r0, r0, #1
 800279e:	4770      	bx	lr
 80027a0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80027a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80027a8:	d102      	bne.n	80027b0 <__cmpdf2+0x64>
 80027aa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80027ae:	d107      	bne.n	80027c0 <__cmpdf2+0x74>
 80027b0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80027b4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80027b8:	d1d6      	bne.n	8002768 <__cmpdf2+0x1c>
 80027ba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80027be:	d0d3      	beq.n	8002768 <__cmpdf2+0x1c>
 80027c0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80027c4:	4770      	bx	lr
 80027c6:	bf00      	nop

080027c8 <__aeabi_cdrcmple>:
 80027c8:	4684      	mov	ip, r0
 80027ca:	4610      	mov	r0, r2
 80027cc:	4662      	mov	r2, ip
 80027ce:	468c      	mov	ip, r1
 80027d0:	4619      	mov	r1, r3
 80027d2:	4663      	mov	r3, ip
 80027d4:	e000      	b.n	80027d8 <__aeabi_cdcmpeq>
 80027d6:	bf00      	nop

080027d8 <__aeabi_cdcmpeq>:
 80027d8:	b501      	push	{r0, lr}
 80027da:	f7ff ffb7 	bl	800274c <__cmpdf2>
 80027de:	2800      	cmp	r0, #0
 80027e0:	bf48      	it	mi
 80027e2:	f110 0f00 	cmnmi.w	r0, #0
 80027e6:	bd01      	pop	{r0, pc}

080027e8 <__aeabi_dcmpeq>:
 80027e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80027ec:	f7ff fff4 	bl	80027d8 <__aeabi_cdcmpeq>
 80027f0:	bf0c      	ite	eq
 80027f2:	2001      	moveq	r0, #1
 80027f4:	2000      	movne	r0, #0
 80027f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80027fa:	bf00      	nop

080027fc <__aeabi_dcmplt>:
 80027fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8002800:	f7ff ffea 	bl	80027d8 <__aeabi_cdcmpeq>
 8002804:	bf34      	ite	cc
 8002806:	2001      	movcc	r0, #1
 8002808:	2000      	movcs	r0, #0
 800280a:	f85d fb08 	ldr.w	pc, [sp], #8
 800280e:	bf00      	nop

08002810 <__aeabi_dcmple>:
 8002810:	f84d ed08 	str.w	lr, [sp, #-8]!
 8002814:	f7ff ffe0 	bl	80027d8 <__aeabi_cdcmpeq>
 8002818:	bf94      	ite	ls
 800281a:	2001      	movls	r0, #1
 800281c:	2000      	movhi	r0, #0
 800281e:	f85d fb08 	ldr.w	pc, [sp], #8
 8002822:	bf00      	nop

08002824 <__aeabi_dcmpge>:
 8002824:	f84d ed08 	str.w	lr, [sp, #-8]!
 8002828:	f7ff ffce 	bl	80027c8 <__aeabi_cdrcmple>
 800282c:	bf94      	ite	ls
 800282e:	2001      	movls	r0, #1
 8002830:	2000      	movhi	r0, #0
 8002832:	f85d fb08 	ldr.w	pc, [sp], #8
 8002836:	bf00      	nop

08002838 <__aeabi_dcmpgt>:
 8002838:	f84d ed08 	str.w	lr, [sp, #-8]!
 800283c:	f7ff ffc4 	bl	80027c8 <__aeabi_cdrcmple>
 8002840:	bf34      	ite	cc
 8002842:	2001      	movcc	r0, #1
 8002844:	2000      	movcs	r0, #0
 8002846:	f85d fb08 	ldr.w	pc, [sp], #8
 800284a:	bf00      	nop

0800284c <__aeabi_d2uiz>:
 800284c:	004a      	lsls	r2, r1, #1
 800284e:	d211      	bcs.n	8002874 <__aeabi_d2uiz+0x28>
 8002850:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8002854:	d211      	bcs.n	800287a <__aeabi_d2uiz+0x2e>
 8002856:	d50d      	bpl.n	8002874 <__aeabi_d2uiz+0x28>
 8002858:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800285c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8002860:	d40e      	bmi.n	8002880 <__aeabi_d2uiz+0x34>
 8002862:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8002866:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800286a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800286e:	fa23 f002 	lsr.w	r0, r3, r2
 8002872:	4770      	bx	lr
 8002874:	f04f 0000 	mov.w	r0, #0
 8002878:	4770      	bx	lr
 800287a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800287e:	d102      	bne.n	8002886 <__aeabi_d2uiz+0x3a>
 8002880:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002884:	4770      	bx	lr
 8002886:	f04f 0000 	mov.w	r0, #0
 800288a:	4770      	bx	lr

0800288c <get_sts_mnth>:
uint16_t get_sts_mnth (uint16_t cipher, uint8_t threshold, uint8_t shift_val)
{
    uint32_t  value;
    uint16_t  mod_val;

    value = cipher* (uint32_t)threshold;
 800288c:	fb01 f000 	mul.w	r0, r1, r0
    if (shift_val == 3)
 8002890:	2a03      	cmp	r2, #3
 8002892:	d00a      	beq.n	80028aa <get_sts_mnth+0x1e>
    {
        value *= SQRT_FACTOR;//Factor to sqrt(2)
        value >>= SQRT_SHIFT_VAL;
    }

    mod_val = value % MOD_VALUE+ HALF_MOD;
 8002894:	f3c0 030a 	ubfx	r3, r0, #0, #11
 8002898:	f503 6380 	add.w	r3, r3, #1024	; 0x400
    value >>= SHIFT_VALUE;
 800289c:	0ac0      	lsrs	r0, r0, #11
    /* Check if modulo greater than MOD_VALUE, if yes add 1 */
    if (mod_val >= MOD_VALUE)
 800289e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80028a2:	d300      	bcc.n	80028a6 <get_sts_mnth+0x1a>
        value += 1;
 80028a4:	3001      	adds	r0, #1

    return (uint16_t)value;
}
 80028a6:	b280      	uxth	r0, r0
 80028a8:	4770      	bx	lr
        value *= SQRT_FACTOR;//Factor to sqrt(2)
 80028aa:	21b5      	movs	r1, #181	; 0xb5
 80028ac:	fb01 f000 	mul.w	r0, r1, r0
        value >>= SQRT_SHIFT_VAL;
 80028b0:	09c0      	lsrs	r0, r0, #7
 80028b2:	e7ef      	b.n	8002894 <get_sts_mnth+0x8>

080028b4 <dwt_generatecrc8>:
{
 80028b4:	b500      	push	{lr}
 80028b6:	4686      	mov	lr, r0
 80028b8:	4610      	mov	r0, r2
    for (byte = 0; byte < len; ++byte)
 80028ba:	2300      	movs	r3, #0
 80028bc:	e007      	b.n	80028ce <dwt_generatecrc8+0x1a>
        data = byteArray[byte] ^ crcRemainderInit;
 80028be:	f81e c003 	ldrb.w	ip, [lr, r3]
 80028c2:	ea8c 0c00 	eor.w	ip, ip, r0
        crcRemainderInit = crcTable[data];// ^ (crcRemainderInit << 8);
 80028c6:	4a04      	ldr	r2, [pc, #16]	; (80028d8 <dwt_generatecrc8+0x24>)
 80028c8:	f812 000c 	ldrb.w	r0, [r2, ip]
    for (byte = 0; byte < len; ++byte)
 80028cc:	3301      	adds	r3, #1
 80028ce:	428b      	cmp	r3, r1
 80028d0:	dbf5      	blt.n	80028be <dwt_generatecrc8+0xa>
}
 80028d2:	f85d fb04 	ldr.w	pc, [sp], #4
 80028d6:	bf00      	nop
 80028d8:	20000170 	.word	0x20000170

080028dc <dwt_xfer3000>:
{
 80028dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028de:	b085      	sub	sp, #20
 80028e0:	4606      	mov	r6, r0
 80028e2:	4614      	mov	r4, r2
 80028e4:	461d      	mov	r5, r3
 80028e6:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
    uint16_t reg_file     = 0x1F & ((regFileID + indx) >> 16);
 80028ea:	1808      	adds	r0, r1, r0
 80028ec:	f3c0 4004 	ubfx	r0, r0, #16, #5
    uint16_t reg_offset   = 0x7F &  (regFileID + indx);
 80028f0:	198b      	adds	r3, r1, r6
    assert(length       < 0x3100);
 80028f2:	f5b4 5f44 	cmp.w	r4, #12544	; 0x3100
 80028f6:	d246      	bcs.n	8002986 <dwt_xfer3000+0xaa>
 80028f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    assert(mode == DW3000_SPI_WR_BIT ||\
 80028fc:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8002900:	d00c      	beq.n	800291c <dwt_xfer3000+0x40>
 8002902:	b15a      	cbz	r2, 800291c <dwt_xfer3000+0x40>
 8002904:	f248 0101 	movw	r1, #32769	; 0x8001
 8002908:	428a      	cmp	r2, r1
 800290a:	d007      	beq.n	800291c <dwt_xfer3000+0x40>
 800290c:	f248 0102 	movw	r1, #32770	; 0x8002
 8002910:	428a      	cmp	r2, r1
 8002912:	d003      	beq.n	800291c <dwt_xfer3000+0x40>
 8002914:	f248 0103 	movw	r1, #32771	; 0x8003
 8002918:	428a      	cmp	r2, r1
 800291a:	d13a      	bne.n	8002992 <dwt_xfer3000+0xb6>
    addr = (reg_file << 9) | (reg_offset << 2);
 800291c:	0099      	lsls	r1, r3, #2
 800291e:	ea41 2c40 	orr.w	ip, r1, r0, lsl #9
 8002922:	4661      	mov	r1, ip
    header[0] = (uint8_t)((mode | addr) >> 8);//  & 0xFF; //bit7 + addr[4:0] + sub_addr[6:6]
 8002924:	4311      	orrs	r1, r2
 8002926:	0a09      	lsrs	r1, r1, #8
 8002928:	f88d 100c 	strb.w	r1, [sp, #12]
    header[1] = (uint8_t)(addr | (mode & 0x03));// & 0xFF; //EAM: subaddr[5:0]+ R/W/AND_OR
 800292c:	f002 0003 	and.w	r0, r2, #3
 8002930:	ea40 000c 	orr.w	r0, r0, ip
 8002934:	f88d 000d 	strb.w	r0, [sp, #13]
    if (/*reg_offset == 0 && */length == 0)
 8002938:	2c00      	cmp	r4, #0
 800293a:	d136      	bne.n	80029aa <dwt_xfer3000+0xce>
        assert(mode == DW3000_SPI_WR_BIT);
 800293c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8002940:	d12d      	bne.n	800299e <dwt_xfer3000+0xc2>
        header[0] = (uint8_t)((DW3000_SPI_WR_BIT>>8) | (regFileID<<1) | DW3000_SPI_FAC);
 8002942:	0073      	lsls	r3, r6, #1
 8002944:	f063 037e 	orn	r3, r3, #126	; 0x7e
 8002948:	f88d 300c 	strb.w	r3, [sp, #12]
        cnt = 1;
 800294c:	2701      	movs	r7, #1
    switch (mode)
 800294e:	2a00      	cmp	r2, #0
 8002950:	d041      	beq.n	80029d6 <dwt_xfer3000+0xfa>
 8002952:	f482 4100 	eor.w	r1, r2, #32768	; 0x8000
 8002956:	2903      	cmp	r1, #3
 8002958:	d864      	bhi.n	8002a24 <dwt_xfer3000+0x148>
        if (pdw3000local->spicrc != DWT_SPI_CRC_MODE_NO)
 800295a:	4b33      	ldr	r3, [pc, #204]	; (8002a28 <dwt_xfer3000+0x14c>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	7d1b      	ldrb	r3, [r3, #20]
 8002960:	b393      	cbz	r3, 80029c8 <dwt_xfer3000+0xec>
            crc8 = dwt_generatecrc8(header, cnt, 0);
 8002962:	2200      	movs	r2, #0
 8002964:	4639      	mov	r1, r7
 8002966:	a803      	add	r0, sp, #12
 8002968:	f7ff ffa4 	bl	80028b4 <dwt_generatecrc8>
 800296c:	4602      	mov	r2, r0
            crc8 = dwt_generatecrc8(buffer, length, crc8);
 800296e:	4621      	mov	r1, r4
 8002970:	4628      	mov	r0, r5
 8002972:	f7ff ff9f 	bl	80028b4 <dwt_generatecrc8>
            writetospiwithcrc(cnt, header, length, buffer, crc8);
 8002976:	9000      	str	r0, [sp, #0]
 8002978:	462b      	mov	r3, r5
 800297a:	4622      	mov	r2, r4
 800297c:	a903      	add	r1, sp, #12
 800297e:	4638      	mov	r0, r7
 8002980:	f001 f8b8 	bl	8003af4 <writetospiwithcrc>
 8002984:	e032      	b.n	80029ec <dwt_xfer3000+0x110>
    assert(length       < 0x3100);
 8002986:	4b29      	ldr	r3, [pc, #164]	; (8002a2c <dwt_xfer3000+0x150>)
 8002988:	4a29      	ldr	r2, [pc, #164]	; (8002a30 <dwt_xfer3000+0x154>)
 800298a:	21c9      	movs	r1, #201	; 0xc9
 800298c:	4829      	ldr	r0, [pc, #164]	; (8002a34 <dwt_xfer3000+0x158>)
 800298e:	f7fd fc43 	bl	8000218 <__assert_func>
    assert(mode == DW3000_SPI_WR_BIT ||\
 8002992:	4b29      	ldr	r3, [pc, #164]	; (8002a38 <dwt_xfer3000+0x15c>)
 8002994:	4a26      	ldr	r2, [pc, #152]	; (8002a30 <dwt_xfer3000+0x154>)
 8002996:	21ca      	movs	r1, #202	; 0xca
 8002998:	4826      	ldr	r0, [pc, #152]	; (8002a34 <dwt_xfer3000+0x158>)
 800299a:	f7fd fc3d 	bl	8000218 <__assert_func>
        assert(mode == DW3000_SPI_WR_BIT);
 800299e:	4b27      	ldr	r3, [pc, #156]	; (8002a3c <dwt_xfer3000+0x160>)
 80029a0:	4a23      	ldr	r2, [pc, #140]	; (8002a30 <dwt_xfer3000+0x154>)
 80029a2:	21dc      	movs	r1, #220	; 0xdc
 80029a4:	4823      	ldr	r0, [pc, #140]	; (8002a34 <dwt_xfer3000+0x158>)
 80029a6:	f7fd fc37 	bl	8000218 <__assert_func>
    else if (reg_offset == 0 /*&& length > 0*/ && (mode == DW3000_SPI_WR_BIT || mode == DW3000_SPI_RD_BIT))
 80029aa:	b91b      	cbnz	r3, 80029b4 <dwt_xfer3000+0xd8>
 80029ac:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80029b0:	d006      	beq.n	80029c0 <dwt_xfer3000+0xe4>
 80029b2:	b13a      	cbz	r2, 80029c4 <dwt_xfer3000+0xe8>
        header[0] |= DW3000_SPI_EAMRW;
 80029b4:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 80029b8:	f88d 100c 	strb.w	r1, [sp, #12]
        cnt = 2;
 80029bc:	2702      	movs	r7, #2
 80029be:	e7c6      	b.n	800294e <dwt_xfer3000+0x72>
        cnt = 1;
 80029c0:	2701      	movs	r7, #1
 80029c2:	e7c4      	b.n	800294e <dwt_xfer3000+0x72>
 80029c4:	2701      	movs	r7, #1
 80029c6:	e7c2      	b.n	800294e <dwt_xfer3000+0x72>
            writetospi(cnt, header, length, buffer);
 80029c8:	462b      	mov	r3, r5
 80029ca:	4622      	mov	r2, r4
 80029cc:	a903      	add	r1, sp, #12
 80029ce:	4638      	mov	r0, r7
 80029d0:	f001 f8c6 	bl	8003b60 <writetospi>
 80029d4:	e00a      	b.n	80029ec <dwt_xfer3000+0x110>
            readfromspi(cnt, header, length, buffer);
 80029d6:	462b      	mov	r3, r5
 80029d8:	4622      	mov	r2, r4
 80029da:	a903      	add	r1, sp, #12
 80029dc:	4638      	mov	r0, r7
 80029de:	f001 f8f1 	bl	8003bc4 <readfromspi>
            if ((pdw3000local->spicrc == DWT_SPI_CRC_MODE_WRRD) && (regFileID != SPICRC_CFG_ID))
 80029e2:	4b11      	ldr	r3, [pc, #68]	; (8002a28 <dwt_xfer3000+0x14c>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	7d1b      	ldrb	r3, [r3, #20]
 80029e8:	2b02      	cmp	r3, #2
 80029ea:	d001      	beq.n	80029f0 <dwt_xfer3000+0x114>
} // end dwt_xfer3000()
 80029ec:	b005      	add	sp, #20
 80029ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if ((pdw3000local->spicrc == DWT_SPI_CRC_MODE_WRRD) && (regFileID != SPICRC_CFG_ID))
 80029f0:	2e18      	cmp	r6, #24
 80029f2:	d0fb      	beq.n	80029ec <dwt_xfer3000+0x110>
                crc8 = dwt_generatecrc8(header, cnt, 0);
 80029f4:	2200      	movs	r2, #0
 80029f6:	4639      	mov	r1, r7
 80029f8:	a803      	add	r0, sp, #12
 80029fa:	f7ff ff5b 	bl	80028b4 <dwt_generatecrc8>
 80029fe:	4602      	mov	r2, r0
                crc8 = dwt_generatecrc8(buffer, length, crc8);
 8002a00:	4621      	mov	r1, r4
 8002a02:	4628      	mov	r0, r5
 8002a04:	f7ff ff56 	bl	80028b4 <dwt_generatecrc8>
 8002a08:	4604      	mov	r4, r0
                dwcrc8 = dwt_read8bitoffsetreg(SPICRC_CFG_ID, 0);
 8002a0a:	2100      	movs	r1, #0
 8002a0c:	2018      	movs	r0, #24
 8002a0e:	f000 f8dc 	bl	8002bca <dwt_read8bitoffsetreg>
                if (crc8 != dwcrc8)
 8002a12:	4284      	cmp	r4, r0
 8002a14:	d0ea      	beq.n	80029ec <dwt_xfer3000+0x110>
                    if (pdw3000local->cbSPIRDErr != NULL)
 8002a16:	4b04      	ldr	r3, [pc, #16]	; (8002a28 <dwt_xfer3000+0x14c>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d0e5      	beq.n	80029ec <dwt_xfer3000+0x110>
                        pdw3000local->cbSPIRDErr();
 8002a20:	4798      	blx	r3
 8002a22:	e7e3      	b.n	80029ec <dwt_xfer3000+0x110>
        while(1);
 8002a24:	e7fe      	b.n	8002a24 <dwt_xfer3000+0x148>
 8002a26:	bf00      	nop
 8002a28:	2000008c 	.word	0x2000008c
 8002a2c:	080071fc 	.word	0x080071fc
 8002a30:	080072d8 	.word	0x080072d8
 8002a34:	0800720c 	.word	0x0800720c
 8002a38:	08007224 	.word	0x08007224
 8002a3c:	080072bc 	.word	0x080072bc

08002a40 <dwt_writetodevice>:
{
 8002a40:	b510      	push	{r4, lr}
 8002a42:	b082      	sub	sp, #8
    dwt_xfer3000(regFileID, index, length, buffer, DW3000_SPI_WR_BIT);
 8002a44:	f44f 4400 	mov.w	r4, #32768	; 0x8000
 8002a48:	9400      	str	r4, [sp, #0]
 8002a4a:	f7ff ff47 	bl	80028dc <dwt_xfer3000>
}
 8002a4e:	b002      	add	sp, #8
 8002a50:	bd10      	pop	{r4, pc}

08002a52 <dwt_write32bitoffsetreg>:
{
 8002a52:	b500      	push	{lr}
 8002a54:	b083      	sub	sp, #12
    for ( j = 0 ; j < 4 ; j++ )
 8002a56:	2300      	movs	r3, #0
 8002a58:	e006      	b.n	8002a68 <dwt_write32bitoffsetreg+0x16>
        buffer[j] = (uint8_t)regval;
 8002a5a:	f103 0c08 	add.w	ip, r3, #8
 8002a5e:	44ec      	add	ip, sp
 8002a60:	f80c 2c04 	strb.w	r2, [ip, #-4]
        regval >>= 8 ;
 8002a64:	0a12      	lsrs	r2, r2, #8
    for ( j = 0 ; j < 4 ; j++ )
 8002a66:	3301      	adds	r3, #1
 8002a68:	2b03      	cmp	r3, #3
 8002a6a:	ddf6      	ble.n	8002a5a <dwt_write32bitoffsetreg+0x8>
    dwt_writetodevice(regFileID,regOffset,4,buffer);
 8002a6c:	ab01      	add	r3, sp, #4
 8002a6e:	2204      	movs	r2, #4
 8002a70:	b289      	uxth	r1, r1
 8002a72:	f7ff ffe5 	bl	8002a40 <dwt_writetodevice>
} // end dwt_write32bitoffsetreg()
 8002a76:	b003      	add	sp, #12
 8002a78:	f85d fb04 	ldr.w	pc, [sp], #4

08002a7c <dwt_disable_rftx_blocks>:
 *
 * No return value
 */
static
void dwt_disable_rftx_blocks(void)
{
 8002a7c:	b508      	push	{r3, lr}
    dwt_write32bitoffsetreg(RF_CTRL_MASK_ID, 0, 0x00000000);
 8002a7e:	2200      	movs	r2, #0
 8002a80:	4611      	mov	r1, r2
 8002a82:	4802      	ldr	r0, [pc, #8]	; (8002a8c <dwt_disable_rftx_blocks+0x10>)
 8002a84:	f7ff ffe5 	bl	8002a52 <dwt_write32bitoffsetreg>
}
 8002a88:	bd08      	pop	{r3, pc}
 8002a8a:	bf00      	nop
 8002a8c:	00070004 	.word	0x00070004

08002a90 <dwt_disable_rf_tx>:
{
 8002a90:	b510      	push	{r4, lr}
 8002a92:	4604      	mov	r4, r0
    dwt_write32bitoffsetreg(LDO_CTRL_ID, 0, 0x00000000);
 8002a94:	2200      	movs	r2, #0
 8002a96:	4611      	mov	r1, r2
 8002a98:	4808      	ldr	r0, [pc, #32]	; (8002abc <dwt_disable_rf_tx+0x2c>)
 8002a9a:	f7ff ffda 	bl	8002a52 <dwt_write32bitoffsetreg>
    dwt_write32bitoffsetreg(RF_ENABLE_ID, 0, 0x00000000);
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	4611      	mov	r1, r2
 8002aa2:	f44f 20e0 	mov.w	r0, #458752	; 0x70000
 8002aa6:	f7ff ffd4 	bl	8002a52 <dwt_write32bitoffsetreg>
    if (switch_config)
 8002aaa:	b904      	cbnz	r4, 8002aae <dwt_disable_rf_tx+0x1e>
}
 8002aac:	bd10      	pop	{r4, pc}
        dwt_write32bitoffsetreg(RF_SWITCH_CTRL_ID, 0x0, TXRXSWITCH_AUTO);
 8002aae:	f04f 52e0 	mov.w	r2, #469762048	; 0x1c000000
 8002ab2:	2100      	movs	r1, #0
 8002ab4:	4802      	ldr	r0, [pc, #8]	; (8002ac0 <dwt_disable_rf_tx+0x30>)
 8002ab6:	f7ff ffcc 	bl	8002a52 <dwt_write32bitoffsetreg>
}
 8002aba:	e7f7      	b.n	8002aac <dwt_disable_rf_tx+0x1c>
 8002abc:	00070048 	.word	0x00070048
 8002ac0:	00070014 	.word	0x00070014

08002ac4 <dwt_write16bitoffsetreg>:
{
 8002ac4:	b500      	push	{lr}
 8002ac6:	b083      	sub	sp, #12
    buffer[0] = (uint8_t)regval;
 8002ac8:	f88d 2004 	strb.w	r2, [sp, #4]
    buffer[1] = regval >> 8 ;
 8002acc:	0a12      	lsrs	r2, r2, #8
 8002ace:	f88d 2005 	strb.w	r2, [sp, #5]
    dwt_writetodevice(regFileID,regOffset,2,buffer);
 8002ad2:	ab01      	add	r3, sp, #4
 8002ad4:	2202      	movs	r2, #2
 8002ad6:	b289      	uxth	r1, r1
 8002ad8:	f7ff ffb2 	bl	8002a40 <dwt_writetodevice>
} // end dwt_write16bitoffsetreg()
 8002adc:	b003      	add	sp, #12
 8002ade:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08002ae4 <dwt_force_clocks>:
{
 8002ae4:	b510      	push	{r4, lr}
 8002ae6:	4604      	mov	r4, r0
    if (clocks == FORCE_CLK_SYS_TX)
 8002ae8:	2801      	cmp	r0, #1
 8002aea:	d002      	beq.n	8002af2 <dwt_force_clocks+0xe>
    if (clocks == FORCE_CLK_AUTO)
 8002aec:	2c05      	cmp	r4, #5
 8002aee:	d007      	beq.n	8002b00 <dwt_force_clocks+0x1c>
} // end dwt_force_clocks()
 8002af0:	bd10      	pop	{r4, pc}
        dwt_write16bitoffsetreg(CLK_CTRL_ID, 0x0, regvalue0);
 8002af2:	f641 0222 	movw	r2, #6178	; 0x1822
 8002af6:	2100      	movs	r1, #0
 8002af8:	4805      	ldr	r0, [pc, #20]	; (8002b10 <dwt_force_clocks+0x2c>)
 8002afa:	f7ff ffe3 	bl	8002ac4 <dwt_write16bitoffsetreg>
 8002afe:	e7f5      	b.n	8002aec <dwt_force_clocks+0x8>
        dwt_write16bitoffsetreg(CLK_CTRL_ID, 0x0, (uint16_t) DWT_AUTO_CLKS);  //we only need to restore the low 16 bits as they are the only ones to change as a result of  FORCE_CLK_SYS_TX
 8002b00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b04:	2100      	movs	r1, #0
 8002b06:	4802      	ldr	r0, [pc, #8]	; (8002b10 <dwt_force_clocks+0x2c>)
 8002b08:	f7ff ffdc 	bl	8002ac4 <dwt_write16bitoffsetreg>
} // end dwt_force_clocks()
 8002b0c:	e7f0      	b.n	8002af0 <dwt_force_clocks+0xc>
 8002b0e:	bf00      	nop
 8002b10:	00110004 	.word	0x00110004

08002b14 <dwt_write8bitoffsetreg>:
{
 8002b14:	b500      	push	{lr}
 8002b16:	b083      	sub	sp, #12
 8002b18:	f88d 2007 	strb.w	r2, [sp, #7]
    dwt_writetodevice(regFileID, regOffset, 1, &regval);
 8002b1c:	f10d 0307 	add.w	r3, sp, #7
 8002b20:	2201      	movs	r2, #1
 8002b22:	b289      	uxth	r1, r1
 8002b24:	f7ff ff8c 	bl	8002a40 <dwt_writetodevice>
}
 8002b28:	b003      	add	sp, #12
 8002b2a:	f85d fb04 	ldr.w	pc, [sp], #4

08002b2e <dwt_readfromdevice>:
{
 8002b2e:	b510      	push	{r4, lr}
 8002b30:	b082      	sub	sp, #8
    dwt_xfer3000(regFileID, index, length, buffer, DW3000_SPI_RD_BIT);
 8002b32:	2400      	movs	r4, #0
 8002b34:	9400      	str	r4, [sp, #0]
 8002b36:	f7ff fed1 	bl	80028dc <dwt_xfer3000>
}
 8002b3a:	b002      	add	sp, #8
 8002b3c:	bd10      	pop	{r4, pc}

08002b3e <dwt_read32bitoffsetreg>:
{
 8002b3e:	b500      	push	{lr}
 8002b40:	b083      	sub	sp, #12
    dwt_readfromdevice(regFileID,regOffset,4,buffer); // Read 4 bytes (32-bits) register into buffer
 8002b42:	ab01      	add	r3, sp, #4
 8002b44:	2204      	movs	r2, #4
 8002b46:	b289      	uxth	r1, r1
 8002b48:	f7ff fff1 	bl	8002b2e <dwt_readfromdevice>
    uint32_t  regval = 0 ;
 8002b4c:	2000      	movs	r0, #0
    for (j = 3 ; j >= 0 ; j --)
 8002b4e:	2303      	movs	r3, #3
 8002b50:	e007      	b.n	8002b62 <dwt_read32bitoffsetreg+0x24>
        regval = (regval << 8) + buffer[j] ;
 8002b52:	f103 0208 	add.w	r2, r3, #8
 8002b56:	446a      	add	r2, sp
 8002b58:	f812 2c04 	ldrb.w	r2, [r2, #-4]
 8002b5c:	eb02 2000 	add.w	r0, r2, r0, lsl #8
    for (j = 3 ; j >= 0 ; j --)
 8002b60:	3b01      	subs	r3, #1
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	daf5      	bge.n	8002b52 <dwt_read32bitoffsetreg+0x14>
} // end dwt_read32bitoffsetreg()
 8002b66:	b003      	add	sp, #12
 8002b68:	f85d fb04 	ldr.w	pc, [sp], #4

08002b6c <_dwt_otpread>:
{
 8002b6c:	b538      	push	{r3, r4, r5, lr}
 8002b6e:	4604      	mov	r4, r0
    dwt_write16bitoffsetreg(OTP_CFG_ID, 0, 0x0001);
 8002b70:	4d0a      	ldr	r5, [pc, #40]	; (8002b9c <_dwt_otpread+0x30>)
 8002b72:	2201      	movs	r2, #1
 8002b74:	2100      	movs	r1, #0
 8002b76:	4628      	mov	r0, r5
 8002b78:	f7ff ffa4 	bl	8002ac4 <dwt_write16bitoffsetreg>
    dwt_write16bitoffsetreg(OTP_ADDR_ID, 0, address);
 8002b7c:	4622      	mov	r2, r4
 8002b7e:	2100      	movs	r1, #0
 8002b80:	4807      	ldr	r0, [pc, #28]	; (8002ba0 <_dwt_otpread+0x34>)
 8002b82:	f7ff ff9f 	bl	8002ac4 <dwt_write16bitoffsetreg>
    dwt_write16bitoffsetreg(OTP_CFG_ID, 0, 0x0002);
 8002b86:	2202      	movs	r2, #2
 8002b88:	2100      	movs	r1, #0
 8002b8a:	4628      	mov	r0, r5
 8002b8c:	f7ff ff9a 	bl	8002ac4 <dwt_write16bitoffsetreg>
    ret_data = dwt_read32bitoffsetreg(OTP_RDATA_ID, 0);
 8002b90:	2100      	movs	r1, #0
 8002b92:	4804      	ldr	r0, [pc, #16]	; (8002ba4 <_dwt_otpread+0x38>)
 8002b94:	f7ff ffd3 	bl	8002b3e <dwt_read32bitoffsetreg>
}
 8002b98:	bd38      	pop	{r3, r4, r5, pc}
 8002b9a:	bf00      	nop
 8002b9c:	000b0008 	.word	0x000b0008
 8002ba0:	000b0004 	.word	0x000b0004
 8002ba4:	000b0010 	.word	0x000b0010

08002ba8 <dwt_read16bitoffsetreg>:
{
 8002ba8:	b500      	push	{lr}
 8002baa:	b083      	sub	sp, #12
    dwt_readfromdevice(regFileID,regOffset,2,buffer); // Read 2 bytes (16-bits) register into buffer
 8002bac:	ab01      	add	r3, sp, #4
 8002bae:	2202      	movs	r2, #2
 8002bb0:	b289      	uxth	r1, r1
 8002bb2:	f7ff ffbc 	bl	8002b2e <dwt_readfromdevice>
    regval = ((uint16_t)buffer[1] << 8) + buffer[0] ;
 8002bb6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8002bba:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8002bbe:	eb00 2003 	add.w	r0, r0, r3, lsl #8
} // end dwt_read16bitoffsetreg()
 8002bc2:	b280      	uxth	r0, r0
 8002bc4:	b003      	add	sp, #12
 8002bc6:	f85d fb04 	ldr.w	pc, [sp], #4

08002bca <dwt_read8bitoffsetreg>:
{
 8002bca:	b500      	push	{lr}
 8002bcc:	b083      	sub	sp, #12
    dwt_readfromdevice(regFileID, regOffset, 1, &regval);
 8002bce:	f10d 0307 	add.w	r3, sp, #7
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	b289      	uxth	r1, r1
 8002bd6:	f7ff ffaa 	bl	8002b2e <dwt_readfromdevice>
}
 8002bda:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8002bde:	b003      	add	sp, #12
 8002be0:	f85d fb04 	ldr.w	pc, [sp], #4

08002be4 <dwt_modify32bitoffsetreg>:
{
 8002be4:	b500      	push	{lr}
 8002be6:	b085      	sub	sp, #20
    buf[0] = (uint8_t)_and;//       &0xFF;
 8002be8:	f88d 2008 	strb.w	r2, [sp, #8]
    buf[1] = (uint8_t)(_and>>8);//  &0xFF;
 8002bec:	f3c2 2c07 	ubfx	ip, r2, #8, #8
 8002bf0:	f88d c009 	strb.w	ip, [sp, #9]
    buf[2] = (uint8_t)(_and>>16);// &0xFF;
 8002bf4:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8002bf8:	f88d c00a 	strb.w	ip, [sp, #10]
    buf[3] = (uint8_t)(_and>>24);// &0xFF;
 8002bfc:	0e12      	lsrs	r2, r2, #24
 8002bfe:	f88d 200b 	strb.w	r2, [sp, #11]
    buf[4] = (uint8_t)_or;//        &0xFF;
 8002c02:	f88d 300c 	strb.w	r3, [sp, #12]
    buf[5] = (uint8_t)(_or>>8);//   &0xFF;
 8002c06:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8002c0a:	f88d 200d 	strb.w	r2, [sp, #13]
    buf[6] = (uint8_t)(_or>>16);//  &0xFF;
 8002c0e:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8002c12:	f88d 200e 	strb.w	r2, [sp, #14]
    buf[7] = (uint8_t)(_or>>24);//  &0xFF;
 8002c16:	0e1b      	lsrs	r3, r3, #24
 8002c18:	f88d 300f 	strb.w	r3, [sp, #15]
    dwt_xfer3000(regFileID, regOffset, sizeof(buf), buf, DW3000_SPI_AND_OR_32);
 8002c1c:	f248 0303 	movw	r3, #32771	; 0x8003
 8002c20:	9300      	str	r3, [sp, #0]
 8002c22:	ab02      	add	r3, sp, #8
 8002c24:	2208      	movs	r2, #8
 8002c26:	b289      	uxth	r1, r1
 8002c28:	f7ff fe58 	bl	80028dc <dwt_xfer3000>
}
 8002c2c:	b005      	add	sp, #20
 8002c2e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08002c34 <_dwt_kick_dgc_on_wakeup>:
{
 8002c34:	b508      	push	{r3, lr}
    if (channel == 5)
 8002c36:	2805      	cmp	r0, #5
 8002c38:	d002      	beq.n	8002c40 <_dwt_kick_dgc_on_wakeup+0xc>
    else if (channel == 9)
 8002c3a:	2809      	cmp	r0, #9
 8002c3c:	d008      	beq.n	8002c50 <_dwt_kick_dgc_on_wakeup+0x1c>
}
 8002c3e:	bd08      	pop	{r3, pc}
        dwt_modify32bitoffsetreg(OTP_CFG_ID, 0, ~(OTP_CFG_DGC_SEL_BIT_MASK),
 8002c40:	2340      	movs	r3, #64	; 0x40
 8002c42:	f46f 5200 	mvn.w	r2, #8192	; 0x2000
 8002c46:	2100      	movs	r1, #0
 8002c48:	4806      	ldr	r0, [pc, #24]	; (8002c64 <_dwt_kick_dgc_on_wakeup+0x30>)
 8002c4a:	f7ff ffcb 	bl	8002be4 <dwt_modify32bitoffsetreg>
 8002c4e:	e7f6      	b.n	8002c3e <_dwt_kick_dgc_on_wakeup+0xa>
        dwt_modify32bitoffsetreg(OTP_CFG_ID, 0, ~(OTP_CFG_DGC_SEL_BIT_MASK),
 8002c50:	f44f 5301 	mov.w	r3, #8256	; 0x2040
 8002c54:	f46f 5200 	mvn.w	r2, #8192	; 0x2000
 8002c58:	2100      	movs	r1, #0
 8002c5a:	4802      	ldr	r0, [pc, #8]	; (8002c64 <_dwt_kick_dgc_on_wakeup+0x30>)
 8002c5c:	f7ff ffc2 	bl	8002be4 <dwt_modify32bitoffsetreg>
}
 8002c60:	e7ed      	b.n	8002c3e <_dwt_kick_dgc_on_wakeup+0xa>
 8002c62:	bf00      	nop
 8002c64:	000b0008 	.word	0x000b0008

08002c68 <dwt_enable_rf_tx>:
{
 8002c68:	b570      	push	{r4, r5, r6, lr}
 8002c6a:	4605      	mov	r5, r0
 8002c6c:	460c      	mov	r4, r1
    dwt_or32bitoffsetreg(LDO_CTRL_ID, 0, (LDO_CTRL_LDO_VDDHVTX_VREF_BIT_MASK |
 8002c6e:	4e16      	ldr	r6, [pc, #88]	; (8002cc8 <dwt_enable_rf_tx+0x60>)
 8002c70:	f04f 2308 	mov.w	r3, #134219776	; 0x8000800
 8002c74:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002c78:	2100      	movs	r1, #0
 8002c7a:	4630      	mov	r0, r6
 8002c7c:	f7ff ffb2 	bl	8002be4 <dwt_modify32bitoffsetreg>
    dwt_or32bitoffsetreg(LDO_CTRL_ID, 0, (LDO_CTRL_LDO_VDDTX2_VREF_BIT_MASK |
 8002c80:	f04f 1360 	mov.w	r3, #6291552	; 0x600060
 8002c84:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002c88:	2100      	movs	r1, #0
 8002c8a:	4630      	mov	r0, r6
 8002c8c:	f7ff ffaa 	bl	8002be4 <dwt_modify32bitoffsetreg>
    if (channel == SEL_CHANNEL5)
 8002c90:	2d05      	cmp	r5, #5
 8002c92:	d009      	beq.n	8002ca8 <dwt_enable_rf_tx+0x40>
        dwt_or32bitoffsetreg(RF_ENABLE_ID, 0, (RF_ENABLE_TX_SW_EN_BIT_MASK
 8002c94:	4b0d      	ldr	r3, [pc, #52]	; (8002ccc <dwt_enable_rf_tx+0x64>)
 8002c96:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002c9a:	2100      	movs	r1, #0
 8002c9c:	f44f 20e0 	mov.w	r0, #458752	; 0x70000
 8002ca0:	f7ff ffa0 	bl	8002be4 <dwt_modify32bitoffsetreg>
    if (switch_control)
 8002ca4:	b94c      	cbnz	r4, 8002cba <dwt_enable_rf_tx+0x52>
}
 8002ca6:	bd70      	pop	{r4, r5, r6, pc}
        dwt_or32bitoffsetreg(RF_ENABLE_ID, 0, (RF_ENABLE_TX_SW_EN_BIT_MASK
 8002ca8:	4b09      	ldr	r3, [pc, #36]	; (8002cd0 <dwt_enable_rf_tx+0x68>)
 8002caa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002cae:	2100      	movs	r1, #0
 8002cb0:	f44f 20e0 	mov.w	r0, #458752	; 0x70000
 8002cb4:	f7ff ff96 	bl	8002be4 <dwt_modify32bitoffsetreg>
 8002cb8:	e7f4      	b.n	8002ca4 <dwt_enable_rf_tx+0x3c>
        dwt_write32bitoffsetreg(RF_SWITCH_CTRL_ID, 0x0, TXRXSWITCH_TX);
 8002cba:	4a06      	ldr	r2, [pc, #24]	; (8002cd4 <dwt_enable_rf_tx+0x6c>)
 8002cbc:	2100      	movs	r1, #0
 8002cbe:	4806      	ldr	r0, [pc, #24]	; (8002cd8 <dwt_enable_rf_tx+0x70>)
 8002cc0:	f7ff fec7 	bl	8002a52 <dwt_write32bitoffsetreg>
}
 8002cc4:	e7ef      	b.n	8002ca6 <dwt_enable_rf_tx+0x3e>
 8002cc6:	bf00      	nop
 8002cc8:	00070048 	.word	0x00070048
 8002ccc:	02001c00 	.word	0x02001c00
 8002cd0:	02003c00 	.word	0x02003c00
 8002cd4:	01011100 	.word	0x01011100
 8002cd8:	00070014 	.word	0x00070014

08002cdc <dwt_enable_rftx_blocks>:
{
 8002cdc:	b508      	push	{r3, lr}
    if (channel == SEL_CHANNEL5)
 8002cde:	2805      	cmp	r0, #5
 8002ce0:	d002      	beq.n	8002ce8 <dwt_enable_rftx_blocks+0xc>
    else if (channel == SEL_CHANNEL9)
 8002ce2:	2809      	cmp	r0, #9
 8002ce4:	d008      	beq.n	8002cf8 <dwt_enable_rftx_blocks+0x1c>
}
 8002ce6:	bd08      	pop	{r3, pc}
        dwt_or32bitoffsetreg(RF_CTRL_MASK_ID, 0, (RF_ENABLE_TX_SW_EN_BIT_MASK
 8002ce8:	4b07      	ldr	r3, [pc, #28]	; (8002d08 <dwt_enable_rftx_blocks+0x2c>)
 8002cea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002cee:	2100      	movs	r1, #0
 8002cf0:	4806      	ldr	r0, [pc, #24]	; (8002d0c <dwt_enable_rftx_blocks+0x30>)
 8002cf2:	f7ff ff77 	bl	8002be4 <dwt_modify32bitoffsetreg>
 8002cf6:	e7f6      	b.n	8002ce6 <dwt_enable_rftx_blocks+0xa>
        dwt_or32bitoffsetreg(RF_CTRL_MASK_ID, 0, (RF_ENABLE_TX_SW_EN_BIT_MASK
 8002cf8:	4b05      	ldr	r3, [pc, #20]	; (8002d10 <dwt_enable_rftx_blocks+0x34>)
 8002cfa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002cfe:	2100      	movs	r1, #0
 8002d00:	4802      	ldr	r0, [pc, #8]	; (8002d0c <dwt_enable_rftx_blocks+0x30>)
 8002d02:	f7ff ff6f 	bl	8002be4 <dwt_modify32bitoffsetreg>
}
 8002d06:	e7ee      	b.n	8002ce6 <dwt_enable_rftx_blocks+0xa>
 8002d08:	02003c00 	.word	0x02003c00
 8002d0c:	00070004 	.word	0x00070004
 8002d10:	02001c00 	.word	0x02001c00

08002d14 <dwt_modify16bitoffsetreg>:
{
 8002d14:	b500      	push	{lr}
 8002d16:	b085      	sub	sp, #20
    buf[0] = (uint8_t)_and;//       &0xFF;
 8002d18:	f88d 200c 	strb.w	r2, [sp, #12]
    buf[1] = (uint8_t)(_and>>8);//  &0xFF;
 8002d1c:	0a12      	lsrs	r2, r2, #8
 8002d1e:	f88d 200d 	strb.w	r2, [sp, #13]
    buf[2] = (uint8_t)_or;//        &0xFF;
 8002d22:	f88d 300e 	strb.w	r3, [sp, #14]
    buf[3] = (uint8_t)(_or>>8);//   &0xFF;
 8002d26:	0a1b      	lsrs	r3, r3, #8
 8002d28:	f88d 300f 	strb.w	r3, [sp, #15]
    dwt_xfer3000(regFileID, regOffset, sizeof(buf), buf, DW3000_SPI_AND_OR_16);
 8002d2c:	f248 0302 	movw	r3, #32770	; 0x8002
 8002d30:	9300      	str	r3, [sp, #0]
 8002d32:	ab03      	add	r3, sp, #12
 8002d34:	2204      	movs	r2, #4
 8002d36:	b289      	uxth	r1, r1
 8002d38:	f7ff fdd0 	bl	80028dc <dwt_xfer3000>
}
 8002d3c:	b005      	add	sp, #20
 8002d3e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08002d44 <_dwt_prog_ldo_and_bias_tune>:
{
 8002d44:	b508      	push	{r3, lr}
    dwt_or16bitoffsetreg(OTP_CFG_ID, 0, LDO_BIAS_KICK);
 8002d46:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002d4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002d4e:	2100      	movs	r1, #0
 8002d50:	4806      	ldr	r0, [pc, #24]	; (8002d6c <_dwt_prog_ldo_and_bias_tune+0x28>)
 8002d52:	f7ff ffdf 	bl	8002d14 <dwt_modify16bitoffsetreg>
    dwt_and_or16bitoffsetreg(BIAS_CTRL_ID, 0, (uint16_t)~BIAS_CTRL_BIAS_MASK, pdw3000local->bias_tune);
 8002d56:	4b06      	ldr	r3, [pc, #24]	; (8002d70 <_dwt_prog_ldo_and_bias_tune+0x2c>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	7a1b      	ldrb	r3, [r3, #8]
 8002d5c:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8002d60:	2100      	movs	r1, #0
 8002d62:	4804      	ldr	r0, [pc, #16]	; (8002d74 <_dwt_prog_ldo_and_bias_tune+0x30>)
 8002d64:	f7ff ffd6 	bl	8002d14 <dwt_modify16bitoffsetreg>
}
 8002d68:	bd08      	pop	{r3, pc}
 8002d6a:	bf00      	nop
 8002d6c:	000b0008 	.word	0x000b0008
 8002d70:	2000008c 	.word	0x2000008c
 8002d74:	0011001f 	.word	0x0011001f

08002d78 <dwt_modify8bitoffsetreg>:
{
 8002d78:	b500      	push	{lr}
 8002d7a:	b085      	sub	sp, #20
    buf[0] = _and;
 8002d7c:	f88d 200c 	strb.w	r2, [sp, #12]
    buf[1] = _or;
 8002d80:	f88d 300d 	strb.w	r3, [sp, #13]
    dwt_xfer3000(regFileID, regOffset, sizeof(buf),buf, DW3000_SPI_AND_OR_8);
 8002d84:	f248 0301 	movw	r3, #32769	; 0x8001
 8002d88:	9300      	str	r3, [sp, #0]
 8002d8a:	ab03      	add	r3, sp, #12
 8002d8c:	2202      	movs	r2, #2
 8002d8e:	b289      	uxth	r1, r1
 8002d90:	f7ff fda4 	bl	80028dc <dwt_xfer3000>
}
 8002d94:	b005      	add	sp, #20
 8002d96:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08002d9c <dwt_setdwstate>:
{
 8002d9c:	b510      	push	{r4, lr}
    if (state == DWT_DW_IDLE) // Set the auto INIT2IDLE bit so that DW3000 enters IDLE mode before switching clocks to system_PLL
 8002d9e:	2801      	cmp	r0, #1
 8002da0:	d017      	beq.n	8002dd2 <dwt_setdwstate+0x36>
    else if(state == DWT_DW_IDLE_RC)  //Change state to IDLE_RC and clear auto INIT2IDLE bit
 8002da2:	2802      	cmp	r0, #2
 8002da4:	d01f      	beq.n	8002de6 <dwt_setdwstate+0x4a>
        dwt_or8bitoffsetreg(CLK_CTRL_ID, 0, FORCE_SYSCLK_FOSCDIV4);
 8002da6:	2301      	movs	r3, #1
 8002da8:	22ff      	movs	r2, #255	; 0xff
 8002daa:	2100      	movs	r1, #0
 8002dac:	481a      	ldr	r0, [pc, #104]	; (8002e18 <dwt_setdwstate+0x7c>)
 8002dae:	f7ff ffe3 	bl	8002d78 <dwt_modify8bitoffsetreg>
        dwt_modify32bitoffsetreg(SEQ_CTRL_ID, 0x0, (uint32_t) ~SEQ_CTRL_AINIT2IDLE_BIT_MASK, SEQ_CTRL_FORCE2INIT_BIT_MASK);
 8002db2:	4c1a      	ldr	r4, [pc, #104]	; (8002e1c <dwt_setdwstate+0x80>)
 8002db4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8002db8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002dbc:	2100      	movs	r1, #0
 8002dbe:	4620      	mov	r0, r4
 8002dc0:	f7ff ff10 	bl	8002be4 <dwt_modify32bitoffsetreg>
        dwt_and8bitoffsetreg(SEQ_CTRL_ID, 0x2, (uint8_t) ~(SEQ_CTRL_FORCE2INIT_BIT_MASK>>16));
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	227f      	movs	r2, #127	; 0x7f
 8002dc8:	2102      	movs	r1, #2
 8002dca:	4620      	mov	r0, r4
 8002dcc:	f7ff ffd4 	bl	8002d78 <dwt_modify8bitoffsetreg>
}
 8002dd0:	bd10      	pop	{r4, pc}
        dwt_force_clocks(FORCE_CLK_AUTO);
 8002dd2:	2005      	movs	r0, #5
 8002dd4:	f7ff fe86 	bl	8002ae4 <dwt_force_clocks>
        dwt_or8bitoffsetreg(SEQ_CTRL_ID, 0x01, SEQ_CTRL_AINIT2IDLE_BIT_MASK>>8);
 8002dd8:	2301      	movs	r3, #1
 8002dda:	22ff      	movs	r2, #255	; 0xff
 8002ddc:	4619      	mov	r1, r3
 8002dde:	480f      	ldr	r0, [pc, #60]	; (8002e1c <dwt_setdwstate+0x80>)
 8002de0:	f7ff ffca 	bl	8002d78 <dwt_modify8bitoffsetreg>
 8002de4:	e7f4      	b.n	8002dd0 <dwt_setdwstate+0x34>
        dwt_or8bitoffsetreg(CLK_CTRL_ID, 0, FORCE_SYSCLK_FOSC);
 8002de6:	2303      	movs	r3, #3
 8002de8:	22ff      	movs	r2, #255	; 0xff
 8002dea:	2100      	movs	r1, #0
 8002dec:	480a      	ldr	r0, [pc, #40]	; (8002e18 <dwt_setdwstate+0x7c>)
 8002dee:	f7ff ffc3 	bl	8002d78 <dwt_modify8bitoffsetreg>
        dwt_modify32bitoffsetreg(SEQ_CTRL_ID, 0x0, (uint32_t) ~SEQ_CTRL_AINIT2IDLE_BIT_MASK, SEQ_CTRL_FORCE2INIT_BIT_MASK);
 8002df2:	4c0a      	ldr	r4, [pc, #40]	; (8002e1c <dwt_setdwstate+0x80>)
 8002df4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8002df8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002dfc:	2100      	movs	r1, #0
 8002dfe:	4620      	mov	r0, r4
 8002e00:	f7ff fef0 	bl	8002be4 <dwt_modify32bitoffsetreg>
        dwt_and8bitoffsetreg(SEQ_CTRL_ID, 0x2, (uint8_t) ~(SEQ_CTRL_FORCE2INIT_BIT_MASK>>16));
 8002e04:	2300      	movs	r3, #0
 8002e06:	227f      	movs	r2, #127	; 0x7f
 8002e08:	2102      	movs	r1, #2
 8002e0a:	4620      	mov	r0, r4
 8002e0c:	f7ff ffb4 	bl	8002d78 <dwt_modify8bitoffsetreg>
        dwt_force_clocks(FORCE_CLK_AUTO);
 8002e10:	2005      	movs	r0, #5
 8002e12:	f7ff fe67 	bl	8002ae4 <dwt_force_clocks>
 8002e16:	e7db      	b.n	8002dd0 <dwt_setdwstate+0x34>
 8002e18:	00110004 	.word	0x00110004
 8002e1c:	00110008 	.word	0x00110008

08002e20 <dwt_readdevid>:
{
 8002e20:	b508      	push	{r3, lr}
    return dwt_read32bitoffsetreg(DEV_ID_ID, 0);
 8002e22:	2100      	movs	r1, #0
 8002e24:	4608      	mov	r0, r1
 8002e26:	f7ff fe8a 	bl	8002b3e <dwt_read32bitoffsetreg>
}
 8002e2a:	bd08      	pop	{r3, pc}

08002e2c <dwt_configurestskey>:
{
 8002e2c:	b510      	push	{r4, lr}
 8002e2e:	4604      	mov	r4, r0
    dwt_write32bitreg(STS_KEY0_ID, pStsKey->key0);
 8002e30:	6802      	ldr	r2, [r0, #0]
 8002e32:	2100      	movs	r1, #0
 8002e34:	4809      	ldr	r0, [pc, #36]	; (8002e5c <dwt_configurestskey+0x30>)
 8002e36:	f7ff fe0c 	bl	8002a52 <dwt_write32bitoffsetreg>
    dwt_write32bitreg(STS_KEY1_ID, pStsKey->key1);
 8002e3a:	6862      	ldr	r2, [r4, #4]
 8002e3c:	2100      	movs	r1, #0
 8002e3e:	4808      	ldr	r0, [pc, #32]	; (8002e60 <dwt_configurestskey+0x34>)
 8002e40:	f7ff fe07 	bl	8002a52 <dwt_write32bitoffsetreg>
    dwt_write32bitreg(STS_KEY2_ID, pStsKey->key2);
 8002e44:	68a2      	ldr	r2, [r4, #8]
 8002e46:	2100      	movs	r1, #0
 8002e48:	4806      	ldr	r0, [pc, #24]	; (8002e64 <dwt_configurestskey+0x38>)
 8002e4a:	f7ff fe02 	bl	8002a52 <dwt_write32bitoffsetreg>
    dwt_write32bitreg(STS_KEY3_ID, pStsKey->key3);
 8002e4e:	68e2      	ldr	r2, [r4, #12]
 8002e50:	2100      	movs	r1, #0
 8002e52:	4805      	ldr	r0, [pc, #20]	; (8002e68 <dwt_configurestskey+0x3c>)
 8002e54:	f7ff fdfd 	bl	8002a52 <dwt_write32bitoffsetreg>
}
 8002e58:	bd10      	pop	{r4, pc}
 8002e5a:	bf00      	nop
 8002e5c:	0002000c 	.word	0x0002000c
 8002e60:	00020010 	.word	0x00020010
 8002e64:	00020014 	.word	0x00020014
 8002e68:	00020018 	.word	0x00020018

08002e6c <dwt_configurestsiv>:
{
 8002e6c:	b510      	push	{r4, lr}
 8002e6e:	4604      	mov	r4, r0
    dwt_write32bitreg(STS_IV0_ID, pStsIv->iv0);
 8002e70:	6802      	ldr	r2, [r0, #0]
 8002e72:	2100      	movs	r1, #0
 8002e74:	4809      	ldr	r0, [pc, #36]	; (8002e9c <dwt_configurestsiv+0x30>)
 8002e76:	f7ff fdec 	bl	8002a52 <dwt_write32bitoffsetreg>
    dwt_write32bitreg(STS_IV1_ID, pStsIv->iv1);
 8002e7a:	6862      	ldr	r2, [r4, #4]
 8002e7c:	2100      	movs	r1, #0
 8002e7e:	4808      	ldr	r0, [pc, #32]	; (8002ea0 <dwt_configurestsiv+0x34>)
 8002e80:	f7ff fde7 	bl	8002a52 <dwt_write32bitoffsetreg>
    dwt_write32bitreg(STS_IV2_ID, pStsIv->iv2);
 8002e84:	68a2      	ldr	r2, [r4, #8]
 8002e86:	2100      	movs	r1, #0
 8002e88:	4806      	ldr	r0, [pc, #24]	; (8002ea4 <dwt_configurestsiv+0x38>)
 8002e8a:	f7ff fde2 	bl	8002a52 <dwt_write32bitoffsetreg>
    dwt_write32bitreg(STS_IV3_ID, pStsIv->iv3);
 8002e8e:	68e2      	ldr	r2, [r4, #12]
 8002e90:	2100      	movs	r1, #0
 8002e92:	4805      	ldr	r0, [pc, #20]	; (8002ea8 <dwt_configurestsiv+0x3c>)
 8002e94:	f7ff fddd 	bl	8002a52 <dwt_write32bitoffsetreg>
}
 8002e98:	bd10      	pop	{r4, pc}
 8002e9a:	bf00      	nop
 8002e9c:	0002001c 	.word	0x0002001c
 8002ea0:	00020020 	.word	0x00020020
 8002ea4:	00020024 	.word	0x00020024
 8002ea8:	00020028 	.word	0x00020028

08002eac <dwt_configurestsloadiv>:
{
 8002eac:	b508      	push	{r3, lr}
    dwt_or8bitoffsetreg(STS_CTRL_ID, 0, STS_CTRL_LOAD_IV_BIT_MASK);
 8002eae:	2301      	movs	r3, #1
 8002eb0:	22ff      	movs	r2, #255	; 0xff
 8002eb2:	2100      	movs	r1, #0
 8002eb4:	4801      	ldr	r0, [pc, #4]	; (8002ebc <dwt_configurestsloadiv+0x10>)
 8002eb6:	f7ff ff5f 	bl	8002d78 <dwt_modify8bitoffsetreg>
}
 8002eba:	bd08      	pop	{r3, pc}
 8002ebc:	00020004 	.word	0x00020004

08002ec0 <dwt_configmrxlut>:
{
 8002ec0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if (channel == 5)
 8002ec4:	2805      	cmp	r0, #5
 8002ec6:	d036      	beq.n	8002f36 <dwt_configmrxlut+0x76>
        lut6 = (uint32_t)CH9_DGC_LUT_6;
 8002ec8:	4c20      	ldr	r4, [pc, #128]	; (8002f4c <dwt_configmrxlut+0x8c>)
        lut5 = (uint32_t)CH9_DGC_LUT_5;
 8002eca:	4625      	mov	r5, r4
        lut4 = (uint32_t)CH9_DGC_LUT_4;
 8002ecc:	4e20      	ldr	r6, [pc, #128]	; (8002f50 <dwt_configmrxlut+0x90>)
        lut3 = (uint32_t)CH9_DGC_LUT_3;
 8002ece:	4f21      	ldr	r7, [pc, #132]	; (8002f54 <dwt_configmrxlut+0x94>)
        lut2 = (uint32_t)CH9_DGC_LUT_2;
 8002ed0:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 8002f9c <dwt_configmrxlut+0xdc>
        lut1 = (uint32_t)CH9_DGC_LUT_1;
 8002ed4:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 8002fa0 <dwt_configmrxlut+0xe0>
        lut0 = (uint32_t)CH9_DGC_LUT_0;
 8002ed8:	4a1f      	ldr	r2, [pc, #124]	; (8002f58 <dwt_configmrxlut+0x98>)
    dwt_write32bitoffsetreg(DGC_LUT_0_CFG_ID, 0x0, lut0);
 8002eda:	2100      	movs	r1, #0
 8002edc:	481f      	ldr	r0, [pc, #124]	; (8002f5c <dwt_configmrxlut+0x9c>)
 8002ede:	f7ff fdb8 	bl	8002a52 <dwt_write32bitoffsetreg>
    dwt_write32bitoffsetreg(DGC_LUT_1_CFG_ID, 0x0, lut1);
 8002ee2:	464a      	mov	r2, r9
 8002ee4:	2100      	movs	r1, #0
 8002ee6:	481e      	ldr	r0, [pc, #120]	; (8002f60 <dwt_configmrxlut+0xa0>)
 8002ee8:	f7ff fdb3 	bl	8002a52 <dwt_write32bitoffsetreg>
    dwt_write32bitoffsetreg(DGC_LUT_2_CFG_ID, 0x0, lut2);
 8002eec:	4642      	mov	r2, r8
 8002eee:	2100      	movs	r1, #0
 8002ef0:	481c      	ldr	r0, [pc, #112]	; (8002f64 <dwt_configmrxlut+0xa4>)
 8002ef2:	f7ff fdae 	bl	8002a52 <dwt_write32bitoffsetreg>
    dwt_write32bitoffsetreg(DGC_LUT_3_CFG_ID, 0x0, lut3);
 8002ef6:	463a      	mov	r2, r7
 8002ef8:	2100      	movs	r1, #0
 8002efa:	481b      	ldr	r0, [pc, #108]	; (8002f68 <dwt_configmrxlut+0xa8>)
 8002efc:	f7ff fda9 	bl	8002a52 <dwt_write32bitoffsetreg>
    dwt_write32bitoffsetreg(DGC_LUT_4_CFG_ID, 0x0, lut4);
 8002f00:	4632      	mov	r2, r6
 8002f02:	2100      	movs	r1, #0
 8002f04:	4819      	ldr	r0, [pc, #100]	; (8002f6c <dwt_configmrxlut+0xac>)
 8002f06:	f7ff fda4 	bl	8002a52 <dwt_write32bitoffsetreg>
    dwt_write32bitoffsetreg(DGC_LUT_5_CFG_ID, 0x0, lut5);
 8002f0a:	462a      	mov	r2, r5
 8002f0c:	2100      	movs	r1, #0
 8002f0e:	4818      	ldr	r0, [pc, #96]	; (8002f70 <dwt_configmrxlut+0xb0>)
 8002f10:	f7ff fd9f 	bl	8002a52 <dwt_write32bitoffsetreg>
    dwt_write32bitoffsetreg(DGC_LUT_6_CFG_ID, 0x0, lut6);
 8002f14:	4622      	mov	r2, r4
 8002f16:	2100      	movs	r1, #0
 8002f18:	4816      	ldr	r0, [pc, #88]	; (8002f74 <dwt_configmrxlut+0xb4>)
 8002f1a:	f7ff fd9a 	bl	8002a52 <dwt_write32bitoffsetreg>
    dwt_write32bitoffsetreg(DGC_CFG0_ID, 0x0, DWT_DGC_CFG0);
 8002f1e:	4a16      	ldr	r2, [pc, #88]	; (8002f78 <dwt_configmrxlut+0xb8>)
 8002f20:	2100      	movs	r1, #0
 8002f22:	4816      	ldr	r0, [pc, #88]	; (8002f7c <dwt_configmrxlut+0xbc>)
 8002f24:	f7ff fd95 	bl	8002a52 <dwt_write32bitoffsetreg>
    dwt_write32bitoffsetreg(DGC_CFG1_ID, 0x0, DWT_DGC_CFG1);
 8002f28:	4a15      	ldr	r2, [pc, #84]	; (8002f80 <dwt_configmrxlut+0xc0>)
 8002f2a:	2100      	movs	r1, #0
 8002f2c:	4815      	ldr	r0, [pc, #84]	; (8002f84 <dwt_configmrxlut+0xc4>)
 8002f2e:	f7ff fd90 	bl	8002a52 <dwt_write32bitoffsetreg>
}
 8002f32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        lut6 = (uint32_t)CH5_DGC_LUT_6;
 8002f36:	4c14      	ldr	r4, [pc, #80]	; (8002f88 <dwt_configmrxlut+0xc8>)
        lut5 = (uint32_t)CH5_DGC_LUT_5;
 8002f38:	4d14      	ldr	r5, [pc, #80]	; (8002f8c <dwt_configmrxlut+0xcc>)
        lut4 = (uint32_t)CH5_DGC_LUT_4;
 8002f3a:	4e15      	ldr	r6, [pc, #84]	; (8002f90 <dwt_configmrxlut+0xd0>)
        lut3 = (uint32_t)CH5_DGC_LUT_3;
 8002f3c:	4f15      	ldr	r7, [pc, #84]	; (8002f94 <dwt_configmrxlut+0xd4>)
        lut2 = (uint32_t)CH5_DGC_LUT_2;
 8002f3e:	f8df 8064 	ldr.w	r8, [pc, #100]	; 8002fa4 <dwt_configmrxlut+0xe4>
        lut1 = (uint32_t)CH5_DGC_LUT_1;
 8002f42:	f8df 9064 	ldr.w	r9, [pc, #100]	; 8002fa8 <dwt_configmrxlut+0xe8>
        lut0 = (uint32_t)CH5_DGC_LUT_0;
 8002f46:	4a14      	ldr	r2, [pc, #80]	; (8002f98 <dwt_configmrxlut+0xd8>)
 8002f48:	e7c7      	b.n	8002eda <dwt_configmrxlut+0x1a>
 8002f4a:	bf00      	nop
 8002f4c:	0002afb5 	.word	0x0002afb5
 8002f50:	0002af7d 	.word	0x0002af7d
 8002f54:	0002af3e 	.word	0x0002af3e
 8002f58:	0002a8fe 	.word	0x0002a8fe
 8002f5c:	00030038 	.word	0x00030038
 8002f60:	0003003c 	.word	0x0003003c
 8002f64:	00030040 	.word	0x00030040
 8002f68:	00030044 	.word	0x00030044
 8002f6c:	00030048 	.word	0x00030048
 8002f70:	0003004c 	.word	0x0003004c
 8002f74:	00030050 	.word	0x00030050
 8002f78:	10000240 	.word	0x10000240
 8002f7c:	0003001c 	.word	0x0003001c
 8002f80:	1b6da489 	.word	0x1b6da489
 8002f84:	00030020 	.word	0x00030020
 8002f88:	0001cff5 	.word	0x0001cff5
 8002f8c:	0001cfb5 	.word	0x0001cfb5
 8002f90:	0001cf36 	.word	0x0001cf36
 8002f94:	0001c77e 	.word	0x0001c77e
 8002f98:	0001c0fd 	.word	0x0001c0fd
 8002f9c:	0002a5fe 	.word	0x0002a5fe
 8002fa0:	0002ac36 	.word	0x0002ac36
 8002fa4:	0001c6be 	.word	0x0001c6be
 8002fa8:	0001c43e 	.word	0x0001c43e

08002fac <dwt_run_pgfcal>:
{
 8002fac:	b538      	push	{r3, r4, r5, lr}
    dwt_write32bitoffsetreg(RX_CAL_CFG_ID, 0x0, data);
 8002fae:	4c26      	ldr	r4, [pc, #152]	; (8003048 <dwt_run_pgfcal+0x9c>)
 8002fb0:	4a26      	ldr	r2, [pc, #152]	; (800304c <dwt_run_pgfcal+0xa0>)
 8002fb2:	2100      	movs	r1, #0
 8002fb4:	4620      	mov	r0, r4
 8002fb6:	f7ff fd4c 	bl	8002a52 <dwt_write32bitoffsetreg>
    dwt_or8bitoffsetreg(RX_CAL_CFG_ID, 0x0, RX_CAL_CFG_CAL_EN_BIT_MASK);
 8002fba:	2310      	movs	r3, #16
 8002fbc:	22ff      	movs	r2, #255	; 0xff
 8002fbe:	2100      	movs	r1, #0
 8002fc0:	4620      	mov	r0, r4
 8002fc2:	f7ff fed9 	bl	8002d78 <dwt_modify8bitoffsetreg>
    for (flag=1,cnt=0;cnt<MAX_RETRIES_FOR_PGF;cnt++)
 8002fc6:	2400      	movs	r4, #0
 8002fc8:	e001      	b.n	8002fce <dwt_run_pgfcal+0x22>
 8002fca:	3401      	adds	r4, #1
 8002fcc:	b2e4      	uxtb	r4, r4
 8002fce:	2c02      	cmp	r4, #2
 8002fd0:	d80a      	bhi.n	8002fe8 <dwt_run_pgfcal+0x3c>
        deca_usleep(DELAY_20uUSec);
 8002fd2:	2014      	movs	r0, #20
 8002fd4:	f000 fd8a 	bl	8003aec <deca_usleep>
        if(dwt_read8bitoffsetreg(RX_CAL_STS_ID, 0x0) == 1)
 8002fd8:	2100      	movs	r1, #0
 8002fda:	481d      	ldr	r0, [pc, #116]	; (8003050 <dwt_run_pgfcal+0xa4>)
 8002fdc:	f7ff fdf5 	bl	8002bca <dwt_read8bitoffsetreg>
 8002fe0:	2801      	cmp	r0, #1
 8002fe2:	d1f2      	bne.n	8002fca <dwt_run_pgfcal+0x1e>
            flag=0;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	e000      	b.n	8002fea <dwt_run_pgfcal+0x3e>
    for (flag=1,cnt=0;cnt<MAX_RETRIES_FOR_PGF;cnt++)
 8002fe8:	2301      	movs	r3, #1
    if (flag)
 8002fea:	bb1b      	cbnz	r3, 8003034 <dwt_run_pgfcal+0x88>
    int result = DWT_SUCCESS;
 8002fec:	2500      	movs	r5, #0
    dwt_write8bitoffsetreg(RX_CAL_CFG_ID, 0x0, 0);
 8002fee:	4c16      	ldr	r4, [pc, #88]	; (8003048 <dwt_run_pgfcal+0x9c>)
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	4611      	mov	r1, r2
 8002ff4:	4620      	mov	r0, r4
 8002ff6:	f7ff fd8d 	bl	8002b14 <dwt_write8bitoffsetreg>
    dwt_write8bitoffsetreg(RX_CAL_STS_ID, 0x0, 1); //clear the status
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	2100      	movs	r1, #0
 8002ffe:	4814      	ldr	r0, [pc, #80]	; (8003050 <dwt_run_pgfcal+0xa4>)
 8003000:	f7ff fd88 	bl	8002b14 <dwt_write8bitoffsetreg>
    dwt_or8bitoffsetreg(RX_CAL_CFG_ID, 0x2, 0x1); //enable reading
 8003004:	2301      	movs	r3, #1
 8003006:	22ff      	movs	r2, #255	; 0xff
 8003008:	2102      	movs	r1, #2
 800300a:	4620      	mov	r0, r4
 800300c:	f7ff feb4 	bl	8002d78 <dwt_modify8bitoffsetreg>
    val = dwt_read32bitoffsetreg(RX_CAL_RESI_ID, 0x0);
 8003010:	2100      	movs	r1, #0
 8003012:	4810      	ldr	r0, [pc, #64]	; (8003054 <dwt_run_pgfcal+0xa8>)
 8003014:	f7ff fd93 	bl	8002b3e <dwt_read32bitoffsetreg>
    if (val == ERR_RX_CAL_FAIL)
 8003018:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800301c:	4298      	cmp	r0, r3
 800301e:	d00c      	beq.n	800303a <dwt_run_pgfcal+0x8e>
    val = dwt_read32bitoffsetreg(RX_CAL_RESQ_ID, 0x0);
 8003020:	2100      	movs	r1, #0
 8003022:	480d      	ldr	r0, [pc, #52]	; (8003058 <dwt_run_pgfcal+0xac>)
 8003024:	f7ff fd8b 	bl	8002b3e <dwt_read32bitoffsetreg>
    if (val == ERR_RX_CAL_FAIL)
 8003028:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800302c:	4298      	cmp	r0, r3
 800302e:	d007      	beq.n	8003040 <dwt_run_pgfcal+0x94>
}
 8003030:	4628      	mov	r0, r5
 8003032:	bd38      	pop	{r3, r4, r5, pc}
        result = DWT_ERROR;
 8003034:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8003038:	e7d9      	b.n	8002fee <dwt_run_pgfcal+0x42>
        result = DWT_ERROR;
 800303a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800303e:	e7ef      	b.n	8003020 <dwt_run_pgfcal+0x74>
        result = DWT_ERROR;
 8003040:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    return result;
 8003044:	e7f4      	b.n	8003030 <dwt_run_pgfcal+0x84>
 8003046:	bf00      	nop
 8003048:	0004000c 	.word	0x0004000c
 800304c:	00020001 	.word	0x00020001
 8003050:	00040020 	.word	0x00040020
 8003054:	00040014 	.word	0x00040014
 8003058:	0004001c 	.word	0x0004001c

0800305c <dwt_pgf_cal>:
{
 800305c:	b570      	push	{r4, r5, r6, lr}
 800305e:	4604      	mov	r4, r0
 8003060:	2600      	movs	r6, #0
    if (ldoen == 1)
 8003062:	2801      	cmp	r0, #1
 8003064:	d006      	beq.n	8003074 <dwt_pgf_cal+0x18>
    temp = dwt_run_pgfcal();
 8003066:	f7ff ffa1 	bl	8002fac <dwt_run_pgfcal>
 800306a:	4605      	mov	r5, r0
    if (ldoen == 1)
 800306c:	2c01      	cmp	r4, #1
 800306e:	d010      	beq.n	8003092 <dwt_pgf_cal+0x36>
}
 8003070:	4628      	mov	r0, r5
 8003072:	bd70      	pop	{r4, r5, r6, pc}
        val = dwt_read16bitoffsetreg(LDO_CTRL_ID, 0);
 8003074:	4d0a      	ldr	r5, [pc, #40]	; (80030a0 <dwt_pgf_cal+0x44>)
 8003076:	4631      	mov	r1, r6
 8003078:	4628      	mov	r0, r5
 800307a:	f7ff fd95 	bl	8002ba8 <dwt_read16bitoffsetreg>
 800307e:	4606      	mov	r6, r0
        dwt_or16bitoffsetreg(LDO_CTRL_ID, 0, (
 8003080:	f240 1305 	movw	r3, #261	; 0x105
 8003084:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003088:	2100      	movs	r1, #0
 800308a:	4628      	mov	r0, r5
 800308c:	f7ff fe42 	bl	8002d14 <dwt_modify16bitoffsetreg>
 8003090:	e7e9      	b.n	8003066 <dwt_pgf_cal+0xa>
        dwt_and16bitoffsetreg(LDO_CTRL_ID, 0, val); // restore LDO values
 8003092:	2300      	movs	r3, #0
 8003094:	4632      	mov	r2, r6
 8003096:	4619      	mov	r1, r3
 8003098:	4801      	ldr	r0, [pc, #4]	; (80030a0 <dwt_pgf_cal+0x44>)
 800309a:	f7ff fe3b 	bl	8002d14 <dwt_modify16bitoffsetreg>
    return temp;
 800309e:	e7e7      	b.n	8003070 <dwt_pgf_cal+0x14>
 80030a0:	00070048 	.word	0x00070048

080030a4 <dwt_setrxantennadelay>:
{
 80030a4:	b508      	push	{r3, lr}
 80030a6:	4602      	mov	r2, r0
    dwt_write16bitoffsetreg(CIA_CONF_ID, 0, rxDelay);
 80030a8:	2100      	movs	r1, #0
 80030aa:	f44f 2060 	mov.w	r0, #917504	; 0xe0000
 80030ae:	f7ff fd09 	bl	8002ac4 <dwt_write16bitoffsetreg>
}
 80030b2:	bd08      	pop	{r3, pc}

080030b4 <dwt_settxantennadelay>:
{
 80030b4:	b508      	push	{r3, lr}
 80030b6:	4602      	mov	r2, r0
    dwt_write16bitoffsetreg(TX_ANTD_ID, 0, txDelay);
 80030b8:	2100      	movs	r1, #0
 80030ba:	4802      	ldr	r0, [pc, #8]	; (80030c4 <dwt_settxantennadelay+0x10>)
 80030bc:	f7ff fd02 	bl	8002ac4 <dwt_write16bitoffsetreg>
}
 80030c0:	bd08      	pop	{r3, pc}
 80030c2:	bf00      	nop
 80030c4:	00010004 	.word	0x00010004

080030c8 <dwt_writetxdata>:
    if ((txBufferOffset + txDataLength) < TX_BUFFER_MAX_LEN)
 80030c8:	1813      	adds	r3, r2, r0
 80030ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030ce:	da20      	bge.n	8003112 <dwt_writetxdata+0x4a>
{
 80030d0:	b570      	push	{r4, r5, r6, lr}
 80030d2:	4605      	mov	r5, r0
 80030d4:	460e      	mov	r6, r1
 80030d6:	4614      	mov	r4, r2
        if(txBufferOffset <= REG_DIRECT_OFFSET_MAX_LEN)
 80030d8:	2a7f      	cmp	r2, #127	; 0x7f
 80030da:	d808      	bhi.n	80030ee <dwt_writetxdata+0x26>
            dwt_writetodevice(TX_BUFFER_ID, txBufferOffset, txDataLength, txDataBytes);
 80030dc:	460b      	mov	r3, r1
 80030de:	4602      	mov	r2, r0
 80030e0:	4621      	mov	r1, r4
 80030e2:	f44f 10a0 	mov.w	r0, #1310720	; 0x140000
 80030e6:	f7ff fcab 	bl	8002a40 <dwt_writetodevice>
        return DWT_SUCCESS;
 80030ea:	2000      	movs	r0, #0
} // end dwt_writetxdata()
 80030ec:	bd70      	pop	{r4, r5, r6, pc}
            dwt_write32bitreg(INDIRECT_ADDR_A_ID, (TX_BUFFER_ID >> 16) );
 80030ee:	2214      	movs	r2, #20
 80030f0:	2100      	movs	r1, #0
 80030f2:	4809      	ldr	r0, [pc, #36]	; (8003118 <dwt_writetxdata+0x50>)
 80030f4:	f7ff fcad 	bl	8002a52 <dwt_write32bitoffsetreg>
            dwt_write32bitreg(ADDR_OFFSET_A_ID,   txBufferOffset);
 80030f8:	4622      	mov	r2, r4
 80030fa:	2100      	movs	r1, #0
 80030fc:	4807      	ldr	r0, [pc, #28]	; (800311c <dwt_writetxdata+0x54>)
 80030fe:	f7ff fca8 	bl	8002a52 <dwt_write32bitoffsetreg>
            dwt_writetodevice(INDIRECT_POINTER_A_ID, 0, txDataLength, txDataBytes);
 8003102:	4633      	mov	r3, r6
 8003104:	462a      	mov	r2, r5
 8003106:	2100      	movs	r1, #0
 8003108:	f44f 10e8 	mov.w	r0, #1900544	; 0x1d0000
 800310c:	f7ff fc98 	bl	8002a40 <dwt_writetodevice>
 8003110:	e7eb      	b.n	80030ea <dwt_writetxdata+0x22>
        return DWT_ERROR;
 8003112:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
} // end dwt_writetxdata()
 8003116:	4770      	bx	lr
 8003118:	001f0004 	.word	0x001f0004
 800311c:	001f0008 	.word	0x001f0008

08003120 <dwt_writetxfctrl>:
{
 8003120:	b508      	push	{r3, lr}
    if(txBufferOffset <= 127)
 8003122:	297f      	cmp	r1, #127	; 0x7f
 8003124:	d809      	bhi.n	800313a <dwt_writetxfctrl+0x1a>
        reg32 = txFrameLength | ((uint32_t)(txBufferOffset) << TX_FCTRL_TXB_OFFSET_BIT_OFFSET) | ((uint32_t)ranging << TX_FCTRL_TR_BIT_OFFSET);
 8003126:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
        dwt_modify32bitoffsetreg(TX_FCTRL_ID, 0, ~(TX_FCTRL_TXB_OFFSET_BIT_MASK | TX_FCTRL_TR_BIT_MASK | TX_FCTRL_TXFLEN_BIT_MASK), reg32);
 800312a:	ea40 23c2 	orr.w	r3, r0, r2, lsl #11
 800312e:	4a0b      	ldr	r2, [pc, #44]	; (800315c <dwt_writetxfctrl+0x3c>)
 8003130:	2100      	movs	r1, #0
 8003132:	2024      	movs	r0, #36	; 0x24
 8003134:	f7ff fd56 	bl	8002be4 <dwt_modify32bitoffsetreg>
} // end dwt_writetxfctrl()
 8003138:	bd08      	pop	{r3, pc}
        reg32 = txFrameLength | ((uint32_t)(txBufferOffset + DWT_TX_BUFF_OFFSET_ADJUST) << TX_FCTRL_TXB_OFFSET_BIT_OFFSET) | ((uint32_t)ranging << TX_FCTRL_TR_BIT_OFFSET);
 800313a:	3180      	adds	r1, #128	; 0x80
 800313c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
        dwt_modify32bitoffsetreg(TX_FCTRL_ID, 0, ~(TX_FCTRL_TXB_OFFSET_BIT_MASK | TX_FCTRL_TR_BIT_MASK | TX_FCTRL_TXFLEN_BIT_MASK), reg32);
 8003140:	ea40 23c2 	orr.w	r3, r0, r2, lsl #11
 8003144:	4a05      	ldr	r2, [pc, #20]	; (800315c <dwt_writetxfctrl+0x3c>)
 8003146:	2100      	movs	r1, #0
 8003148:	2024      	movs	r0, #36	; 0x24
 800314a:	f7ff fd4b 	bl	8002be4 <dwt_modify32bitoffsetreg>
        reg32 = dwt_read8bitoffsetreg(SAR_CTRL_ID, 0); //DW3000/3700 - need to read this to load the correct TX buffer offset value
 800314e:	2100      	movs	r1, #0
 8003150:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003154:	f7ff fd39 	bl	8002bca <dwt_read8bitoffsetreg>
} // end dwt_writetxfctrl()
 8003158:	e7ee      	b.n	8003138 <dwt_writetxfctrl+0x18>
 800315a:	bf00      	nop
 800315c:	fc00f400 	.word	0xfc00f400

08003160 <dwt_setplenfine>:
{
 8003160:	b508      	push	{r3, lr}
 8003162:	4602      	mov	r2, r0
    dwt_write8bitoffsetreg(TX_FCTRL_HI_ID, 1, preambleLength);
 8003164:	2101      	movs	r1, #1
 8003166:	2028      	movs	r0, #40	; 0x28
 8003168:	f7ff fcd4 	bl	8002b14 <dwt_write8bitoffsetreg>
}
 800316c:	bd08      	pop	{r3, pc}
	...

08003170 <dwt_configure>:
{
 8003170:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003174:	4604      	mov	r4, r0
    uint8_t chan = config->chan,cnt,flag;
 8003176:	7807      	ldrb	r7, [r0, #0]
    uint8_t scp = ((config->rxCode > 24) || (config->txCode > 24)) ? 1 : 0;
 8003178:	7903      	ldrb	r3, [r0, #4]
 800317a:	2b18      	cmp	r3, #24
 800317c:	d804      	bhi.n	8003188 <dwt_configure+0x18>
 800317e:	78c3      	ldrb	r3, [r0, #3]
 8003180:	2b18      	cmp	r3, #24
 8003182:	d915      	bls.n	80031b0 <dwt_configure+0x40>
 8003184:	2601      	movs	r6, #1
 8003186:	e000      	b.n	800318a <dwt_configure+0x1a>
 8003188:	2601      	movs	r6, #1
 800318a:	b2f6      	uxtb	r6, r6
    uint8_t mode = (config->phrMode == DWT_PHRMODE_EXT) ? SYS_CFG_PHR_MODE_BIT_MASK : 0;
 800318c:	79e3      	ldrb	r3, [r4, #7]
 800318e:	2b01      	cmp	r3, #1
 8003190:	d010      	beq.n	80031b4 <dwt_configure+0x44>
 8003192:	2100      	movs	r1, #0
    switch (config->txPreambLength)
 8003194:	7863      	ldrb	r3, [r4, #1]
 8003196:	3b01      	subs	r3, #1
 8003198:	2b06      	cmp	r3, #6
 800319a:	f200 80f9 	bhi.w	8003390 <dwt_configure+0x220>
 800319e:	e8df f013 	tbh	[pc, r3, lsl #1]
 80031a2:	00fa      	.short	0x00fa
 80031a4:	00f700f7 	.word	0x00f700f7
 80031a8:	00f4000b 	.word	0x00f4000b
 80031ac:	000e00f7 	.word	0x000e00f7
    uint8_t scp = ((config->rxCode > 24) || (config->txCode > 24)) ? 1 : 0;
 80031b0:	2600      	movs	r6, #0
 80031b2:	e7ea      	b.n	800318a <dwt_configure+0x1a>
    uint8_t mode = (config->phrMode == DWT_PHRMODE_EXT) ? SYS_CFG_PHR_MODE_BIT_MASK : 0;
 80031b4:	2110      	movs	r1, #16
 80031b6:	e7ed      	b.n	8003194 <dwt_configure+0x24>
    switch (config->txPreambLength)
 80031b8:	f04f 0920 	mov.w	r9, #32
 80031bc:	e001      	b.n	80031c2 <dwt_configure+0x52>
        preamble_len = 72;
 80031be:	f04f 0948 	mov.w	r9, #72	; 0x48
    pdw3000local->sleep_mode &= (~(DWT_ALT_OPS | DWT_SEL_OPS3));  //clear the sleep mode ALT_OPS bit
 80031c2:	4bb7      	ldr	r3, [pc, #732]	; (80034a0 <dwt_configure+0x330>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	8a1a      	ldrh	r2, [r3, #16]
 80031c8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80031cc:	821a      	strh	r2, [r3, #16]
    pdw3000local->longFrames = config->phrMode ;
 80031ce:	79e2      	ldrb	r2, [r4, #7]
 80031d0:	731a      	strb	r2, [r3, #12]
    sts_len=GET_STS_REG_SET_VALUE((uint16_t)(config->stsLength));
 80031d2:	7b65      	ldrb	r5, [r4, #13]
 80031d4:	1caa      	adds	r2, r5, #2
 80031d6:	2501      	movs	r5, #1
 80031d8:	4095      	lsls	r5, r2
    pdw3000local->ststhreshold = (int16_t)((((uint32_t)sts_len) * 8) * STSQUAL_THRESH_64);
 80031da:	fa1f f885 	uxth.w	r8, r5
 80031de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80031e2:	ee07 2a90 	vmov	s15, r2
 80031e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031ea:	ed9f 7aae 	vldr	s14, [pc, #696]	; 80034a4 <dwt_configure+0x334>
 80031ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80031f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80031f6:	ee17 2a90 	vmov	r2, s15
 80031fa:	825a      	strh	r2, [r3, #18]
    pdw3000local->stsconfig = config->stsMode;
 80031fc:	7b22      	ldrb	r2, [r4, #12]
 80031fe:	755a      	strb	r2, [r3, #21]
        ((uint32_t)config->pdoaMode) << SYS_CFG_PDOA_MODE_BIT_OFFSET
 8003200:	7ba3      	ldrb	r3, [r4, #14]
        | ((uint16_t)config->stsMode & DWT_STS_CONFIG_MASK) << SYS_CFG_CP_SPC_BIT_OFFSET
 8003202:	0312      	lsls	r2, r2, #12
 8003204:	f402 4230 	and.w	r2, r2, #45056	; 0xb000
 8003208:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
        | (SYS_CFG_PHR_6M8_BIT_MASK & ((uint32_t)config->phrRate << SYS_CFG_PHR_6M8_BIT_OFFSET))
 800320c:	7a23      	ldrb	r3, [r4, #8]
 800320e:	015b      	lsls	r3, r3, #5
 8003210:	f003 0320 	and.w	r3, r3, #32
 8003214:	4313      	orrs	r3, r2
    dwt_modify32bitoffsetreg(SYS_CFG_ID, 0, ~(SYS_CFG_PHR_MODE_BIT_MASK | SYS_CFG_PHR_6M8_BIT_MASK | SYS_CFG_CP_SPC_BIT_MASK | SYS_CFG_PDOA_MODE_BIT_MASK | SYS_CFG_CP_SDC_BIT_MASK),
 8003216:	430b      	orrs	r3, r1
 8003218:	4aa3      	ldr	r2, [pc, #652]	; (80034a8 <dwt_configure+0x338>)
 800321a:	2100      	movs	r1, #0
 800321c:	2010      	movs	r0, #16
 800321e:	f7ff fce1 	bl	8002be4 <dwt_modify32bitoffsetreg>
    if (scp)
 8003222:	2e00      	cmp	r6, #0
 8003224:	f040 80ba 	bne.w	800339c <dwt_configure+0x22c>
        if (config->stsMode != DWT_STS_MODE_OFF)
 8003228:	7b23      	ldrb	r3, [r4, #12]
 800322a:	b1ab      	cbz	r3, 8003258 <dwt_configure+0xe8>
            if ((config->pdoaMode == DWT_PDOA_M1) || (config->pdoaMode == DWT_PDOA_M0))
 800322c:	7ba3      	ldrb	r3, [r4, #14]
 800322e:	2b01      	cmp	r3, #1
 8003230:	f240 80d9 	bls.w	80033e6 <dwt_configure+0x276>
                sts_mnth=get_sts_mnth(sts_length_factors[(uint8_t)(config->stsLength)], CIA_MANUALLOWERBOUND_TH_64, 4);
 8003234:	7b60      	ldrb	r0, [r4, #13]
 8003236:	2204      	movs	r2, #4
 8003238:	2110      	movs	r1, #16
 800323a:	4b9c      	ldr	r3, [pc, #624]	; (80034ac <dwt_configure+0x33c>)
 800323c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8003240:	f7ff fb24 	bl	800288c <get_sts_mnth>
            preamble_len += (sts_len) * 8;
 8003244:	eb09 09c8 	add.w	r9, r9, r8, lsl #3
            dwt_modify16bitoffsetreg(STS_CONFIG_LO_ID, 2, (uint16_t)~(STS_CONFIG_LO_STS_MAN_TH_BIT_MASK >> 16), sts_mnth & 0x7F);
 8003248:	f000 037f 	and.w	r3, r0, #127	; 0x7f
 800324c:	f64f 7280 	movw	r2, #65408	; 0xff80
 8003250:	2102      	movs	r1, #2
 8003252:	4897      	ldr	r0, [pc, #604]	; (80034b0 <dwt_configure+0x340>)
 8003254:	f7ff fd5e 	bl	8002d14 <dwt_modify16bitoffsetreg>
        if (preamble_len >= 256)
 8003258:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 800325c:	f340 80cc 	ble.w	80033f8 <dwt_configure+0x288>
            pdw3000local->sleep_mode |= DWT_ALT_OPS | DWT_SEL_OPS0;
 8003260:	4b8f      	ldr	r3, [pc, #572]	; (80034a0 <dwt_configure+0x330>)
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	8a13      	ldrh	r3, [r2, #16]
 8003266:	f043 0320 	orr.w	r3, r3, #32
 800326a:	8213      	strh	r3, [r2, #16]
            dwt_modify32bitoffsetreg(OTP_CFG_ID, 0, ~(OTP_CFG_OPS_ID_BIT_MASK), DWT_OPSET_LONG | OTP_CFG_OPS_KICK_BIT_MASK);
 800326c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003270:	f46f 52c0 	mvn.w	r2, #6144	; 0x1800
 8003274:	2100      	movs	r1, #0
 8003276:	488f      	ldr	r0, [pc, #572]	; (80034b4 <dwt_configure+0x344>)
 8003278:	f7ff fcb4 	bl	8002be4 <dwt_modify32bitoffsetreg>
    dwt_modify8bitoffsetreg(DTUNE0_ID, 0, (uint8_t) ~DTUNE0_PRE_PAC_SYM_BIT_MASK, config->rxPAC);
 800327c:	78a3      	ldrb	r3, [r4, #2]
 800327e:	22fc      	movs	r2, #252	; 0xfc
 8003280:	2100      	movs	r1, #0
 8003282:	f44f 20c0 	mov.w	r0, #393216	; 0x60000
 8003286:	f7ff fd77 	bl	8002d78 <dwt_modify8bitoffsetreg>
    dwt_write8bitoffsetreg(STS_CFG0_ID, 0, sts_len-1);    /*Starts from 0 that is why -1*/
 800328a:	1e6a      	subs	r2, r5, #1
 800328c:	b2d2      	uxtb	r2, r2
 800328e:	2100      	movs	r1, #0
 8003290:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8003294:	f7ff fc3e 	bl	8002b14 <dwt_write8bitoffsetreg>
    if (config->txPreambLength == DWT_PLEN_72)
 8003298:	7863      	ldrb	r3, [r4, #1]
 800329a:	2b07      	cmp	r3, #7
 800329c:	f000 80b5 	beq.w	800340a <dwt_configure+0x29a>
        dwt_setplenfine(0); //clear the setting in the FINE_PLEN register.
 80032a0:	2000      	movs	r0, #0
 80032a2:	f7ff ff5d 	bl	8003160 <dwt_setplenfine>
    if((config->stsMode & DWT_STS_MODE_ND) == DWT_STS_MODE_ND)
 80032a6:	7b23      	ldrb	r3, [r4, #12]
 80032a8:	f003 0303 	and.w	r3, r3, #3
 80032ac:	2b03      	cmp	r3, #3
 80032ae:	f000 80b0 	beq.w	8003412 <dwt_configure+0x2a2>
        dwt_write32bitoffsetreg(DTUNE3_ID, 0, PD_THRESH_DEFAULT);
 80032b2:	4a81      	ldr	r2, [pc, #516]	; (80034b8 <dwt_configure+0x348>)
 80032b4:	2100      	movs	r1, #0
 80032b6:	4881      	ldr	r0, [pc, #516]	; (80034bc <dwt_configure+0x34c>)
 80032b8:	f7ff fbcb 	bl	8002a52 <dwt_write32bitoffsetreg>
    temp = dwt_read32bitoffsetreg(CHAN_CTRL_ID, 0);
 80032bc:	2100      	movs	r1, #0
 80032be:	4880      	ldr	r0, [pc, #512]	; (80034c0 <dwt_configure+0x350>)
 80032c0:	f7ff fc3d 	bl	8002b3e <dwt_read32bitoffsetreg>
    temp &= (~(CHAN_CTRL_RX_PCODE_BIT_MASK | CHAN_CTRL_TX_PCODE_BIT_MASK | CHAN_CTRL_SFD_TYPE_BIT_MASK | CHAN_CTRL_RF_CHAN_BIT_MASK));
 80032c4:	f420 53ff 	bic.w	r3, r0, #8160	; 0x1fe0
 80032c8:	f023 031f 	bic.w	r3, r3, #31
    if (chan == 9) temp |= CHAN_CTRL_RF_CHAN_BIT_MASK;
 80032cc:	2f09      	cmp	r7, #9
 80032ce:	f000 80a6 	beq.w	800341e <dwt_configure+0x2ae>
    temp |= (CHAN_CTRL_RX_PCODE_BIT_MASK & ((uint32_t)config->rxCode << CHAN_CTRL_RX_PCODE_BIT_OFFSET));
 80032d2:	7922      	ldrb	r2, [r4, #4]
 80032d4:	0212      	lsls	r2, r2, #8
 80032d6:	f402 52f8 	and.w	r2, r2, #7936	; 0x1f00
 80032da:	431a      	orrs	r2, r3
    temp |= (CHAN_CTRL_TX_PCODE_BIT_MASK & ((uint32_t)config->txCode << CHAN_CTRL_TX_PCODE_BIT_OFFSET));
 80032dc:	78e3      	ldrb	r3, [r4, #3]
 80032de:	00db      	lsls	r3, r3, #3
 80032e0:	b2db      	uxtb	r3, r3
 80032e2:	4313      	orrs	r3, r2
    temp |= (CHAN_CTRL_SFD_TYPE_BIT_MASK & ((uint32_t)config->sfdType << CHAN_CTRL_SFD_TYPE_BIT_OFFSET));
 80032e4:	7962      	ldrb	r2, [r4, #5]
 80032e6:	0052      	lsls	r2, r2, #1
 80032e8:	f002 0206 	and.w	r2, r2, #6
    dwt_write32bitoffsetreg(CHAN_CTRL_ID, 0, temp);
 80032ec:	431a      	orrs	r2, r3
 80032ee:	2100      	movs	r1, #0
 80032f0:	4873      	ldr	r0, [pc, #460]	; (80034c0 <dwt_configure+0x350>)
 80032f2:	f7ff fbae 	bl	8002a52 <dwt_write32bitoffsetreg>
                                              ((uint32_t)config->dataRate << TX_FCTRL_TXBR_BIT_OFFSET)
 80032f6:	79a2      	ldrb	r2, [r4, #6]
                                              | ((uint32_t) config->txPreambLength) << TX_FCTRL_TXPSR_BIT_OFFSET);
 80032f8:	7863      	ldrb	r3, [r4, #1]
 80032fa:	031b      	lsls	r3, r3, #12
    dwt_modify32bitoffsetreg(TX_FCTRL_ID, 0, ~(TX_FCTRL_TXBR_BIT_MASK | TX_FCTRL_TXPSR_BIT_MASK),
 80032fc:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 8003300:	f46f 4274 	mvn.w	r2, #62464	; 0xf400
 8003304:	2100      	movs	r1, #0
 8003306:	2024      	movs	r0, #36	; 0x24
 8003308:	f7ff fc6c 	bl	8002be4 <dwt_modify32bitoffsetreg>
    if (config->sfdTO == 0)
 800330c:	8963      	ldrh	r3, [r4, #10]
 800330e:	b90b      	cbnz	r3, 8003314 <dwt_configure+0x1a4>
        config->sfdTO = DWT_SFDTOC_DEF;
 8003310:	2381      	movs	r3, #129	; 0x81
 8003312:	8163      	strh	r3, [r4, #10]
    dwt_write16bitoffsetreg(DTUNE0_ID, 2, config->sfdTO);
 8003314:	8962      	ldrh	r2, [r4, #10]
 8003316:	2102      	movs	r1, #2
 8003318:	f44f 20c0 	mov.w	r0, #393216	; 0x60000
 800331c:	f7ff fbd2 	bl	8002ac4 <dwt_write16bitoffsetreg>
    if (chan == 9)
 8003320:	2f09      	cmp	r7, #9
 8003322:	d07f      	beq.n	8003424 <dwt_configure+0x2b4>
        dwt_write32bitoffsetreg(TX_CTRL_HI_ID, 0, RF_TXCTRL_CH5);
 8003324:	4a67      	ldr	r2, [pc, #412]	; (80034c4 <dwt_configure+0x354>)
 8003326:	2100      	movs	r1, #0
 8003328:	4867      	ldr	r0, [pc, #412]	; (80034c8 <dwt_configure+0x358>)
 800332a:	f7ff fb92 	bl	8002a52 <dwt_write32bitoffsetreg>
        dwt_write16bitoffsetreg(PLL_CFG_ID, 0, RF_PLL_CFG_CH5);
 800332e:	f641 723c 	movw	r2, #7996	; 0x1f3c
 8003332:	2100      	movs	r1, #0
 8003334:	f44f 2010 	mov.w	r0, #589824	; 0x90000
 8003338:	f7ff fbc4 	bl	8002ac4 <dwt_write16bitoffsetreg>
    dwt_write8bitoffsetreg(LDO_RLOAD_ID, 1, LDO_RLOAD_VAL_B1);
 800333c:	2214      	movs	r2, #20
 800333e:	2101      	movs	r1, #1
 8003340:	4862      	ldr	r0, [pc, #392]	; (80034cc <dwt_configure+0x35c>)
 8003342:	f7ff fbe7 	bl	8002b14 <dwt_write8bitoffsetreg>
    dwt_write8bitoffsetreg(TX_CTRL_LO_ID, 2, RF_TXCTRL_LO_B2);
 8003346:	220e      	movs	r2, #14
 8003348:	2102      	movs	r1, #2
 800334a:	4861      	ldr	r0, [pc, #388]	; (80034d0 <dwt_configure+0x360>)
 800334c:	f7ff fbe2 	bl	8002b14 <dwt_write8bitoffsetreg>
    dwt_write8bitoffsetreg(PLL_CAL_ID, 0, RF_PLL_CFG_LD);        // Extend the lock delay
 8003350:	2281      	movs	r2, #129	; 0x81
 8003352:	2100      	movs	r1, #0
 8003354:	485f      	ldr	r0, [pc, #380]	; (80034d4 <dwt_configure+0x364>)
 8003356:	f7ff fbdd 	bl	8002b14 <dwt_write8bitoffsetreg>
    dwt_write8bitoffsetreg(SYS_STATUS_ID, 0, SYS_STATUS_CP_LOCK_BIT_MASK);
 800335a:	2202      	movs	r2, #2
 800335c:	2100      	movs	r1, #0
 800335e:	2044      	movs	r0, #68	; 0x44
 8003360:	f7ff fbd8 	bl	8002b14 <dwt_write8bitoffsetreg>
    dwt_setdwstate(DWT_DW_IDLE);
 8003364:	2001      	movs	r0, #1
 8003366:	f7ff fd19 	bl	8002d9c <dwt_setdwstate>
    for (flag=1,cnt=0;cnt<MAX_RETRIES_FOR_PLL;cnt++)
 800336a:	2500      	movs	r5, #0
 800336c:	2d05      	cmp	r5, #5
 800336e:	d86b      	bhi.n	8003448 <dwt_configure+0x2d8>
        deca_usleep(DELAY_20uUSec);
 8003370:	2014      	movs	r0, #20
 8003372:	f000 fbbb 	bl	8003aec <deca_usleep>
        if ((dwt_read8bitoffsetreg(SYS_STATUS_ID, 0) & SYS_STATUS_CP_LOCK_BIT_MASK))
 8003376:	2100      	movs	r1, #0
 8003378:	2044      	movs	r0, #68	; 0x44
 800337a:	f7ff fc26 	bl	8002bca <dwt_read8bitoffsetreg>
 800337e:	f010 0f02 	tst.w	r0, #2
 8003382:	d17d      	bne.n	8003480 <dwt_configure+0x310>
    for (flag=1,cnt=0;cnt<MAX_RETRIES_FOR_PLL;cnt++)
 8003384:	3501      	adds	r5, #1
 8003386:	b2ed      	uxtb	r5, r5
 8003388:	e7f0      	b.n	800336c <dwt_configure+0x1fc>
        preamble_len = 128;
 800338a:	f04f 0980 	mov.w	r9, #128	; 0x80
        break;
 800338e:	e718      	b.n	80031c2 <dwt_configure+0x52>
        preamble_len = 256;
 8003390:	f44f 7980 	mov.w	r9, #256	; 0x100
        break;
 8003394:	e715      	b.n	80031c2 <dwt_configure+0x52>
        preamble_len = 64;
 8003396:	f04f 0940 	mov.w	r9, #64	; 0x40
 800339a:	e712      	b.n	80031c2 <dwt_configure+0x52>
        pdw3000local->sleep_mode |= DWT_ALT_OPS | DWT_SEL_OPS1;  //configure correct OPS table is kicked on wakeup
 800339c:	4b40      	ldr	r3, [pc, #256]	; (80034a0 <dwt_configure+0x330>)
 800339e:	681a      	ldr	r2, [r3, #0]
 80033a0:	8a13      	ldrh	r3, [r2, #16]
 80033a2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80033a6:	8213      	strh	r3, [r2, #16]
        dwt_modify32bitoffsetreg(OTP_CFG_ID, 0, ~(OTP_CFG_OPS_ID_BIT_MASK), DWT_OPSET_SCP | OTP_CFG_OPS_KICK_BIT_MASK);
 80033a8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80033ac:	f46f 52c0 	mvn.w	r2, #6144	; 0x1800
 80033b0:	2100      	movs	r1, #0
 80033b2:	4840      	ldr	r0, [pc, #256]	; (80034b4 <dwt_configure+0x344>)
 80033b4:	f7ff fc16 	bl	8002be4 <dwt_modify32bitoffsetreg>
        dwt_write32bitoffsetreg(IP_CONFIG_LO_ID, 0, IP_CONFIG_LO_SCP);       //Set this if Ipatov analysis is used in SCP mode
 80033b8:	f240 3206 	movw	r2, #774	; 0x306
 80033bc:	2100      	movs	r1, #0
 80033be:	4846      	ldr	r0, [pc, #280]	; (80034d8 <dwt_configure+0x368>)
 80033c0:	f7ff fb47 	bl	8002a52 <dwt_write32bitoffsetreg>
        dwt_write32bitoffsetreg(IP_CONFIG_HI_ID, 0, IP_CONFIG_HI_SCP);
 80033c4:	2200      	movs	r2, #0
 80033c6:	4611      	mov	r1, r2
 80033c8:	f04f 100e 	mov.w	r0, #917518	; 0xe000e
 80033cc:	f7ff fb41 	bl	8002a52 <dwt_write32bitoffsetreg>
        dwt_write32bitoffsetreg(STS_CONFIG_LO_ID, 0, STS_CONFIG_LO_SCP);
 80033d0:	4a42      	ldr	r2, [pc, #264]	; (80034dc <dwt_configure+0x36c>)
 80033d2:	2100      	movs	r1, #0
 80033d4:	4836      	ldr	r0, [pc, #216]	; (80034b0 <dwt_configure+0x340>)
 80033d6:	f7ff fb3c 	bl	8002a52 <dwt_write32bitoffsetreg>
        dwt_write8bitoffsetreg(STS_CONFIG_HI_ID, 0, STS_CONFIG_HI_SCP);
 80033da:	227d      	movs	r2, #125	; 0x7d
 80033dc:	2100      	movs	r1, #0
 80033de:	4840      	ldr	r0, [pc, #256]	; (80034e0 <dwt_configure+0x370>)
 80033e0:	f7ff fb98 	bl	8002b14 <dwt_write8bitoffsetreg>
 80033e4:	e74a      	b.n	800327c <dwt_configure+0x10c>
                sts_mnth=get_sts_mnth(sts_length_factors[(uint8_t)(config->stsLength)], CIA_MANUALLOWERBOUND_TH_64, 3);
 80033e6:	7b60      	ldrb	r0, [r4, #13]
 80033e8:	2203      	movs	r2, #3
 80033ea:	2110      	movs	r1, #16
 80033ec:	4b2f      	ldr	r3, [pc, #188]	; (80034ac <dwt_configure+0x33c>)
 80033ee:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 80033f2:	f7ff fa4b 	bl	800288c <get_sts_mnth>
 80033f6:	e725      	b.n	8003244 <dwt_configure+0xd4>
            dwt_modify32bitoffsetreg(OTP_CFG_ID, 0, ~(OTP_CFG_OPS_ID_BIT_MASK), DWT_OPSET_SHORT | OTP_CFG_OPS_KICK_BIT_MASK);
 80033f8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80033fc:	f46f 52c0 	mvn.w	r2, #6144	; 0x1800
 8003400:	2100      	movs	r1, #0
 8003402:	482c      	ldr	r0, [pc, #176]	; (80034b4 <dwt_configure+0x344>)
 8003404:	f7ff fbee 	bl	8002be4 <dwt_modify32bitoffsetreg>
 8003408:	e738      	b.n	800327c <dwt_configure+0x10c>
        dwt_setplenfine(8); //value 8 sets fine preamble length to 72 symbols - this is needed to set 72 length.
 800340a:	2008      	movs	r0, #8
 800340c:	f7ff fea8 	bl	8003160 <dwt_setplenfine>
 8003410:	e749      	b.n	80032a6 <dwt_configure+0x136>
        dwt_write32bitoffsetreg(DTUNE3_ID, 0, PD_THRESH_NO_DATA);
 8003412:	4a34      	ldr	r2, [pc, #208]	; (80034e4 <dwt_configure+0x374>)
 8003414:	2100      	movs	r1, #0
 8003416:	4829      	ldr	r0, [pc, #164]	; (80034bc <dwt_configure+0x34c>)
 8003418:	f7ff fb1b 	bl	8002a52 <dwt_write32bitoffsetreg>
 800341c:	e74e      	b.n	80032bc <dwt_configure+0x14c>
    if (chan == 9) temp |= CHAN_CTRL_RF_CHAN_BIT_MASK;
 800341e:	f043 0301 	orr.w	r3, r3, #1
 8003422:	e756      	b.n	80032d2 <dwt_configure+0x162>
        dwt_write32bitoffsetreg(TX_CTRL_HI_ID, 0, RF_TXCTRL_CH9);
 8003424:	4a30      	ldr	r2, [pc, #192]	; (80034e8 <dwt_configure+0x378>)
 8003426:	2100      	movs	r1, #0
 8003428:	4827      	ldr	r0, [pc, #156]	; (80034c8 <dwt_configure+0x358>)
 800342a:	f7ff fb12 	bl	8002a52 <dwt_write32bitoffsetreg>
        dwt_write16bitoffsetreg(PLL_CFG_ID, 0, RF_PLL_CFG_CH9);
 800342e:	f640 723c 	movw	r2, #3900	; 0xf3c
 8003432:	2100      	movs	r1, #0
 8003434:	f44f 2010 	mov.w	r0, #589824	; 0x90000
 8003438:	f7ff fb44 	bl	8002ac4 <dwt_write16bitoffsetreg>
        dwt_write32bitoffsetreg(RX_CTRL_HI_ID, 0, RF_RXCTRL_CH9);
 800343c:	4a2b      	ldr	r2, [pc, #172]	; (80034ec <dwt_configure+0x37c>)
 800343e:	2100      	movs	r1, #0
 8003440:	482b      	ldr	r0, [pc, #172]	; (80034f0 <dwt_configure+0x380>)
 8003442:	f7ff fb06 	bl	8002a52 <dwt_write32bitoffsetreg>
 8003446:	e779      	b.n	800333c <dwt_configure+0x1cc>
    for (flag=1,cnt=0;cnt<MAX_RETRIES_FOR_PLL;cnt++)
 8003448:	2301      	movs	r3, #1
    if (flag)
 800344a:	bb33      	cbnz	r3, 800349a <dwt_configure+0x32a>
    if ((config->rxCode >= 9) && (config->rxCode <= 24)) //only enable DGC for PRF 64
 800344c:	7923      	ldrb	r3, [r4, #4]
 800344e:	3b09      	subs	r3, #9
 8003450:	b2db      	uxtb	r3, r3
 8003452:	2b0f      	cmp	r3, #15
 8003454:	d81a      	bhi.n	800348c <dwt_configure+0x31c>
        if (pdw3000local->dgc_otp_set == DWT_DGC_LOAD_FROM_OTP)
 8003456:	4b12      	ldr	r3, [pc, #72]	; (80034a0 <dwt_configure+0x330>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	7a5b      	ldrb	r3, [r3, #9]
 800345c:	2b01      	cmp	r3, #1
 800345e:	d011      	beq.n	8003484 <dwt_configure+0x314>
            dwt_configmrxlut(chan);
 8003460:	4638      	mov	r0, r7
 8003462:	f7ff fd2d 	bl	8002ec0 <dwt_configmrxlut>
        dwt_modify16bitoffsetreg(DGC_CFG_ID, 0x0, (uint16_t)~DGC_CFG_THR_64_BIT_MASK, DWT_DGC_CFG << DGC_CFG_THR_64_BIT_OFFSET);
 8003466:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 800346a:	f248 12ff 	movw	r2, #33279	; 0x81ff
 800346e:	2100      	movs	r1, #0
 8003470:	4820      	ldr	r0, [pc, #128]	; (80034f4 <dwt_configure+0x384>)
 8003472:	f7ff fc4f 	bl	8002d14 <dwt_modify16bitoffsetreg>
    error = dwt_pgf_cal(1);  //if the RX calibration routine fails the device receiver performance will be severely affected, the application should reset and try again
 8003476:	2001      	movs	r0, #1
 8003478:	f7ff fdf0 	bl	800305c <dwt_pgf_cal>
} // end dwt_configure()
 800347c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            flag=0;
 8003480:	2300      	movs	r3, #0
 8003482:	e7e2      	b.n	800344a <dwt_configure+0x2da>
            _dwt_kick_dgc_on_wakeup(chan);
 8003484:	b278      	sxtb	r0, r7
 8003486:	f7ff fbd5 	bl	8002c34 <_dwt_kick_dgc_on_wakeup>
 800348a:	e7ec      	b.n	8003466 <dwt_configure+0x2f6>
        dwt_and8bitoffsetreg(DGC_CFG_ID, 0x0, (uint8_t)~DGC_CFG_RX_TUNE_EN_BIT_MASK);
 800348c:	2300      	movs	r3, #0
 800348e:	22fe      	movs	r2, #254	; 0xfe
 8003490:	4619      	mov	r1, r3
 8003492:	4818      	ldr	r0, [pc, #96]	; (80034f4 <dwt_configure+0x384>)
 8003494:	f7ff fc70 	bl	8002d78 <dwt_modify8bitoffsetreg>
 8003498:	e7ed      	b.n	8003476 <dwt_configure+0x306>
        return  DWT_ERROR;
 800349a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800349e:	e7ed      	b.n	800347c <dwt_configure+0x30c>
 80034a0:	2000008c 	.word	0x2000008c
 80034a4:	3f666666 	.word	0x3f666666
 80034a8:	fffc4fcf 	.word	0xfffc4fcf
 80034ac:	080072e8 	.word	0x080072e8
 80034b0:	000e0012 	.word	0x000e0012
 80034b4:	000b0008 	.word	0x000b0008
 80034b8:	af5f584c 	.word	0xaf5f584c
 80034bc:	0006000c 	.word	0x0006000c
 80034c0:	00010014 	.word	0x00010014
 80034c4:	1c071134 	.word	0x1c071134
 80034c8:	0007001c 	.word	0x0007001c
 80034cc:	00070050 	.word	0x00070050
 80034d0:	00070018 	.word	0x00070018
 80034d4:	00090008 	.word	0x00090008
 80034d8:	000e000c 	.word	0x000e000c
 80034dc:	000c5a0a 	.word	0x000c5a0a
 80034e0:	000e0016 	.word	0x000e0016
 80034e4:	af5f35cc 	.word	0xaf5f35cc
 80034e8:	1c010034 	.word	0x1c010034
 80034ec:	08b5a833 	.word	0x08b5a833
 80034f0:	00070010 	.word	0x00070010
 80034f4:	00030018 	.word	0x00030018

080034f8 <dwt_readrxdata>:
{
 80034f8:	b570      	push	{r4, r5, r6, lr}
 80034fa:	4606      	mov	r6, r0
 80034fc:	460d      	mov	r5, r1
 80034fe:	4614      	mov	r4, r2
    if (pdw3000local->dblbuffon == DBL_BUFF_ACCESS_BUFFER_1)  //if the flag is 0x3 we are reading from RX_BUFFER_1
 8003500:	4b13      	ldr	r3, [pc, #76]	; (8003550 <dwt_readrxdata+0x58>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	7bdb      	ldrb	r3, [r3, #15]
 8003506:	2b03      	cmp	r3, #3
 8003508:	d00d      	beq.n	8003526 <dwt_readrxdata+0x2e>
        rx_buff_addr=RX_BUFFER_0_ID;
 800350a:	f44f 1090 	mov.w	r0, #1179648	; 0x120000
    if ((rxBufferOffset + length) <= RX_BUFFER_MAX_LEN)
 800350e:	1963      	adds	r3, r4, r5
 8003510:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003514:	da06      	bge.n	8003524 <dwt_readrxdata+0x2c>
        if(rxBufferOffset <= REG_DIRECT_OFFSET_MAX_LEN)
 8003516:	2c7f      	cmp	r4, #127	; 0x7f
 8003518:	d808      	bhi.n	800352c <dwt_readrxdata+0x34>
            dwt_readfromdevice(rx_buff_addr,rxBufferOffset,length,buffer);
 800351a:	4633      	mov	r3, r6
 800351c:	462a      	mov	r2, r5
 800351e:	4621      	mov	r1, r4
 8003520:	f7ff fb05 	bl	8002b2e <dwt_readfromdevice>
}
 8003524:	bd70      	pop	{r4, r5, r6, pc}
        rx_buff_addr=RX_BUFFER_1_ID;
 8003526:	f44f 1098 	mov.w	r0, #1245184	; 0x130000
 800352a:	e7f0      	b.n	800350e <dwt_readrxdata+0x16>
            dwt_write32bitreg(INDIRECT_ADDR_A_ID, (rx_buff_addr >> 16) );
 800352c:	0c02      	lsrs	r2, r0, #16
 800352e:	2100      	movs	r1, #0
 8003530:	4808      	ldr	r0, [pc, #32]	; (8003554 <dwt_readrxdata+0x5c>)
 8003532:	f7ff fa8e 	bl	8002a52 <dwt_write32bitoffsetreg>
            dwt_write32bitreg(ADDR_OFFSET_A_ID,   rxBufferOffset);
 8003536:	4622      	mov	r2, r4
 8003538:	2100      	movs	r1, #0
 800353a:	4807      	ldr	r0, [pc, #28]	; (8003558 <dwt_readrxdata+0x60>)
 800353c:	f7ff fa89 	bl	8002a52 <dwt_write32bitoffsetreg>
            dwt_readfromdevice(INDIRECT_POINTER_A_ID, 0, length, buffer);
 8003540:	4633      	mov	r3, r6
 8003542:	462a      	mov	r2, r5
 8003544:	2100      	movs	r1, #0
 8003546:	f44f 10e8 	mov.w	r0, #1900544	; 0x1d0000
 800354a:	f7ff faf0 	bl	8002b2e <dwt_readfromdevice>
}
 800354e:	e7e9      	b.n	8003524 <dwt_readrxdata+0x2c>
 8003550:	2000008c 	.word	0x2000008c
 8003554:	001f0004 	.word	0x001f0004
 8003558:	001f0008 	.word	0x001f0008

0800355c <dwt_readstsquality>:
{
 800355c:	b510      	push	{r4, lr}
 800355e:	4604      	mov	r4, r0
    preambleCount = dwt_read16bitoffsetreg(STS_STS_ID, 0) & STS_STS_ACC_QUAL_BIT_MASK; //  dwt_read16bitoffsetreg(CP_PRNG_ID, CP_STS_OFFSET) & CP_ACC_CP_QUAL_MASK;
 8003560:	2100      	movs	r1, #0
 8003562:	4809      	ldr	r0, [pc, #36]	; (8003588 <dwt_readstsquality+0x2c>)
 8003564:	f7ff fb20 	bl	8002ba8 <dwt_read16bitoffsetreg>
 8003568:	f3c0 030b 	ubfx	r3, r0, #0, #12
    if(preambleCount & STS_ACC_CP_QUAL_SIGNTST)
 800356c:	f410 6f00 	tst.w	r0, #2048	; 0x800
 8003570:	d001      	beq.n	8003576 <dwt_readstsquality+0x1a>
        preambleCount |= STS_ACC_CP_QUAL_SIGNEXT;
 8003572:	f443 4370 	orr.w	r3, r3, #61440	; 0xf000
    *rxStsQualityIndex = (int16_t)preambleCount;
 8003576:	b21b      	sxth	r3, r3
 8003578:	8023      	strh	r3, [r4, #0]
    return (int)((int16_t)preambleCount - pdw3000local->ststhreshold);
 800357a:	4a04      	ldr	r2, [pc, #16]	; (800358c <dwt_readstsquality+0x30>)
 800357c:	6812      	ldr	r2, [r2, #0]
 800357e:	f9b2 0012 	ldrsh.w	r0, [r2, #18]
}
 8003582:	1a18      	subs	r0, r3, r0
 8003584:	bd10      	pop	{r4, pc}
 8003586:	bf00      	nop
 8003588:	00020008 	.word	0x00020008
 800358c:	2000008c 	.word	0x2000008c

08003590 <dwt_readstsstatus>:
{
 8003590:	b510      	push	{r4, lr}
 8003592:	4604      	mov	r4, r0
    uint32_t stsStatusRegAdd = (sts_num == 1) ? BUF0_STS1_STAT : BUF0_STS_STAT;
 8003594:	2901      	cmp	r1, #1
 8003596:	d017      	beq.n	80035c8 <dwt_readstsstatus+0x38>
 8003598:	4a15      	ldr	r2, [pc, #84]	; (80035f0 <dwt_readstsstatus+0x60>)
    uint32_t stsStatusRegAddN = (sts_num == 1) ? STS1_TOA_HI_ID : STS_TOA_HI_ID;
 800359a:	2901      	cmp	r1, #1
 800359c:	d016      	beq.n	80035cc <dwt_readstsstatus+0x3c>
 800359e:	f04f 100c 	mov.w	r0, #786444	; 0xc000c
    switch (pdw3000local->dblbuffon) //check if in double buffer mode and if so which buffer host is currently accessing
 80035a2:	4b14      	ldr	r3, [pc, #80]	; (80035f4 <dwt_readstsstatus+0x64>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	7bdb      	ldrb	r3, [r3, #15]
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	d011      	beq.n	80035d0 <dwt_readstsstatus+0x40>
 80035ac:	2b03      	cmp	r3, #3
 80035ae:	d116      	bne.n	80035de <dwt_readstsstatus+0x4e>
        *stsStatus = dwt_read16bitoffsetreg(INDIRECT_POINTER_B_ID, (stsStatusRegAdd-BUF0_RX_FINFO+2)) >> 7;
 80035b0:	4911      	ldr	r1, [pc, #68]	; (80035f8 <dwt_readstsstatus+0x68>)
 80035b2:	4411      	add	r1, r2
 80035b4:	f44f 10f0 	mov.w	r0, #1966080	; 0x1e0000
 80035b8:	f7ff faf6 	bl	8002ba8 <dwt_read16bitoffsetreg>
 80035bc:	09c0      	lsrs	r0, r0, #7
 80035be:	8020      	strh	r0, [r4, #0]
    if (*stsStatus != 0 /*& DWT_SFD_COUNT_WARN*/)
 80035c0:	8823      	ldrh	r3, [r4, #0]
 80035c2:	b993      	cbnz	r3, 80035ea <dwt_readstsstatus+0x5a>
    int ret = DWT_SUCCESS;
 80035c4:	2000      	movs	r0, #0
}
 80035c6:	bd10      	pop	{r4, pc}
    uint32_t stsStatusRegAdd = (sts_num == 1) ? BUF0_STS1_STAT : BUF0_STS_STAT;
 80035c8:	4a0c      	ldr	r2, [pc, #48]	; (80035fc <dwt_readstsstatus+0x6c>)
 80035ca:	e7e6      	b.n	800359a <dwt_readstsstatus+0xa>
    uint32_t stsStatusRegAddN = (sts_num == 1) ? STS1_TOA_HI_ID : STS_TOA_HI_ID;
 80035cc:	480c      	ldr	r0, [pc, #48]	; (8003600 <dwt_readstsstatus+0x70>)
 80035ce:	e7e8      	b.n	80035a2 <dwt_readstsstatus+0x12>
        *stsStatus = (dwt_read16bitoffsetreg(stsStatusRegAdd, 2) >> 7);
 80035d0:	2102      	movs	r1, #2
 80035d2:	4610      	mov	r0, r2
 80035d4:	f7ff fae8 	bl	8002ba8 <dwt_read16bitoffsetreg>
 80035d8:	09c0      	lsrs	r0, r0, #7
 80035da:	8020      	strh	r0, [r4, #0]
        break;
 80035dc:	e7f0      	b.n	80035c0 <dwt_readstsstatus+0x30>
        *stsStatus = (dwt_read16bitoffsetreg(stsStatusRegAddN, 2) >> 7);
 80035de:	2102      	movs	r1, #2
 80035e0:	f7ff fae2 	bl	8002ba8 <dwt_read16bitoffsetreg>
 80035e4:	09c0      	lsrs	r0, r0, #7
 80035e6:	8020      	strh	r0, [r4, #0]
        break;
 80035e8:	e7ea      	b.n	80035c0 <dwt_readstsstatus+0x30>
        ret = DWT_ERROR;
 80035ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return ret;
 80035ee:	e7ea      	b.n	80035c6 <dwt_readstsstatus+0x36>
 80035f0:	0018002c 	.word	0x0018002c
 80035f4:	2000008c 	.word	0x2000008c
 80035f8:	ffe80002 	.word	0xffe80002
 80035fc:	00180034 	.word	0x00180034
 8003600:	000c0014 	.word	0x000c0014

08003604 <dwt_readtxtimestamp>:
{
 8003604:	b508      	push	{r3, lr}
 8003606:	4603      	mov	r3, r0
    dwt_readfromdevice(TX_TIME_LO_ID, 0, TX_TIME_TX_STAMP_LEN, timestamp); // Read bytes directly into buffer
 8003608:	2205      	movs	r2, #5
 800360a:	2100      	movs	r1, #0
 800360c:	2074      	movs	r0, #116	; 0x74
 800360e:	f7ff fa8e 	bl	8002b2e <dwt_readfromdevice>
}
 8003612:	bd08      	pop	{r3, pc}

08003614 <dwt_readrxtimestamp>:
{
 8003614:	b508      	push	{r3, lr}
 8003616:	4603      	mov	r3, r0
    switch (pdw3000local->dblbuffon)    //check if in double buffer mode and if so which buffer host is currently accessing
 8003618:	4a0c      	ldr	r2, [pc, #48]	; (800364c <dwt_readrxtimestamp+0x38>)
 800361a:	6812      	ldr	r2, [r2, #0]
 800361c:	7bd2      	ldrb	r2, [r2, #15]
 800361e:	2a01      	cmp	r2, #1
 8003620:	d008      	beq.n	8003634 <dwt_readrxtimestamp+0x20>
 8003622:	2a03      	cmp	r2, #3
 8003624:	d10c      	bne.n	8003640 <dwt_readrxtimestamp+0x2c>
        dwt_readfromdevice(INDIRECT_POINTER_B_ID, BUF1_RX_TIME -BUF1_RX_FINFO, RX_TIME_RX_STAMP_LEN, timestamp);
 8003626:	2205      	movs	r2, #5
 8003628:	2104      	movs	r1, #4
 800362a:	f44f 10f0 	mov.w	r0, #1966080	; 0x1e0000
 800362e:	f7ff fa7e 	bl	8002b2e <dwt_readfromdevice>
}
 8003632:	bd08      	pop	{r3, pc}
        dwt_readfromdevice(BUF0_RX_TIME, 0, RX_TIME_RX_STAMP_LEN, timestamp);
 8003634:	2205      	movs	r2, #5
 8003636:	2100      	movs	r1, #0
 8003638:	4805      	ldr	r0, [pc, #20]	; (8003650 <dwt_readrxtimestamp+0x3c>)
 800363a:	f7ff fa78 	bl	8002b2e <dwt_readfromdevice>
        break;
 800363e:	e7f8      	b.n	8003632 <dwt_readrxtimestamp+0x1e>
        dwt_readfromdevice(RX_TIME_0_ID, 0, RX_TIME_RX_STAMP_LEN, timestamp); // Get the adjusted time of arrival
 8003640:	2205      	movs	r2, #5
 8003642:	2100      	movs	r1, #0
 8003644:	2064      	movs	r0, #100	; 0x64
 8003646:	f7ff fa72 	bl	8002b2e <dwt_readfromdevice>
}
 800364a:	e7f2      	b.n	8003632 <dwt_readrxtimestamp+0x1e>
 800364c:	2000008c 	.word	0x2000008c
 8003650:	00180004 	.word	0x00180004

08003654 <dwt_configureframefilter>:
{
 8003654:	b510      	push	{r4, lr}
    if(enabletype == DWT_FF_ENABLE_802_15_4)
 8003656:	2802      	cmp	r0, #2
 8003658:	d00b      	beq.n	8003672 <dwt_configureframefilter+0x1e>
        dwt_and8bitoffsetreg(SYS_CFG_ID, 0, (uint8_t)(~(SYS_CFG_FFEN_BIT_MASK)));
 800365a:	2300      	movs	r3, #0
 800365c:	22fe      	movs	r2, #254	; 0xfe
 800365e:	4619      	mov	r1, r3
 8003660:	2010      	movs	r0, #16
 8003662:	f7ff fb89 	bl	8002d78 <dwt_modify8bitoffsetreg>
        dwt_write16bitoffsetreg(ADR_FILT_CFG_ID, 0, 0x0);
 8003666:	2200      	movs	r2, #0
 8003668:	4611      	mov	r1, r2
 800366a:	2014      	movs	r0, #20
 800366c:	f7ff fa2a 	bl	8002ac4 <dwt_write16bitoffsetreg>
}
 8003670:	bd10      	pop	{r4, pc}
 8003672:	460c      	mov	r4, r1
        dwt_or8bitoffsetreg(SYS_CFG_ID, 0, (uint8_t)(SYS_CFG_FFEN_BIT_MASK));
 8003674:	2301      	movs	r3, #1
 8003676:	22ff      	movs	r2, #255	; 0xff
 8003678:	2100      	movs	r1, #0
 800367a:	2010      	movs	r0, #16
 800367c:	f7ff fb7c 	bl	8002d78 <dwt_modify8bitoffsetreg>
        dwt_write16bitoffsetreg(ADR_FILT_CFG_ID, 0, filtermode);
 8003680:	4622      	mov	r2, r4
 8003682:	2100      	movs	r1, #0
 8003684:	2014      	movs	r0, #20
 8003686:	f7ff fa1d 	bl	8002ac4 <dwt_write16bitoffsetreg>
 800368a:	e7f1      	b.n	8003670 <dwt_configureframefilter+0x1c>

0800368c <dwt_setpanid>:
{
 800368c:	b508      	push	{r3, lr}
 800368e:	4602      	mov	r2, r0
    dwt_write16bitoffsetreg(PANADR_ID, PANADR_PAN_ID_BYTE_OFFSET, panID);
 8003690:	2102      	movs	r1, #2
 8003692:	200c      	movs	r0, #12
 8003694:	f7ff fa16 	bl	8002ac4 <dwt_write16bitoffsetreg>
}
 8003698:	bd08      	pop	{r3, pc}

0800369a <dwt_setaddress16>:
{
 800369a:	b508      	push	{r3, lr}
 800369c:	4602      	mov	r2, r0
    dwt_write16bitoffsetreg(PANADR_ID, PANADR_SHORTADDR_BIT_OFFSET, shortAddress);
 800369e:	2100      	movs	r1, #0
 80036a0:	200c      	movs	r0, #12
 80036a2:	f7ff fa0f 	bl	8002ac4 <dwt_write16bitoffsetreg>
}
 80036a6:	bd08      	pop	{r3, pc}

080036a8 <dwt_check_dev_id>:
{
 80036a8:	b508      	push	{r3, lr}
    dev_id = dwt_readdevid();
 80036aa:	f7ff fbb9 	bl	8002e20 <dwt_readdevid>
    if (!((DWT_C0_PDOA_DEV_ID == dev_id) || (DWT_C0_DEV_ID == dev_id)))
 80036ae:	4b06      	ldr	r3, [pc, #24]	; (80036c8 <dwt_check_dev_id+0x20>)
 80036b0:	4298      	cmp	r0, r3
 80036b2:	d004      	beq.n	80036be <dwt_check_dev_id+0x16>
 80036b4:	3b10      	subs	r3, #16
 80036b6:	4298      	cmp	r0, r3
 80036b8:	d103      	bne.n	80036c2 <dwt_check_dev_id+0x1a>
    return DWT_SUCCESS;
 80036ba:	2000      	movs	r0, #0
}
 80036bc:	bd08      	pop	{r3, pc}
    return DWT_SUCCESS;
 80036be:	2000      	movs	r0, #0
 80036c0:	e7fc      	b.n	80036bc <dwt_check_dev_id+0x14>
        return DWT_ERROR;
 80036c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80036c6:	e7f9      	b.n	80036bc <dwt_check_dev_id+0x14>
 80036c8:	deca0312 	.word	0xdeca0312

080036cc <dwt_initialise>:
{
 80036cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036ce:	4604      	mov	r4, r0
    pdw3000local->dblbuffon = DBL_BUFF_OFF; // Double buffer mode off by default / clear the flag
 80036d0:	4b43      	ldr	r3, [pc, #268]	; (80037e0 <dwt_initialise+0x114>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	2200      	movs	r2, #0
 80036d6:	73da      	strb	r2, [r3, #15]
    pdw3000local->sleep_mode = DWT_RUNSAR;  // Configure RUN_SAR on wake by default as it is needed when running PGF_CAL
 80036d8:	2102      	movs	r1, #2
 80036da:	8219      	strh	r1, [r3, #16]
    pdw3000local->spicrc = 0;
 80036dc:	751a      	strb	r2, [r3, #20]
    pdw3000local->stsconfig = 0; //STS off
 80036de:	755a      	strb	r2, [r3, #21]
    pdw3000local->vBatP = 0;
 80036e0:	729a      	strb	r2, [r3, #10]
    pdw3000local->tempP = 0;
 80036e2:	72da      	strb	r2, [r3, #11]
    pdw3000local->cbTxDone = NULL;
 80036e4:	629a      	str	r2, [r3, #40]	; 0x28
    pdw3000local->cbRxOk = NULL;
 80036e6:	62da      	str	r2, [r3, #44]	; 0x2c
    pdw3000local->cbRxTo = NULL;
 80036e8:	631a      	str	r2, [r3, #48]	; 0x30
    pdw3000local->cbRxErr = NULL;
 80036ea:	635a      	str	r2, [r3, #52]	; 0x34
    pdw3000local->cbSPIRdy = NULL;
 80036ec:	63da      	str	r2, [r3, #60]	; 0x3c
    pdw3000local->cbSPIErr = NULL;
 80036ee:	639a      	str	r2, [r3, #56]	; 0x38
    if (dwt_check_dev_id()!=DWT_SUCCESS)
 80036f0:	f7ff ffda 	bl	80036a8 <dwt_check_dev_id>
 80036f4:	2800      	cmp	r0, #0
 80036f6:	d16f      	bne.n	80037d8 <dwt_initialise+0x10c>
 80036f8:	4606      	mov	r6, r0
    ldo_tune_lo = _dwt_otpread(LDOTUNELO_ADDRESS);
 80036fa:	2004      	movs	r0, #4
 80036fc:	f7ff fa36 	bl	8002b6c <_dwt_otpread>
 8003700:	4605      	mov	r5, r0
    ldo_tune_hi = _dwt_otpread(LDOTUNEHI_ADDRESS);
 8003702:	2005      	movs	r0, #5
 8003704:	f7ff fa32 	bl	8002b6c <_dwt_otpread>
 8003708:	4607      	mov	r7, r0
    pdw3000local->bias_tune = (_dwt_otpread(BIAS_TUNE_ADDRESS) >> 16) & BIAS_CTRL_BIAS_MASK;
 800370a:	200a      	movs	r0, #10
 800370c:	f7ff fa2e 	bl	8002b6c <_dwt_otpread>
 8003710:	4b33      	ldr	r3, [pc, #204]	; (80037e0 <dwt_initialise+0x114>)
 8003712:	681a      	ldr	r2, [r3, #0]
 8003714:	f3c0 4004 	ubfx	r0, r0, #16, #5
 8003718:	7210      	strb	r0, [r2, #8]
    if ((ldo_tune_lo != 0) && (ldo_tune_hi != 0) && (pdw3000local->bias_tune != 0))
 800371a:	b115      	cbz	r5, 8003722 <dwt_initialise+0x56>
 800371c:	b10f      	cbz	r7, 8003722 <dwt_initialise+0x56>
 800371e:	2800      	cmp	r0, #0
 8003720:	d136      	bne.n	8003790 <dwt_initialise+0xc4>
    if (_dwt_otpread(DGC_TUNE_ADDRESS) == DWT_DGC_CFG0)
 8003722:	2020      	movs	r0, #32
 8003724:	f7ff fa22 	bl	8002b6c <_dwt_otpread>
 8003728:	4b2e      	ldr	r3, [pc, #184]	; (80037e4 <dwt_initialise+0x118>)
 800372a:	4298      	cmp	r0, r3
 800372c:	d033      	beq.n	8003796 <dwt_initialise+0xca>
        pdw3000local->dgc_otp_set = DWT_DGC_LOAD_FROM_SW;
 800372e:	4b2c      	ldr	r3, [pc, #176]	; (80037e0 <dwt_initialise+0x114>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	2200      	movs	r2, #0
 8003734:	725a      	strb	r2, [r3, #9]
    if(mode & DWT_READ_OTP_PID)
 8003736:	f014 0f10 	tst.w	r4, #16
 800373a:	d131      	bne.n	80037a0 <dwt_initialise+0xd4>
    if (mode & DWT_READ_OTP_LID)
 800373c:	f014 0f20 	tst.w	r4, #32
 8003740:	d135      	bne.n	80037ae <dwt_initialise+0xe2>
    if (mode & DWT_READ_OTP_BAT)
 8003742:	f014 0f40 	tst.w	r4, #64	; 0x40
 8003746:	d139      	bne.n	80037bc <dwt_initialise+0xf0>
    if (mode & DWT_READ_OTP_TMP)
 8003748:	f014 0f80 	tst.w	r4, #128	; 0x80
 800374c:	d13d      	bne.n	80037ca <dwt_initialise+0xfe>
    if(pdw3000local->tempP == 0) //if the reference temperature has not been programmed in OTP (early eng samples) set to default value
 800374e:	4b24      	ldr	r3, [pc, #144]	; (80037e0 <dwt_initialise+0x114>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	7ada      	ldrb	r2, [r3, #11]
 8003754:	b90a      	cbnz	r2, 800375a <dwt_initialise+0x8e>
        pdw3000local->tempP = 0x85 ; //@temp of 20 deg
 8003756:	2285      	movs	r2, #133	; 0x85
 8003758:	72da      	strb	r2, [r3, #11]
    if(pdw3000local->vBatP == 0) //if the reference voltage has not been programmed in OTP (early eng samples) set to default value
 800375a:	7a9a      	ldrb	r2, [r3, #10]
 800375c:	b90a      	cbnz	r2, 8003762 <dwt_initialise+0x96>
        pdw3000local->vBatP = 0x74 ;  //@Vref of 3.0V
 800375e:	2274      	movs	r2, #116	; 0x74
 8003760:	729a      	strb	r2, [r3, #10]
    pdw3000local->otprev = (uint8_t) _dwt_otpread(OTPREV_ADDRESS);
 8003762:	201f      	movs	r0, #31
 8003764:	f7ff fa02 	bl	8002b6c <_dwt_otpread>
 8003768:	4c1d      	ldr	r4, [pc, #116]	; (80037e0 <dwt_initialise+0x114>)
 800376a:	6823      	ldr	r3, [r4, #0]
 800376c:	7358      	strb	r0, [r3, #13]
    pdw3000local->init_xtrim = _dwt_otpread(XTRIM_ADDRESS) & 0x7f;
 800376e:	201e      	movs	r0, #30
 8003770:	f7ff f9fc 	bl	8002b6c <_dwt_otpread>
 8003774:	6823      	ldr	r3, [r4, #0]
 8003776:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800377a:	7398      	strb	r0, [r3, #14]
    if(pdw3000local->init_xtrim == 0)
 800377c:	b908      	cbnz	r0, 8003782 <dwt_initialise+0xb6>
        pdw3000local->init_xtrim = 0x2E ; //set default value
 800377e:	222e      	movs	r2, #46	; 0x2e
 8003780:	739a      	strb	r2, [r3, #14]
    dwt_write8bitoffsetreg(XTAL_ID, 0, pdw3000local->init_xtrim);
 8003782:	7b9a      	ldrb	r2, [r3, #14]
 8003784:	2100      	movs	r1, #0
 8003786:	4818      	ldr	r0, [pc, #96]	; (80037e8 <dwt_initialise+0x11c>)
 8003788:	f7ff f9c4 	bl	8002b14 <dwt_write8bitoffsetreg>
} // end dwt_initialise()
 800378c:	4630      	mov	r0, r6
 800378e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        _dwt_prog_ldo_and_bias_tune();
 8003790:	f7ff fad8 	bl	8002d44 <_dwt_prog_ldo_and_bias_tune>
 8003794:	e7c5      	b.n	8003722 <dwt_initialise+0x56>
        pdw3000local->dgc_otp_set = DWT_DGC_LOAD_FROM_OTP;
 8003796:	4b12      	ldr	r3, [pc, #72]	; (80037e0 <dwt_initialise+0x114>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	2201      	movs	r2, #1
 800379c:	725a      	strb	r2, [r3, #9]
 800379e:	e7ca      	b.n	8003736 <dwt_initialise+0x6a>
        pdw3000local->partID = _dwt_otpread(PARTID_ADDRESS);
 80037a0:	4b0f      	ldr	r3, [pc, #60]	; (80037e0 <dwt_initialise+0x114>)
 80037a2:	681d      	ldr	r5, [r3, #0]
 80037a4:	2006      	movs	r0, #6
 80037a6:	f7ff f9e1 	bl	8002b6c <_dwt_otpread>
 80037aa:	6028      	str	r0, [r5, #0]
 80037ac:	e7c6      	b.n	800373c <dwt_initialise+0x70>
        pdw3000local->lotID = _dwt_otpread(LOTID_ADDRESS);
 80037ae:	4b0c      	ldr	r3, [pc, #48]	; (80037e0 <dwt_initialise+0x114>)
 80037b0:	681d      	ldr	r5, [r3, #0]
 80037b2:	2007      	movs	r0, #7
 80037b4:	f7ff f9da 	bl	8002b6c <_dwt_otpread>
 80037b8:	6068      	str	r0, [r5, #4]
 80037ba:	e7c2      	b.n	8003742 <dwt_initialise+0x76>
        pdw3000local->vBatP = (uint8_t)_dwt_otpread(VBAT_ADDRESS);
 80037bc:	2008      	movs	r0, #8
 80037be:	f7ff f9d5 	bl	8002b6c <_dwt_otpread>
 80037c2:	4b07      	ldr	r3, [pc, #28]	; (80037e0 <dwt_initialise+0x114>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	7298      	strb	r0, [r3, #10]
 80037c8:	e7be      	b.n	8003748 <dwt_initialise+0x7c>
        pdw3000local->tempP = (uint8_t)_dwt_otpread(VTEMP_ADDRESS);
 80037ca:	2009      	movs	r0, #9
 80037cc:	f7ff f9ce 	bl	8002b6c <_dwt_otpread>
 80037d0:	4b03      	ldr	r3, [pc, #12]	; (80037e0 <dwt_initialise+0x114>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	72d8      	strb	r0, [r3, #11]
 80037d6:	e7ba      	b.n	800374e <dwt_initialise+0x82>
        return DWT_ERROR;
 80037d8:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 80037dc:	e7d6      	b.n	800378c <dwt_initialise+0xc0>
 80037de:	bf00      	nop
 80037e0:	2000008c 	.word	0x2000008c
 80037e4:	10000240 	.word	0x10000240
 80037e8:	00090014 	.word	0x00090014

080037ec <dwt_setrxaftertxdelay>:
{
 80037ec:	b538      	push	{r3, r4, r5, lr}
 80037ee:	4604      	mov	r4, r0
    uint32_t val = dwt_read32bitreg(ACK_RESP_ID); // Read ACK_RESP_T_ID register
 80037f0:	4d07      	ldr	r5, [pc, #28]	; (8003810 <dwt_setrxaftertxdelay+0x24>)
 80037f2:	2100      	movs	r1, #0
 80037f4:	4628      	mov	r0, r5
 80037f6:	f7ff f9a2 	bl	8002b3e <dwt_read32bitoffsetreg>
    val &= (~ACK_RESP_W4R_TIM_BIT_MASK); // Clear the timer (19:0)
 80037fa:	0d00      	lsrs	r0, r0, #20
 80037fc:	0500      	lsls	r0, r0, #20
    val |= (rxDelayTime & ACK_RESP_W4R_TIM_BIT_MASK); // In UWB microseconds (e.g. turn the receiver on 20uus after TX)
 80037fe:	f3c4 0213 	ubfx	r2, r4, #0, #20
    dwt_write32bitoffsetreg(ACK_RESP_ID, 0, val);
 8003802:	4302      	orrs	r2, r0
 8003804:	2100      	movs	r1, #0
 8003806:	4628      	mov	r0, r5
 8003808:	f7ff f923 	bl	8002a52 <dwt_write32bitoffsetreg>
}
 800380c:	bd38      	pop	{r3, r4, r5, pc}
 800380e:	bf00      	nop
 8003810:	00010008 	.word	0x00010008

08003814 <dwt_checkidlerc>:
{
 8003814:	b508      	push	{r3, lr}
    uint32_t reg = ((uint32_t)dwt_read16bitoffsetreg(SYS_STATUS_ID, 2) << 16);
 8003816:	2102      	movs	r1, #2
 8003818:	2044      	movs	r0, #68	; 0x44
 800381a:	f7ff f9c5 	bl	8002ba8 <dwt_read16bitoffsetreg>
}
 800381e:	f3c0 2000 	ubfx	r0, r0, #8, #1
 8003822:	bd08      	pop	{r3, pc}

08003824 <dwt_setdelayedtrxtime>:
{
 8003824:	b508      	push	{r3, lr}
 8003826:	4602      	mov	r2, r0
    dwt_write32bitoffsetreg(DX_TIME_ID, 0, starttime); // Note: bit 0 of this register is ignored
 8003828:	2100      	movs	r1, #0
 800382a:	202c      	movs	r0, #44	; 0x2c
 800382c:	f7ff f911 	bl	8002a52 <dwt_write32bitoffsetreg>
} // end dwt_setdelayedtrxtime()
 8003830:	bd08      	pop	{r3, pc}
	...

08003834 <dwt_starttx>:
{
 8003834:	b508      	push	{r3, lr}
    if ((mode & DWT_START_TX_DELAYED) || (mode & DWT_START_TX_DLY_REF)
 8003836:	f010 0f1d 	tst.w	r0, #29
 800383a:	d06d      	beq.n	8003918 <dwt_starttx+0xe4>
        if(mode & DWT_START_TX_DELAYED) //delayed TX
 800383c:	f010 0f01 	tst.w	r0, #1
 8003840:	d01f      	beq.n	8003882 <dwt_starttx+0x4e>
            if(mode & DWT_RESPONSE_EXPECTED)
 8003842:	f010 0f02 	tst.w	r0, #2
 8003846:	d015      	beq.n	8003874 <dwt_starttx+0x40>
                dwt_writefastCMD(CMD_DTX_W4R);
 8003848:	2300      	movs	r3, #0
 800384a:	461a      	mov	r2, r3
 800384c:	4619      	mov	r1, r3
 800384e:	200d      	movs	r0, #13
 8003850:	f7ff f8f6 	bl	8002a40 <dwt_writetodevice>
        checkTxOK = dwt_read8bitoffsetreg(SYS_STATUS_ID, 3); // Read at offset 3 to get the upper 2 bytes out of 5
 8003854:	2103      	movs	r1, #3
 8003856:	2044      	movs	r0, #68	; 0x44
 8003858:	f7ff f9b7 	bl	8002bca <dwt_read8bitoffsetreg>
        if ((checkTxOK & (SYS_STATUS_HPDWARN_BIT_MASK>>24)) == 0) // Transmit Delayed Send set over Half a Period away.
 800385c:	f010 0f08 	tst.w	r0, #8
 8003860:	d151      	bne.n	8003906 <dwt_starttx+0xd2>
            sys_state = dwt_read32bitreg(SYS_STATE_LO_ID);
 8003862:	2100      	movs	r1, #0
 8003864:	4841      	ldr	r0, [pc, #260]	; (800396c <dwt_starttx+0x138>)
 8003866:	f7ff f96a 	bl	8002b3e <dwt_read32bitoffsetreg>
            if (sys_state == DW_SYS_STATE_TXERR)
 800386a:	f5b0 2f50 	cmp.w	r0, #851968	; 0xd0000
 800386e:	d041      	beq.n	80038f4 <dwt_starttx+0xc0>
                retval = DWT_SUCCESS ; // All okay
 8003870:	2000      	movs	r0, #0
} // end dwt_starttx()
 8003872:	bd08      	pop	{r3, pc}
                dwt_writefastCMD(CMD_DTX);
 8003874:	2300      	movs	r3, #0
 8003876:	461a      	mov	r2, r3
 8003878:	4619      	mov	r1, r3
 800387a:	2003      	movs	r0, #3
 800387c:	f7ff f8e0 	bl	8002a40 <dwt_writetodevice>
 8003880:	e7e8      	b.n	8003854 <dwt_starttx+0x20>
        else if (mode & DWT_START_TX_DLY_RS) //delayed TX WRT RX timestamp
 8003882:	f010 0f08 	tst.w	r0, #8
 8003886:	d010      	beq.n	80038aa <dwt_starttx+0x76>
            if(mode & DWT_RESPONSE_EXPECTED)
 8003888:	f010 0f02 	tst.w	r0, #2
 800388c:	d006      	beq.n	800389c <dwt_starttx+0x68>
                dwt_writefastCMD(CMD_DTX_RS_W4R);
 800388e:	2300      	movs	r3, #0
 8003890:	461a      	mov	r2, r3
 8003892:	4619      	mov	r1, r3
 8003894:	200f      	movs	r0, #15
 8003896:	f7ff f8d3 	bl	8002a40 <dwt_writetodevice>
 800389a:	e7db      	b.n	8003854 <dwt_starttx+0x20>
                dwt_writefastCMD(CMD_DTX_RS);
 800389c:	2300      	movs	r3, #0
 800389e:	461a      	mov	r2, r3
 80038a0:	4619      	mov	r1, r3
 80038a2:	2007      	movs	r0, #7
 80038a4:	f7ff f8cc 	bl	8002a40 <dwt_writetodevice>
 80038a8:	e7d4      	b.n	8003854 <dwt_starttx+0x20>
        else if (mode & DWT_START_TX_DLY_TS) //delayed TX WRT TX timestamp
 80038aa:	f010 0f10 	tst.w	r0, #16
 80038ae:	d010      	beq.n	80038d2 <dwt_starttx+0x9e>
            if(mode & DWT_RESPONSE_EXPECTED)
 80038b0:	f010 0f02 	tst.w	r0, #2
 80038b4:	d006      	beq.n	80038c4 <dwt_starttx+0x90>
                dwt_writefastCMD(CMD_DTX_TS_W4R);
 80038b6:	2300      	movs	r3, #0
 80038b8:	461a      	mov	r2, r3
 80038ba:	4619      	mov	r1, r3
 80038bc:	200e      	movs	r0, #14
 80038be:	f7ff f8bf 	bl	8002a40 <dwt_writetodevice>
 80038c2:	e7c7      	b.n	8003854 <dwt_starttx+0x20>
                dwt_writefastCMD(CMD_DTX_TS);
 80038c4:	2300      	movs	r3, #0
 80038c6:	461a      	mov	r2, r3
 80038c8:	4619      	mov	r1, r3
 80038ca:	2005      	movs	r0, #5
 80038cc:	f7ff f8b8 	bl	8002a40 <dwt_writetodevice>
 80038d0:	e7c0      	b.n	8003854 <dwt_starttx+0x20>
            if(mode & DWT_RESPONSE_EXPECTED)
 80038d2:	f010 0f02 	tst.w	r0, #2
 80038d6:	d006      	beq.n	80038e6 <dwt_starttx+0xb2>
                dwt_writefastCMD(CMD_DTX_REF_W4R);
 80038d8:	2300      	movs	r3, #0
 80038da:	461a      	mov	r2, r3
 80038dc:	4619      	mov	r1, r3
 80038de:	2010      	movs	r0, #16
 80038e0:	f7ff f8ae 	bl	8002a40 <dwt_writetodevice>
 80038e4:	e7b6      	b.n	8003854 <dwt_starttx+0x20>
                dwt_writefastCMD(CMD_DTX_REF);
 80038e6:	2300      	movs	r3, #0
 80038e8:	461a      	mov	r2, r3
 80038ea:	4619      	mov	r1, r3
 80038ec:	2009      	movs	r0, #9
 80038ee:	f7ff f8a7 	bl	8002a40 <dwt_writetodevice>
 80038f2:	e7af      	b.n	8003854 <dwt_starttx+0x20>
                dwt_writefastCMD(CMD_TXRXOFF);
 80038f4:	2300      	movs	r3, #0
 80038f6:	461a      	mov	r2, r3
 80038f8:	4619      	mov	r1, r3
 80038fa:	4618      	mov	r0, r3
 80038fc:	f7ff f8a0 	bl	8002a40 <dwt_writetodevice>
                retval = DWT_ERROR ; // Failed !
 8003900:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003904:	e7b5      	b.n	8003872 <dwt_starttx+0x3e>
            dwt_writefastCMD(CMD_TXRXOFF);
 8003906:	2300      	movs	r3, #0
 8003908:	461a      	mov	r2, r3
 800390a:	4619      	mov	r1, r3
 800390c:	4618      	mov	r0, r3
 800390e:	f7ff f897 	bl	8002a40 <dwt_writetodevice>
            retval = DWT_ERROR ; // Failed !
 8003912:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003916:	e7ac      	b.n	8003872 <dwt_starttx+0x3e>
    else if(mode & DWT_START_TX_CCA)
 8003918:	f010 0f20 	tst.w	r0, #32
 800391c:	d012      	beq.n	8003944 <dwt_starttx+0x110>
        if(mode & DWT_RESPONSE_EXPECTED)
 800391e:	f010 0f02 	tst.w	r0, #2
 8003922:	d007      	beq.n	8003934 <dwt_starttx+0x100>
            dwt_writefastCMD(CMD_CCA_TX_W4R);
 8003924:	2300      	movs	r3, #0
 8003926:	461a      	mov	r2, r3
 8003928:	4619      	mov	r1, r3
 800392a:	2011      	movs	r0, #17
 800392c:	f7ff f888 	bl	8002a40 <dwt_writetodevice>
    int retval = DWT_SUCCESS ;
 8003930:	2000      	movs	r0, #0
 8003932:	e79e      	b.n	8003872 <dwt_starttx+0x3e>
            dwt_writefastCMD(CMD_CCA_TX);
 8003934:	2300      	movs	r3, #0
 8003936:	461a      	mov	r2, r3
 8003938:	4619      	mov	r1, r3
 800393a:	200b      	movs	r0, #11
 800393c:	f7ff f880 	bl	8002a40 <dwt_writetodevice>
    int retval = DWT_SUCCESS ;
 8003940:	2000      	movs	r0, #0
 8003942:	e796      	b.n	8003872 <dwt_starttx+0x3e>
        if(mode & DWT_RESPONSE_EXPECTED)
 8003944:	f010 0f02 	tst.w	r0, #2
 8003948:	d007      	beq.n	800395a <dwt_starttx+0x126>
            dwt_writefastCMD(CMD_TX_W4R);
 800394a:	2300      	movs	r3, #0
 800394c:	461a      	mov	r2, r3
 800394e:	4619      	mov	r1, r3
 8003950:	200c      	movs	r0, #12
 8003952:	f7ff f875 	bl	8002a40 <dwt_writetodevice>
    int retval = DWT_SUCCESS ;
 8003956:	2000      	movs	r0, #0
 8003958:	e78b      	b.n	8003872 <dwt_starttx+0x3e>
            dwt_writefastCMD(CMD_TX);
 800395a:	2300      	movs	r3, #0
 800395c:	461a      	mov	r2, r3
 800395e:	4619      	mov	r1, r3
 8003960:	2001      	movs	r0, #1
 8003962:	f7ff f86d 	bl	8002a40 <dwt_writetodevice>
    int retval = DWT_SUCCESS ;
 8003966:	2000      	movs	r0, #0
 8003968:	e783      	b.n	8003872 <dwt_starttx+0x3e>
 800396a:	bf00      	nop
 800396c:	000f0030 	.word	0x000f0030

08003970 <dwt_rxenable>:
{
 8003970:	b510      	push	{r4, lr}
    if(mode == DWT_START_RX_IMMEDIATE)
 8003972:	4604      	mov	r4, r0
 8003974:	b170      	cbz	r0, 8003994 <dwt_rxenable+0x24>
        switch(mode & ~DWT_IDLE_ON_DLY_ERR)
 8003976:	f020 0302 	bic.w	r3, r0, #2
 800397a:	3b01      	subs	r3, #1
 800397c:	2b0f      	cmp	r3, #15
 800397e:	d848      	bhi.n	8003a12 <dwt_rxenable+0xa2>
 8003980:	e8df f003 	tbb	[pc, r3]
 8003984:	1f474710 	.word	0x1f474710
 8003988:	26474747 	.word	0x26474747
 800398c:	47474747 	.word	0x47474747
 8003990:	2d474747 	.word	0x2d474747
        dwt_writefastCMD(CMD_RX);
 8003994:	2300      	movs	r3, #0
 8003996:	461a      	mov	r2, r3
 8003998:	4619      	mov	r1, r3
 800399a:	2002      	movs	r0, #2
 800399c:	f7ff f850 	bl	8002a40 <dwt_writetodevice>
    return DWT_SUCCESS;
 80039a0:	4620      	mov	r0, r4
 80039a2:	e00d      	b.n	80039c0 <dwt_rxenable+0x50>
                dwt_writefastCMD(CMD_DRX);
 80039a4:	2300      	movs	r3, #0
 80039a6:	461a      	mov	r2, r3
 80039a8:	4619      	mov	r1, r3
 80039aa:	2004      	movs	r0, #4
 80039ac:	f7ff f848 	bl	8002a40 <dwt_writetodevice>
        temp1 = dwt_read8bitoffsetreg(SYS_STATUS_ID, 3); // Read 1 byte at offset 3 to get the 4th byte out of 5
 80039b0:	2103      	movs	r1, #3
 80039b2:	2044      	movs	r0, #68	; 0x44
 80039b4:	f7ff f909 	bl	8002bca <dwt_read8bitoffsetreg>
        if ((temp1 & (SYS_STATUS_HPDWARN_BIT_MASK >> 24)) != 0) // if delay has passed do immediate RX on unless DWT_IDLE_ON_DLY_ERR is true
 80039b8:	f010 0f08 	tst.w	r0, #8
 80039bc:	d116      	bne.n	80039ec <dwt_rxenable+0x7c>
    return DWT_SUCCESS;
 80039be:	2000      	movs	r0, #0
} // end dwt_rxenable()
 80039c0:	bd10      	pop	{r4, pc}
                dwt_writefastCMD(CMD_DRX_REF);
 80039c2:	2300      	movs	r3, #0
 80039c4:	461a      	mov	r2, r3
 80039c6:	4619      	mov	r1, r3
 80039c8:	200a      	movs	r0, #10
 80039ca:	f7ff f839 	bl	8002a40 <dwt_writetodevice>
            break;
 80039ce:	e7ef      	b.n	80039b0 <dwt_rxenable+0x40>
                dwt_writefastCMD(CMD_DRX_RS);
 80039d0:	2300      	movs	r3, #0
 80039d2:	461a      	mov	r2, r3
 80039d4:	4619      	mov	r1, r3
 80039d6:	2008      	movs	r0, #8
 80039d8:	f7ff f832 	bl	8002a40 <dwt_writetodevice>
            break;
 80039dc:	e7e8      	b.n	80039b0 <dwt_rxenable+0x40>
                dwt_writefastCMD(CMD_DRX_TS);
 80039de:	2300      	movs	r3, #0
 80039e0:	461a      	mov	r2, r3
 80039e2:	4619      	mov	r1, r3
 80039e4:	2006      	movs	r0, #6
 80039e6:	f7ff f82b 	bl	8002a40 <dwt_writetodevice>
            break;
 80039ea:	e7e1      	b.n	80039b0 <dwt_rxenable+0x40>
            dwt_writefastCMD(CMD_TXRXOFF);
 80039ec:	2300      	movs	r3, #0
 80039ee:	461a      	mov	r2, r3
 80039f0:	4619      	mov	r1, r3
 80039f2:	4618      	mov	r0, r3
 80039f4:	f7ff f824 	bl	8002a40 <dwt_writetodevice>
            if((mode & DWT_IDLE_ON_DLY_ERR) == 0) // if DWT_IDLE_ON_DLY_ERR not set then re-enable receiver
 80039f8:	f014 0f02 	tst.w	r4, #2
 80039fc:	d002      	beq.n	8003a04 <dwt_rxenable+0x94>
            return DWT_ERROR; // return warning indication
 80039fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003a02:	e7dd      	b.n	80039c0 <dwt_rxenable+0x50>
                dwt_writefastCMD(CMD_RX);
 8003a04:	2300      	movs	r3, #0
 8003a06:	461a      	mov	r2, r3
 8003a08:	4619      	mov	r1, r3
 8003a0a:	2002      	movs	r0, #2
 8003a0c:	f7ff f818 	bl	8002a40 <dwt_writetodevice>
 8003a10:	e7f5      	b.n	80039fe <dwt_rxenable+0x8e>
        switch(mode & ~DWT_IDLE_ON_DLY_ERR)
 8003a12:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003a16:	e7d3      	b.n	80039c0 <dwt_rxenable+0x50>

08003a18 <dwt_calcbandwidthadj>:
 *
 * output parameters:
 * returns: (uint8_t) The setting that was written to the PG_DELAY register (when calibration completed)
 */
uint8_t dwt_calcbandwidthadj(uint16_t target_count, int channel)
{
 8003a18:	b538      	push	{r3, r4, r5, lr}
 8003a1a:	4605      	mov	r5, r0
 8003a1c:	460c      	mov	r4, r1
    // Force system clock to FOSC/4 and TX clocks on and enable RF blocks
    dwt_force_clocks(FORCE_CLK_SYS_TX);
 8003a1e:	2001      	movs	r0, #1
 8003a20:	f7ff f860 	bl	8002ae4 <dwt_force_clocks>
    dwt_enable_rf_tx(channel, 0);
 8003a24:	2100      	movs	r1, #0
 8003a26:	4620      	mov	r0, r4
 8003a28:	f7ff f91e 	bl	8002c68 <dwt_enable_rf_tx>
    dwt_enable_rftx_blocks(channel);
 8003a2c:	4620      	mov	r0, r4
 8003a2e:	f7ff f955 	bl	8002cdc <dwt_enable_rftx_blocks>

    // Write to the PG target before kicking off PG auto-cal with given target value
    dwt_write16bitoffsetreg(PG_CAL_TARGET_ID, 0x0, target_count & PG_CAL_TARGET_TARGET_BIT_MASK);
 8003a32:	f3c5 020b 	ubfx	r2, r5, #0, #12
 8003a36:	2100      	movs	r1, #0
 8003a38:	480f      	ldr	r0, [pc, #60]	; (8003a78 <dwt_calcbandwidthadj+0x60>)
 8003a3a:	f7ff f843 	bl	8002ac4 <dwt_write16bitoffsetreg>
    // Run PG count cal
    dwt_or8bitoffsetreg(PGC_CTRL_ID, 0x0, (uint8_t)(PGC_CTRL_PGC_START_BIT_MASK | PGC_CTRL_PGC_AUTO_CAL_BIT_MASK));
 8003a3e:	2303      	movs	r3, #3
 8003a40:	22ff      	movs	r2, #255	; 0xff
 8003a42:	2100      	movs	r1, #0
 8003a44:	480d      	ldr	r0, [pc, #52]	; (8003a7c <dwt_calcbandwidthadj+0x64>)
 8003a46:	f7ff f997 	bl	8002d78 <dwt_modify8bitoffsetreg>
    // Wait for calibration to complete
    while (dwt_read8bitoffsetreg(PGC_CTRL_ID, 0) & PGC_CTRL_PGC_START_BIT_MASK);
 8003a4a:	2100      	movs	r1, #0
 8003a4c:	480b      	ldr	r0, [pc, #44]	; (8003a7c <dwt_calcbandwidthadj+0x64>)
 8003a4e:	f7ff f8bc 	bl	8002bca <dwt_read8bitoffsetreg>
 8003a52:	f010 0f01 	tst.w	r0, #1
 8003a56:	d1f8      	bne.n	8003a4a <dwt_calcbandwidthadj+0x32>

    //Restore clocks to AUTO and turn off TX blocks
    dwt_disable_rftx_blocks();
 8003a58:	f7ff f810 	bl	8002a7c <dwt_disable_rftx_blocks>
    dwt_disable_rf_tx(0);
 8003a5c:	2000      	movs	r0, #0
 8003a5e:	f7ff f817 	bl	8002a90 <dwt_disable_rf_tx>
    dwt_force_clocks(FORCE_CLK_AUTO);
 8003a62:	2005      	movs	r0, #5
 8003a64:	f7ff f83e 	bl	8002ae4 <dwt_force_clocks>

    return  (dwt_read8bitoffsetreg(TX_CTRL_HI_ID, 0) & TX_CTRL_HI_TX_PG_DELAY_BIT_MASK);
 8003a68:	2100      	movs	r1, #0
 8003a6a:	4805      	ldr	r0, [pc, #20]	; (8003a80 <dwt_calcbandwidthadj+0x68>)
 8003a6c:	f7ff f8ad 	bl	8002bca <dwt_read8bitoffsetreg>
}
 8003a70:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8003a74:	bd38      	pop	{r3, r4, r5, pc}
 8003a76:	bf00      	nop
 8003a78:	0008001c 	.word	0x0008001c
 8003a7c:	00080010 	.word	0x00080010
 8003a80:	0007001c 	.word	0x0007001c

08003a84 <dwt_configuretxrf>:
{
 8003a84:	b510      	push	{r4, lr}
 8003a86:	4604      	mov	r4, r0
    if (config->PGcount == 0) {
 8003a88:	8903      	ldrh	r3, [r0, #8]
 8003a8a:	b953      	cbnz	r3, 8003aa2 <dwt_configuretxrf+0x1e>
        dwt_write8bitoffsetreg(TX_CTRL_HI_ID, 0, config->PGdly);
 8003a8c:	7802      	ldrb	r2, [r0, #0]
 8003a8e:	2100      	movs	r1, #0
 8003a90:	480b      	ldr	r0, [pc, #44]	; (8003ac0 <dwt_configuretxrf+0x3c>)
 8003a92:	f7ff f83f 	bl	8002b14 <dwt_write8bitoffsetreg>
    dwt_write32bitreg(TX_POWER_ID, config->power);
 8003a96:	6862      	ldr	r2, [r4, #4]
 8003a98:	2100      	movs	r1, #0
 8003a9a:	480a      	ldr	r0, [pc, #40]	; (8003ac4 <dwt_configuretxrf+0x40>)
 8003a9c:	f7fe ffd9 	bl	8002a52 <dwt_write32bitoffsetreg>
}
 8003aa0:	bd10      	pop	{r4, pc}
        if (dwt_read8bitoffsetreg(CHAN_CTRL_ID, 0) & 0x1)
 8003aa2:	2100      	movs	r1, #0
 8003aa4:	4808      	ldr	r0, [pc, #32]	; (8003ac8 <dwt_configuretxrf+0x44>)
 8003aa6:	f7ff f890 	bl	8002bca <dwt_read8bitoffsetreg>
 8003aaa:	f010 0f01 	tst.w	r0, #1
 8003aae:	d104      	bne.n	8003aba <dwt_configuretxrf+0x36>
        uint8_t channel = 5;
 8003ab0:	2105      	movs	r1, #5
        dwt_calcbandwidthadj(config->PGcount, channel);
 8003ab2:	8920      	ldrh	r0, [r4, #8]
 8003ab4:	f7ff ffb0 	bl	8003a18 <dwt_calcbandwidthadj>
 8003ab8:	e7ed      	b.n	8003a96 <dwt_configuretxrf+0x12>
            channel = 9;
 8003aba:	2109      	movs	r1, #9
 8003abc:	e7f9      	b.n	8003ab2 <dwt_configuretxrf+0x2e>
 8003abe:	bf00      	nop
 8003ac0:	0007001c 	.word	0x0007001c
 8003ac4:	0001000c 	.word	0x0001000c
 8003ac8:	00010014 	.word	0x00010014

08003acc <decamutexon>:
 8003acc:	b510      	push	{r4, lr}
 8003ace:	f000 fc05 	bl	80042dc <port_GetEXT_IRQStatus>
 8003ad2:	4604      	mov	r4, r0
 8003ad4:	b908      	cbnz	r0, 8003ada <decamutexon+0xe>
 8003ad6:	4620      	mov	r0, r4
 8003ad8:	bd10      	pop	{r4, pc}
 8003ada:	f000 fbd0 	bl	800427e <port_DisableEXT_IRQ>
 8003ade:	e7fa      	b.n	8003ad6 <decamutexon+0xa>

08003ae0 <decamutexoff>:
 8003ae0:	b900      	cbnz	r0, 8003ae4 <decamutexoff+0x4>
 8003ae2:	4770      	bx	lr
 8003ae4:	b508      	push	{r3, lr}
 8003ae6:	f000 fbd1 	bl	800428c <port_EnableEXT_IRQ>
 8003aea:	bd08      	pop	{r3, pc}

08003aec <deca_usleep>:
 8003aec:	b508      	push	{r3, lr}
 8003aee:	f000 fb9f 	bl	8004230 <usleep>
 8003af2:	bd08      	pop	{r3, pc}

08003af4 <writetospiwithcrc>:
                uint16_t      headerLength,
                const uint8_t *headerBuffer,
                uint16_t      bodyLength,
                const uint8_t *bodyBuffer,
                uint8_t       crc8)
{
 8003af4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003af8:	4681      	mov	r9, r0
 8003afa:	4688      	mov	r8, r1
 8003afc:	4617      	mov	r7, r2
 8003afe:	461e      	mov	r6, r3
    decaIrqStatus_t  stat ;
    stat = decamutexon() ;
 8003b00:	f7ff ffe4 	bl	8003acc <decamutexon>
 8003b04:	4604      	mov	r4, r0
    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8003b06:	4815      	ldr	r0, [pc, #84]	; (8003b5c <writetospiwithcrc+0x68>)
 8003b08:	f002 fb17 	bl	800613a <HAL_SPI_GetState>
 8003b0c:	2801      	cmp	r0, #1
 8003b0e:	d1fa      	bne.n	8003b06 <writetospiwithcrc+0x12>

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, DW_NSS_Pin, GPIO_PIN_RESET); /**< Put chip select line low */
 8003b10:	2200      	movs	r2, #0
 8003b12:	2110      	movs	r1, #16
 8003b14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b18:	f001 f85e 	bl	8004bd8 <HAL_GPIO_WritePin>

    HAL_SPI_Transmit(&hspi1, (uint8_t *)headerBuffer, headerLength, 10);    /* Send header in polling mode */
 8003b1c:	4d0f      	ldr	r5, [pc, #60]	; (8003b5c <writetospiwithcrc+0x68>)
 8003b1e:	230a      	movs	r3, #10
 8003b20:	464a      	mov	r2, r9
 8003b22:	4641      	mov	r1, r8
 8003b24:	4628      	mov	r0, r5
 8003b26:	f001 ffbf 	bl	8005aa8 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi1, (uint8_t *)bodyBuffer, bodyLength, 10);        /* Send data in polling mode */
 8003b2a:	230a      	movs	r3, #10
 8003b2c:	463a      	mov	r2, r7
 8003b2e:	4631      	mov	r1, r6
 8003b30:	4628      	mov	r0, r5
 8003b32:	f001 ffb9 	bl	8005aa8 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi1, (uint8_t *)&crc8, 1, 10);      /* Send data in polling mode */
 8003b36:	230a      	movs	r3, #10
 8003b38:	2201      	movs	r2, #1
 8003b3a:	a908      	add	r1, sp, #32
 8003b3c:	4628      	mov	r0, r5
 8003b3e:	f001 ffb3 	bl	8005aa8 <HAL_SPI_Transmit>

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, DW_NSS_Pin, GPIO_PIN_SET); /**< Put chip select line high */
 8003b42:	2201      	movs	r2, #1
 8003b44:	2110      	movs	r1, #16
 8003b46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b4a:	f001 f845 	bl	8004bd8 <HAL_GPIO_WritePin>
    decamutexoff(stat);
 8003b4e:	4620      	mov	r0, r4
 8003b50:	f7ff ffc6 	bl	8003ae0 <decamutexoff>
    return 0;
} // end writetospiwithcrc()
 8003b54:	2000      	movs	r0, #0
 8003b56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003b5a:	bf00      	nop
 8003b5c:	20000348 	.word	0x20000348

08003b60 <writetospi>:
 */
int writetospi(uint16_t       headerLength,
               const uint8_t  *headerBuffer,
               uint16_t       bodyLength,
               const uint8_t  *bodyBuffer)
{
 8003b60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b64:	4607      	mov	r7, r0
 8003b66:	460e      	mov	r6, r1
 8003b68:	4614      	mov	r4, r2
 8003b6a:	4698      	mov	r8, r3
    decaIrqStatus_t  stat ;
    stat = decamutexon() ;
 8003b6c:	f7ff ffae 	bl	8003acc <decamutexon>
 8003b70:	4605      	mov	r5, r0

    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8003b72:	4813      	ldr	r0, [pc, #76]	; (8003bc0 <writetospi+0x60>)
 8003b74:	f002 fae1 	bl	800613a <HAL_SPI_GetState>
 8003b78:	2801      	cmp	r0, #1
 8003b7a:	d1fa      	bne.n	8003b72 <writetospi+0x12>

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, DW_NSS_Pin, GPIO_PIN_RESET); /**< Put chip select line low */
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	2110      	movs	r1, #16
 8003b80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b84:	f001 f828 	bl	8004bd8 <HAL_GPIO_WritePin>

    HAL_SPI_Transmit(&hspi1, (uint8_t *)headerBuffer, headerLength, HAL_MAX_DELAY); /* Send header in polling mode */
 8003b88:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003b8c:	463a      	mov	r2, r7
 8003b8e:	4631      	mov	r1, r6
 8003b90:	480b      	ldr	r0, [pc, #44]	; (8003bc0 <writetospi+0x60>)
 8003b92:	f001 ff89 	bl	8005aa8 <HAL_SPI_Transmit>

    if(bodyLength != 0)
 8003b96:	b95c      	cbnz	r4, 8003bb0 <writetospi+0x50>
        HAL_SPI_Transmit(&hspi1, (uint8_t *)bodyBuffer,   bodyLength, HAL_MAX_DELAY);     /* Send data in polling mode */

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, DW_NSS_Pin, GPIO_PIN_SET); /**< Put chip select line high */
 8003b98:	2201      	movs	r2, #1
 8003b9a:	2110      	movs	r1, #16
 8003b9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003ba0:	f001 f81a 	bl	8004bd8 <HAL_GPIO_WritePin>
    decamutexoff(stat);
 8003ba4:	4628      	mov	r0, r5
 8003ba6:	f7ff ff9b 	bl	8003ae0 <decamutexoff>
    return 0;
} // end writetospi()
 8003baa:	2000      	movs	r0, #0
 8003bac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        HAL_SPI_Transmit(&hspi1, (uint8_t *)bodyBuffer,   bodyLength, HAL_MAX_DELAY);     /* Send data in polling mode */
 8003bb0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003bb4:	4622      	mov	r2, r4
 8003bb6:	4641      	mov	r1, r8
 8003bb8:	4801      	ldr	r0, [pc, #4]	; (8003bc0 <writetospi+0x60>)
 8003bba:	f001 ff75 	bl	8005aa8 <HAL_SPI_Transmit>
 8003bbe:	e7eb      	b.n	8003b98 <writetospi+0x38>
 8003bc0:	20000348 	.word	0x20000348

08003bc4 <readfromspi>:
//#pragma GCC optimize ("O3")
int readfromspi(uint16_t  headerLength,
                uint8_t   *headerBuffer,
                uint16_t  readlength,
                uint8_t   *readBuffer)
{
 8003bc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003bc8:	4605      	mov	r5, r0
 8003bca:	460e      	mov	r6, r1
 8003bcc:	4691      	mov	r9, r2
 8003bce:	4698      	mov	r8, r3
    int i;

    decaIrqStatus_t  stat ;
    stat = decamutexon() ;
 8003bd0:	f7ff ff7c 	bl	8003acc <decamutexon>
 8003bd4:	4607      	mov	r7, r0

    /* Blocking: Check whether previous transfer has been finished */
    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8003bd6:	4814      	ldr	r0, [pc, #80]	; (8003c28 <readfromspi+0x64>)
 8003bd8:	f002 faaf 	bl	800613a <HAL_SPI_GetState>
 8003bdc:	2801      	cmp	r0, #1
 8003bde:	d1fa      	bne.n	8003bd6 <readfromspi+0x12>

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, DW_NSS_Pin, GPIO_PIN_RESET); /**< Put chip select line low */
 8003be0:	2200      	movs	r2, #0
 8003be2:	2110      	movs	r1, #16
 8003be4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003be8:	f000 fff6 	bl	8004bd8 <HAL_GPIO_WritePin>

    /* Send header */
    for(i=0; i<headerLength; i++)
 8003bec:	2400      	movs	r4, #0
 8003bee:	e007      	b.n	8003c00 <readfromspi+0x3c>
    {
        HAL_SPI_Transmit(&hspi1, (uint8_t*)&headerBuffer[i], 1, HAL_MAX_DELAY); //No timeout
 8003bf0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	1931      	adds	r1, r6, r4
 8003bf8:	480b      	ldr	r0, [pc, #44]	; (8003c28 <readfromspi+0x64>)
 8003bfa:	f001 ff55 	bl	8005aa8 <HAL_SPI_Transmit>
    for(i=0; i<headerLength; i++)
 8003bfe:	3401      	adds	r4, #1
 8003c00:	42a5      	cmp	r5, r4
 8003c02:	dcf5      	bgt.n	8003bf0 <readfromspi+0x2c>
//        }
//
//        (*readBuffer++) = hspi3.Instance->DR;  //copy data read form (MISO)
//    }

    HAL_SPI_Receive(&hspi1, readBuffer, readlength, 100);
 8003c04:	2364      	movs	r3, #100	; 0x64
 8003c06:	464a      	mov	r2, r9
 8003c08:	4641      	mov	r1, r8
 8003c0a:	4807      	ldr	r0, [pc, #28]	; (8003c28 <readfromspi+0x64>)
 8003c0c:	f002 f9c1 	bl	8005f92 <HAL_SPI_Receive>

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, DW_NSS_Pin, GPIO_PIN_SET); /**< Put chip select line high */
 8003c10:	2201      	movs	r2, #1
 8003c12:	2110      	movs	r1, #16
 8003c14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003c18:	f000 ffde 	bl	8004bd8 <HAL_GPIO_WritePin>

    decamutexoff(stat);
 8003c1c:	4638      	mov	r0, r7
 8003c1e:	f7ff ff5f 	bl	8003ae0 <decamutexoff>

    return 0;
} // end readfromspi()
 8003c22:	2000      	movs	r0, #0
 8003c24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003c28:	20000348 	.word	0x20000348

08003c2c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8003c2c:	b500      	push	{lr}
 8003c2e:	b083      	sub	sp, #12

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003c30:	4b0a      	ldr	r3, [pc, #40]	; (8003c5c <MX_DMA_Init+0x30>)
 8003c32:	695a      	ldr	r2, [r3, #20]
 8003c34:	f042 0201 	orr.w	r2, r2, #1
 8003c38:	615a      	str	r2, [r3, #20]
 8003c3a:	695b      	ldr	r3, [r3, #20]
 8003c3c:	f003 0301 	and.w	r3, r3, #1
 8003c40:	9301      	str	r3, [sp, #4]
 8003c42:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8003c44:	2200      	movs	r2, #0
 8003c46:	4611      	mov	r1, r2
 8003c48:	200e      	movs	r0, #14
 8003c4a:	f000 fd45 	bl	80046d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8003c4e:	200e      	movs	r0, #14
 8003c50:	f000 fd7a 	bl	8004748 <HAL_NVIC_EnableIRQ>

}
 8003c54:	b003      	add	sp, #12
 8003c56:	f85d fb04 	ldr.w	pc, [sp], #4
 8003c5a:	bf00      	nop
 8003c5c:	40021000 	.word	0x40021000

08003c60 <ds_twr_responder_sts>:
 * @param  none
 *
 * @return none
 */
int ds_twr_responder_sts(void)
{
 8003c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c64:	b08f      	sub	sp, #60	; 0x3c
    uint8_t messageFlag = 0; /* Used to track whether STS count should be reinitialised or not */
    /* Display application name on UART. */


    /* Reset DW IC */
    my_reset_DWIC(); /* Target specific drive of RSTn line into DW IC low for a period. */
 8003c66:	f000 fb41 	bl	80042ec <my_reset_DWIC>


    while (!dwt_checkidlerc()) /* Need to make sure DW IC is in IDLE_RC before proceeding */
 8003c6a:	f7ff fdd3 	bl	8003814 <dwt_checkidlerc>
 8003c6e:	2800      	cmp	r0, #0
 8003c70:	d0fb      	beq.n	8003c6a <ds_twr_responder_sts+0xa>
    { };

    /* ====> Start timer from STM <==== */
    //HAL_TIM_Base_Start(&htim2);

    if (dwt_initialise(DWT_DW_IDLE) == DWT_ERROR)
 8003c72:	2001      	movs	r0, #1
 8003c74:	f7ff fd2a 	bl	80036cc <dwt_initialise>
 8003c78:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8003c7c:	d100      	bne.n	8003c80 <ds_twr_responder_sts+0x20>
    {
        while (1)
 8003c7e:	e7fe      	b.n	8003c7e <ds_twr_responder_sts+0x1e>
        { };
    }

    if(dwt_configure(&config_options)) /* if the dwt_configure returns DWT_ERROR either the PLL or RX calibration has failed the host should reset the device */
 8003c80:	48c3      	ldr	r0, [pc, #780]	; (8003f90 <ds_twr_responder_sts+0x330>)
 8003c82:	f7ff fa75 	bl	8003170 <dwt_configure>
 8003c86:	b100      	cbz	r0, 8003c8a <ds_twr_responder_sts+0x2a>
    {
        while (1)
 8003c88:	e7fe      	b.n	8003c88 <ds_twr_responder_sts+0x28>
        { };
    }

    /* Configure the TX spectrum parameters (power, PG delay and PG count) */
    if(config_options.chan == 5)
 8003c8a:	4bc1      	ldr	r3, [pc, #772]	; (8003f90 <ds_twr_responder_sts+0x330>)
 8003c8c:	781b      	ldrb	r3, [r3, #0]
 8003c8e:	2b05      	cmp	r3, #5
 8003c90:	d029      	beq.n	8003ce6 <ds_twr_responder_sts+0x86>
    {
        dwt_configuretxrf(&txconfig_options);
    }
    else
    {
        dwt_configuretxrf(&txconfig_options_ch9);
 8003c92:	48c0      	ldr	r0, [pc, #768]	; (8003f94 <ds_twr_responder_sts+0x334>)
 8003c94:	f7ff fef6 	bl	8003a84 <dwt_configuretxrf>
    }

    /* ====> Enable frame filtering <==== */
    dwt_configureframefilter(DWT_FF_ENABLE_802_15_4, DWT_FF_DATA_EN);
 8003c98:	2102      	movs	r1, #2
 8003c9a:	4608      	mov	r0, r1
 8003c9c:	f7ff fcda 	bl	8003654 <dwt_configureframefilter>
    dwt_setpanid(0xDECA);
 8003ca0:	f64d 60ca 	movw	r0, #57034	; 0xdeca
 8003ca4:	f7ff fcf2 	bl	800368c <dwt_setpanid>
    dwt_setaddress16(0x242);
 8003ca8:	f240 2042 	movw	r0, #578	; 0x242
 8003cac:	f7ff fcf5 	bl	800369a <dwt_setaddress16>

    /* Apply default antenna delay value. See NOTE 2 below. */
    dwt_setrxantennadelay(RX_ANT_DLY);
 8003cb0:	f244 006a 	movw	r0, #16490	; 0x406a
 8003cb4:	f7ff f9f6 	bl	80030a4 <dwt_setrxantennadelay>
    dwt_settxantennadelay(TX_ANT_DLY);
 8003cb8:	f244 006a 	movw	r0, #16490	; 0x406a
 8003cbc:	f7ff f9fa 	bl	80030b4 <dwt_settxantennadelay>


    //Delay between the response frame and final frame
    dwt_setrxaftertxdelay(RESP_TX_TO_FINAL_RX_DLY_UUS);
 8003cc0:	f240 40e7 	movw	r0, #1255	; 0x4e7
 8003cc4:	f7ff fd92 	bl	80037ec <dwt_setrxaftertxdelay>
    uint8_t messageFlag = 0; /* Used to track whether STS count should be reinitialised or not */
 8003cc8:	2400      	movs	r4, #0
    uint8_t loopCount = 0;
 8003cca:	4625      	mov	r5, r4
    {
        /*
         * Set CP encryption key and IV (nonce).
         * See Note 16 below.
         */
        if (!messageFlag)
 8003ccc:	2c00      	cmp	r4, #0
 8003cce:	f040 80ab 	bne.w	8003e28 <ds_twr_responder_sts+0x1c8>
        {
            if (!loopCount)
 8003cd2:	b965      	cbnz	r5, 8003cee <ds_twr_responder_sts+0x8e>
            {
                /*
                 * On first loop, configure the STS key & IV, then load them.
                 */
                dwt_configurestskey(&cp_key);
 8003cd4:	48b0      	ldr	r0, [pc, #704]	; (8003f98 <ds_twr_responder_sts+0x338>)
 8003cd6:	f7ff f8a9 	bl	8002e2c <dwt_configurestskey>
                dwt_configurestsiv(&cp_iv);
 8003cda:	48b0      	ldr	r0, [pc, #704]	; (8003f9c <ds_twr_responder_sts+0x33c>)
 8003cdc:	f7ff f8c6 	bl	8002e6c <dwt_configurestsiv>
                dwt_configurestsloadiv();
 8003ce0:	f7ff f8e4 	bl	8002eac <dwt_configurestsloadiv>
 8003ce4:	e0a0      	b.n	8003e28 <ds_twr_responder_sts+0x1c8>
        dwt_configuretxrf(&txconfig_options);
 8003ce6:	48ae      	ldr	r0, [pc, #696]	; (8003fa0 <ds_twr_responder_sts+0x340>)
 8003ce8:	f7ff fecc 	bl	8003a84 <dwt_configuretxrf>
 8003cec:	e7d4      	b.n	8003c98 <ds_twr_responder_sts+0x38>
            else
            {
                /*
                 * On subsequent loops, we only need to reload the lower 32 bits of STS IV.
                 */
                dwt_writetodevice(STS_IV0_ID, 0, 4, (uint8_t *)&cp_iv);
 8003cee:	4bab      	ldr	r3, [pc, #684]	; (8003f9c <ds_twr_responder_sts+0x33c>)
 8003cf0:	2204      	movs	r2, #4
 8003cf2:	2100      	movs	r1, #0
 8003cf4:	48ab      	ldr	r0, [pc, #684]	; (8003fa4 <ds_twr_responder_sts+0x344>)
 8003cf6:	f7fe fea3 	bl	8002a40 <dwt_writetodevice>
                dwt_configurestsloadiv();
 8003cfa:	f7ff f8d7 	bl	8002eac <dwt_configurestsloadiv>
 8003cfe:	e093      	b.n	8003e28 <ds_twr_responder_sts+0x1c8>
			/* Activate reception immediately. */
			dwt_rxenable(DWT_START_RX_IMMEDIATE);
        }

        /* Poll for reception of a frame or error/timeout. See NOTE 6 below. */
        while (!((status_reg = dwt_read32bitreg(SYS_STATUS_ID)) & (SYS_STATUS_RXFCG_BIT_MASK | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR)))
 8003d00:	2100      	movs	r1, #0
 8003d02:	2044      	movs	r0, #68	; 0x44
 8003d04:	f7fe ff1b 	bl	8002b3e <dwt_read32bitoffsetreg>
 8003d08:	4ba7      	ldr	r3, [pc, #668]	; (8003fa8 <ds_twr_responder_sts+0x348>)
 8003d0a:	6018      	str	r0, [r3, #0]
 8003d0c:	4ba7      	ldr	r3, [pc, #668]	; (8003fac <ds_twr_responder_sts+0x34c>)
 8003d0e:	4003      	ands	r3, r0
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d0f5      	beq.n	8003d00 <ds_twr_responder_sts+0xa0>
        { };

        goodSts = dwt_readstsquality(&stsQual);
 8003d14:	f10d 0036 	add.w	r0, sp, #54	; 0x36
 8003d18:	f7ff fc20 	bl	800355c <dwt_readstsquality>

        /*
         * Check for a good frame and STS count.
         */
        if ((status_reg & SYS_STATUS_RXFCG_BIT_MASK) && (goodSts >= 0))
 8003d1c:	4ba2      	ldr	r3, [pc, #648]	; (8003fa8 <ds_twr_responder_sts+0x348>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8003d24:	f000 8156 	beq.w	8003fd4 <ds_twr_responder_sts+0x374>
 8003d28:	2800      	cmp	r0, #0
 8003d2a:	f2c0 8153 	blt.w	8003fd4 <ds_twr_responder_sts+0x374>
        {
            uint32_t frame_len;

            /* Clear good RX frame event in the DW IC status register. */
            dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_RXFCG_BIT_MASK);
 8003d2e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003d32:	2100      	movs	r1, #0
 8003d34:	2044      	movs	r0, #68	; 0x44
 8003d36:	f7fe fe8c 	bl	8002a52 <dwt_write32bitoffsetreg>

            /* A frame has been received, read it into the local buffer. */
            frame_len = dwt_read32bitreg(RX_FINFO_ID) & RXFLEN_MASK;
 8003d3a:	2100      	movs	r1, #0
 8003d3c:	204c      	movs	r0, #76	; 0x4c
 8003d3e:	f7fe fefe 	bl	8002b3e <dwt_read32bitoffsetreg>
 8003d42:	f000 017f 	and.w	r1, r0, #127	; 0x7f
            if (frame_len <= sizeof(rx_buffer))
 8003d46:	2940      	cmp	r1, #64	; 0x40
 8003d48:	f200 8115 	bhi.w	8003f76 <ds_twr_responder_sts+0x316>
            {
            	//test_run_info((unsigned char *)"Jestem2");
            	dwt_readrxdata(rx_buffer, frame_len, 0);
 8003d4c:	4e98      	ldr	r6, [pc, #608]	; (8003fb0 <ds_twr_responder_sts+0x350>)
 8003d4e:	2200      	movs	r2, #0
 8003d50:	4630      	mov	r0, r6
 8003d52:	f7ff fbd1 	bl	80034f8 <dwt_readrxdata>

                /* Check that the frame is a poll sent by "SS TWR initiator STS" example.
                 * As the sequence number field of the frame is not relevant, it is cleared to simplify the validation of the frame. */
                rx_buffer[ALL_MSG_SN_IDX] = 0;
 8003d56:	2300      	movs	r3, #0
 8003d58:	70b3      	strb	r3, [r6, #2]
                if (memcmp(rx_buffer, rx_poll_msg, ALL_MSG_COMMON_LEN) == 0)
 8003d5a:	220a      	movs	r2, #10
 8003d5c:	4995      	ldr	r1, [pc, #596]	; (8003fb4 <ds_twr_responder_sts+0x354>)
 8003d5e:	4630      	mov	r0, r6
 8003d60:	f7fc facc 	bl	80002fc <memcmp>
 8003d64:	2800      	cmp	r0, #0
 8003d66:	d168      	bne.n	8003e3a <ds_twr_responder_sts+0x1da>
                {
                    uint32_t resp_tx_time;
                    int ret;

                    /* Retrieve poll reception timestamp. */
                    poll_rx_ts = get_rx_timestamp_u64();
 8003d68:	f000 fbc2 	bl	80044f0 <get_rx_timestamp_u64>
 8003d6c:	f8df 8260 	ldr.w	r8, [pc, #608]	; 8003fd0 <ds_twr_responder_sts+0x370>
 8003d70:	e9c8 0100 	strd	r0, r1, [r8]

                    resp_tx_time = (poll_rx_ts                               /* Received timestamp value */
                            + ((POLL_RX_TO_RESP_TX_DLY_UUS                   /* Set delay time */
                                    + get_rx_delay_time_data_rate()          /* Added delay time for data rate set */
 8003d74:	f000 fb98 	bl	80044a8 <get_rx_delay_time_data_rate>
 8003d78:	4606      	mov	r6, r0
                                    + get_rx_delay_time_txpreamble()         /* Added delay for TX preamble length */
 8003d7a:	f000 fb73 	bl	8004464 <get_rx_delay_time_txpreamble>
 8003d7e:	1833      	adds	r3, r6, r0
                                    + ((1<<(config_options.stsLength+2))*8)) /* Added delay for STS length */
 8003d80:	4a83      	ldr	r2, [pc, #524]	; (8003f90 <ds_twr_responder_sts+0x330>)
 8003d82:	7b56      	ldrb	r6, [r2, #13]
 8003d84:	1cb2      	adds	r2, r6, #2
 8003d86:	2608      	movs	r6, #8
 8003d88:	4096      	lsls	r6, r2
 8003d8a:	4433      	add	r3, r6
                                    * UUS_TO_DWT_TIME)) >> 8;                /* Converted to time units for chip */
 8003d8c:	f64f 129a 	movw	r2, #63898	; 0xf99a
 8003d90:	4e89      	ldr	r6, [pc, #548]	; (8003fb8 <ds_twr_responder_sts+0x358>)
 8003d92:	fb02 6603 	mla	r6, r2, r3, r6
 8003d96:	2700      	movs	r7, #0
                            + ((POLL_RX_TO_RESP_TX_DLY_UUS                   /* Set delay time */
 8003d98:	f8d8 2000 	ldr.w	r2, [r8]
 8003d9c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8003da0:	18b6      	adds	r6, r6, r2
 8003da2:	f143 0300 	adc.w	r3, r3, #0
                                    * UUS_TO_DWT_TIME)) >> 8;                /* Converted to time units for chip */
 8003da6:	0a36      	lsrs	r6, r6, #8
 8003da8:	ea46 6603 	orr.w	r6, r6, r3, lsl #24
                    dwt_setdelayedtrxtime(resp_tx_time);
 8003dac:	4630      	mov	r0, r6
 8003dae:	f7ff fd39 	bl	8003824 <dwt_setdelayedtrxtime>

                    /* Response TX timestamp is the transmission time we programmed plus the antenna delay. */
                    resp_tx_ts = (((uint64_t)(resp_tx_time & 0xFFFFFFFEUL)) << 8) + TX_ANT_DLY;
 8003db2:	0233      	lsls	r3, r6, #8
 8003db4:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8003db8:	f023 0301 	bic.w	r3, r3, #1
 8003dbc:	0e36      	lsrs	r6, r6, #24
 8003dbe:	f244 026a 	movw	r2, #16490	; 0x406a
 8003dc2:	189b      	adds	r3, r3, r2
 8003dc4:	f146 0600 	adc.w	r6, r6, #0
 8003dc8:	4a7c      	ldr	r2, [pc, #496]	; (8003fbc <ds_twr_responder_sts+0x35c>)
 8003dca:	6013      	str	r3, [r2, #0]
 8003dcc:	6056      	str	r6, [r2, #4]

                    /* Write and send the response message. See NOTE 9 below. */
                    tx_resp_msg[ALL_MSG_SN_IDX] = frame_seq_nb;
 8003dce:	4e7c      	ldr	r6, [pc, #496]	; (8003fc0 <ds_twr_responder_sts+0x360>)
 8003dd0:	4b7c      	ldr	r3, [pc, #496]	; (8003fc4 <ds_twr_responder_sts+0x364>)
 8003dd2:	781b      	ldrb	r3, [r3, #0]
 8003dd4:	70b3      	strb	r3, [r6, #2]
                    dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_TXFRS_BIT_MASK);
 8003dd6:	2280      	movs	r2, #128	; 0x80
 8003dd8:	4639      	mov	r1, r7
 8003dda:	2044      	movs	r0, #68	; 0x44
 8003ddc:	f7fe fe39 	bl	8002a52 <dwt_write32bitoffsetreg>
                    dwt_writetxdata(sizeof(tx_resp_msg), tx_resp_msg, 0); /* Zero offset in TX buffer. */
 8003de0:	463a      	mov	r2, r7
 8003de2:	4631      	mov	r1, r6
 8003de4:	200c      	movs	r0, #12
 8003de6:	f7ff f96f 	bl	80030c8 <dwt_writetxdata>
                    dwt_writetxfctrl(sizeof(tx_resp_msg), 0, 1); /* Zero offset in TX buffer, ranging. */
 8003dea:	2201      	movs	r2, #1
 8003dec:	4639      	mov	r1, r7
 8003dee:	200c      	movs	r0, #12
 8003df0:	f7ff f996 	bl	8003120 <dwt_writetxfctrl>

                    dwt_setrxaftertxdelay(100); // receiver can be delayed as Final message will not come immediately
 8003df4:	2064      	movs	r0, #100	; 0x64
 8003df6:	f7ff fcf9 	bl	80037ec <dwt_setrxaftertxdelay>
                    ret = dwt_starttx(DWT_START_TX_DELAYED | DWT_RESPONSE_EXPECTED);
 8003dfa:	2003      	movs	r0, #3
 8003dfc:	f7ff fd1a 	bl	8003834 <dwt_starttx>

                    if (ret == DWT_SUCCESS)
 8003e00:	2800      	cmp	r0, #0
 8003e02:	f47f af63 	bne.w	8003ccc <ds_twr_responder_sts+0x6c>
                    {
                        /* Poll DW IC until TX frame sent event set. See NOTE 6 below. */
                        while (!(dwt_read32bitreg(SYS_STATUS_ID) & SYS_STATUS_TXFRS_BIT_MASK))
 8003e06:	2100      	movs	r1, #0
 8003e08:	2044      	movs	r0, #68	; 0x44
 8003e0a:	f7fe fe98 	bl	8002b3e <dwt_read32bitoffsetreg>
 8003e0e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8003e12:	d0f8      	beq.n	8003e06 <ds_twr_responder_sts+0x1a6>
                        { };

                        /* Clear TXFRS event. */
                        dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_TXFRS_BIT_MASK);
 8003e14:	2280      	movs	r2, #128	; 0x80
 8003e16:	2100      	movs	r1, #0
 8003e18:	2044      	movs	r0, #68	; 0x44
 8003e1a:	f7fe fe1a 	bl	8002a52 <dwt_write32bitoffsetreg>

                        /* Increment frame sequence number after transmission of the poll message (modulo 256). */
                        frame_seq_nb++;
 8003e1e:	4a69      	ldr	r2, [pc, #420]	; (8003fc4 <ds_twr_responder_sts+0x364>)
 8003e20:	7813      	ldrb	r3, [r2, #0]
 8003e22:	3301      	adds	r3, #1
 8003e24:	7013      	strb	r3, [r2, #0]

                        messageFlag = 1;
 8003e26:	2401      	movs	r4, #1
        if(!messageFlag)  // Responder will enable the receive when waiting for Poll message,
 8003e28:	2c00      	cmp	r4, #0
 8003e2a:	f47f af69 	bne.w	8003d00 <ds_twr_responder_sts+0xa0>
            loopCount++;  // increment the loop count only when starting ranging exchange
 8003e2e:	3501      	adds	r5, #1
 8003e30:	b2ed      	uxtb	r5, r5
			dwt_rxenable(DWT_START_RX_IMMEDIATE);
 8003e32:	2000      	movs	r0, #0
 8003e34:	f7ff fd9c 	bl	8003970 <dwt_rxenable>
 8003e38:	e762      	b.n	8003d00 <ds_twr_responder_sts+0xa0>
                    }
                }
                else if (memcmp(rx_buffer, rx_final_msg, ALL_MSG_COMMON_LEN) == 0)
 8003e3a:	220a      	movs	r2, #10
 8003e3c:	4962      	ldr	r1, [pc, #392]	; (8003fc8 <ds_twr_responder_sts+0x368>)
 8003e3e:	485c      	ldr	r0, [pc, #368]	; (8003fb0 <ds_twr_responder_sts+0x350>)
 8003e40:	f7fc fa5c 	bl	80002fc <memcmp>
 8003e44:	b128      	cbz	r0, 8003e52 <ds_twr_responder_sts+0x1f2>
                    Sleep(RNG_DELAY_MS - 10);  //start couple of ms earlier
                    messageFlag = 0;
                }
                else
                {
                    errors[BAD_FRAME_ERR_IDX] += 1;
 8003e46:	4a61      	ldr	r2, [pc, #388]	; (8003fcc <ds_twr_responder_sts+0x36c>)
 8003e48:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8003e4a:	3301      	adds	r3, #1
 8003e4c:	6293      	str	r3, [r2, #40]	; 0x28
                    /*
                     * If any error occurs, we can reset the STS count back to default value.
                     */
                    messageFlag = 0;
 8003e4e:	2400      	movs	r4, #0
 8003e50:	e73f      	b.n	8003cd2 <ds_twr_responder_sts+0x72>
                    memcpy(payload_buf, &rx_buffer[22], 24);
 8003e52:	4f57      	ldr	r7, [pc, #348]	; (8003fb0 <ds_twr_responder_sts+0x350>)
 8003e54:	ac07      	add	r4, sp, #28
 8003e56:	f8d7 0016 	ldr.w	r0, [r7, #22]
 8003e5a:	f8d7 101a 	ldr.w	r1, [r7, #26]
 8003e5e:	f8d7 201e 	ldr.w	r2, [r7, #30]
 8003e62:	f8d7 3022 	ldr.w	r3, [r7, #34]	; 0x22
 8003e66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003e68:	f8d7 0026 	ldr.w	r0, [r7, #38]	; 0x26
 8003e6c:	f8d7 102a 	ldr.w	r1, [r7, #42]	; 0x2a
 8003e70:	c403      	stmia	r4!, {r0, r1}
                    memset(&rx_buffer[22], 0, 24);
 8003e72:	2400      	movs	r4, #0
 8003e74:	f8c7 4016 	str.w	r4, [r7, #22]
 8003e78:	f8c7 401a 	str.w	r4, [r7, #26]
 8003e7c:	f8c7 401e 	str.w	r4, [r7, #30]
 8003e80:	f8c7 4022 	str.w	r4, [r7, #34]	; 0x22
 8003e84:	f8c7 4026 	str.w	r4, [r7, #38]	; 0x26
 8003e88:	f8c7 402a 	str.w	r4, [r7, #42]	; 0x2a
                    resp_tx_ts = get_tx_timestamp_u64();
 8003e8c:	f000 fb16 	bl	80044bc <get_tx_timestamp_u64>
 8003e90:	f8df 8128 	ldr.w	r8, [pc, #296]	; 8003fbc <ds_twr_responder_sts+0x35c>
 8003e94:	e9c8 0100 	strd	r0, r1, [r8]
                    final_rx_ts = get_rx_timestamp_u64();
 8003e98:	f000 fb2a 	bl	80044f0 <get_rx_timestamp_u64>
 8003e9c:	4606      	mov	r6, r0
                    final_msg_get_ts(&rx_buffer[FINAL_MSG_POLL_TX_TS_IDX], &poll_tx_ts);
 8003e9e:	a904      	add	r1, sp, #16
 8003ea0:	f107 000a 	add.w	r0, r7, #10
 8003ea4:	f000 fb3e 	bl	8004524 <final_msg_get_ts>
                    final_msg_get_ts(&rx_buffer[FINAL_MSG_RESP_RX_TS_IDX], &resp_rx_ts);
 8003ea8:	a905      	add	r1, sp, #20
 8003eaa:	f107 000e 	add.w	r0, r7, #14
 8003eae:	f000 fb39 	bl	8004524 <final_msg_get_ts>
                    final_msg_get_ts(&rx_buffer[FINAL_MSG_FINAL_TX_TS_IDX], &final_tx_ts);
 8003eb2:	a906      	add	r1, sp, #24
 8003eb4:	f107 0012 	add.w	r0, r7, #18
 8003eb8:	f000 fb34 	bl	8004524 <final_msg_get_ts>
                    poll_rx_ts_32 = (uint32_t)poll_rx_ts;
 8003ebc:	4b44      	ldr	r3, [pc, #272]	; (8003fd0 <ds_twr_responder_sts+0x370>)
 8003ebe:	f8d3 a000 	ldr.w	sl, [r3]
                    resp_tx_ts_32 = (uint32_t)resp_tx_ts;
 8003ec2:	f8d8 8000 	ldr.w	r8, [r8]
                    Ra = (double)(resp_rx_ts - poll_tx_ts);
 8003ec6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8003eca:	9804      	ldr	r0, [sp, #16]
 8003ecc:	eba9 0000 	sub.w	r0, r9, r0
 8003ed0:	f7fe f922 	bl	8002118 <__aeabi_ui2d>
 8003ed4:	e9cd 0100 	strd	r0, r1, [sp]
                    Rb = (double)(final_rx_ts_32 - resp_tx_ts_32);
 8003ed8:	eba6 0008 	sub.w	r0, r6, r8
 8003edc:	f7fe f91c 	bl	8002118 <__aeabi_ui2d>
 8003ee0:	4606      	mov	r6, r0
 8003ee2:	460f      	mov	r7, r1
                    Da = (double)(final_tx_ts - resp_rx_ts);
 8003ee4:	9806      	ldr	r0, [sp, #24]
 8003ee6:	eba0 0009 	sub.w	r0, r0, r9
 8003eea:	f7fe f915 	bl	8002118 <__aeabi_ui2d>
 8003eee:	e9cd 0102 	strd	r0, r1, [sp, #8]
                    Db = (double)(resp_tx_ts_32 - poll_rx_ts_32);
 8003ef2:	eba8 000a 	sub.w	r0, r8, sl
 8003ef6:	f7fe f90f 	bl	8002118 <__aeabi_ui2d>
 8003efa:	4682      	mov	sl, r0
 8003efc:	468b      	mov	fp, r1
                    tof_dtu = (int64_t)((Ra * Rb - Da * Db) / (Ra + Rb + Da + Db));
 8003efe:	4632      	mov	r2, r6
 8003f00:	463b      	mov	r3, r7
 8003f02:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003f06:	f7fe f981 	bl	800220c <__aeabi_dmul>
 8003f0a:	4680      	mov	r8, r0
 8003f0c:	4689      	mov	r9, r1
 8003f0e:	4652      	mov	r2, sl
 8003f10:	465b      	mov	r3, fp
 8003f12:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003f16:	f7fe f979 	bl	800220c <__aeabi_dmul>
 8003f1a:	4602      	mov	r2, r0
 8003f1c:	460b      	mov	r3, r1
 8003f1e:	4640      	mov	r0, r8
 8003f20:	4649      	mov	r1, r9
 8003f22:	f7fd ffbb 	bl	8001e9c <__aeabi_dsub>
 8003f26:	4680      	mov	r8, r0
 8003f28:	4689      	mov	r9, r1
 8003f2a:	4632      	mov	r2, r6
 8003f2c:	463b      	mov	r3, r7
 8003f2e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003f32:	f7fd ffb5 	bl	8001ea0 <__adddf3>
 8003f36:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003f3a:	f7fd ffb1 	bl	8001ea0 <__adddf3>
 8003f3e:	4652      	mov	r2, sl
 8003f40:	465b      	mov	r3, fp
 8003f42:	f7fd ffad 	bl	8001ea0 <__adddf3>
 8003f46:	4602      	mov	r2, r0
 8003f48:	460b      	mov	r3, r1
 8003f4a:	4640      	mov	r0, r8
 8003f4c:	4649      	mov	r1, r9
 8003f4e:	f7fe fa87 	bl	8002460 <__aeabi_ddiv>
 8003f52:	f7fe fbbd 	bl	80026d0 <__aeabi_d2lz>
                    tof = tof_dtu * DWT_TIME_UNITS;
 8003f56:	f7fe f92b 	bl	80021b0 <__aeabi_l2d>
 8003f5a:	a30b      	add	r3, pc, #44	; (adr r3, 8003f88 <ds_twr_responder_sts+0x328>)
 8003f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f60:	f7fe f954 	bl	800220c <__aeabi_dmul>
 8003f64:	ec41 0b10 	vmov	d0, r0, r1
                    Send_Distance_Over_UART(tof, received_floats);
 8003f68:	a807      	add	r0, sp, #28
 8003f6a:	f000 f8c1 	bl	80040f0 <Send_Distance_Over_UART>
                    Sleep(RNG_DELAY_MS - 10);  //start couple of ms earlier
 8003f6e:	2014      	movs	r0, #20
 8003f70:	f000 f97a 	bl	8004268 <Sleep>
        if (!messageFlag)
 8003f74:	e6ad      	b.n	8003cd2 <ds_twr_responder_sts+0x72>
                }
            }
            else
            {
            	//test_run_info((unsigned char *)"Jestem_6");
                errors[RTO_ERR_IDX] += 1;
 8003f76:	4a15      	ldr	r2, [pc, #84]	; (8003fcc <ds_twr_responder_sts+0x36c>)
 8003f78:	6953      	ldr	r3, [r2, #20]
 8003f7a:	3301      	adds	r3, #1
 8003f7c:	6153      	str	r3, [r2, #20]
                /*
                 * If any error occurs, we can reset the STS count back to default value.
                 */
                messageFlag = 0;
 8003f7e:	2400      	movs	r4, #0
 8003f80:	e6a7      	b.n	8003cd2 <ds_twr_responder_sts+0x72>
 8003f82:	bf00      	nop
 8003f84:	f3af 8000 	nop.w
 8003f88:	3bce48fa 	.word	0x3bce48fa
 8003f8c:	3db13518 	.word	0x3db13518
 8003f90:	20000064 	.word	0x20000064
 8003f94:	20000080 	.word	0x20000080
 8003f98:	200000a0 	.word	0x200000a0
 8003f9c:	20000090 	.word	0x20000090
 8003fa0:	20000074 	.word	0x20000074
 8003fa4:	0002001c 	.word	0x0002001c
 8003fa8:	20000320 	.word	0x20000320
 8003fac:	2427d000 	.word	0x2427d000
 8003fb0:	200002e0 	.word	0x200002e0
 8003fb4:	200000e0 	.word	0x200000e0
 8003fb8:	064da296 	.word	0x064da296
 8003fbc:	200002d8 	.word	0x200002d8
 8003fc0:	200000ec 	.word	0x200000ec
 8003fc4:	200002cc 	.word	0x200002cc
 8003fc8:	200000b0 	.word	0x200000b0
 8003fcc:	20000270 	.word	0x20000270
 8003fd0:	200002d0 	.word	0x200002d0
            }
        }
        else
        {
        	//test_run_info((unsigned char *)"Jestem7");
            check_for_status_errors(status_reg, errors);
 8003fd4:	4606      	mov	r6, r0
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	4910      	ldr	r1, [pc, #64]	; (800401c <ds_twr_responder_sts+0x3bc>)
 8003fda:	f000 f9c3 	bl	8004364 <check_for_status_errors>

            if (!(status_reg & SYS_STATUS_RXFCG_BIT_MASK))
 8003fde:	4b10      	ldr	r3, [pc, #64]	; (8004020 <ds_twr_responder_sts+0x3c0>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8003fe6:	d103      	bne.n	8003ff0 <ds_twr_responder_sts+0x390>
            {
                errors[BAD_FRAME_ERR_IDX] += 1;
 8003fe8:	4a0c      	ldr	r2, [pc, #48]	; (800401c <ds_twr_responder_sts+0x3bc>)
 8003fea:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8003fec:	3301      	adds	r3, #1
 8003fee:	6293      	str	r3, [r2, #40]	; 0x28
            }
            if (goodSts < 0)
 8003ff0:	2e00      	cmp	r6, #0
 8003ff2:	db0e      	blt.n	8004012 <ds_twr_responder_sts+0x3b2>
            {
                errors[PREAMBLE_COUNT_ERR_IDX] += 1;
            }
            if (stsQual <= 0)
 8003ff4:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	dc03      	bgt.n	8004004 <ds_twr_responder_sts+0x3a4>
            {
                errors[CP_QUAL_ERR_IDX] += 1;
 8003ffc:	4a07      	ldr	r2, [pc, #28]	; (800401c <ds_twr_responder_sts+0x3bc>)
 8003ffe:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8004000:	3301      	adds	r3, #1
 8004002:	6313      	str	r3, [r2, #48]	; 0x30
            }
            /* Clear RX error events in the DW IC status register. */
            dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_ALL_RX_ERR);
 8004004:	4a07      	ldr	r2, [pc, #28]	; (8004024 <ds_twr_responder_sts+0x3c4>)
 8004006:	2100      	movs	r1, #0
 8004008:	2044      	movs	r0, #68	; 0x44
 800400a:	f7fe fd22 	bl	8002a52 <dwt_write32bitoffsetreg>

            /*
             * If any error occurs, we can reset the STS count back to default value.
             */
            messageFlag = 0;
 800400e:	2400      	movs	r4, #0
 8004010:	e65f      	b.n	8003cd2 <ds_twr_responder_sts+0x72>
                errors[PREAMBLE_COUNT_ERR_IDX] += 1;
 8004012:	4a02      	ldr	r2, [pc, #8]	; (800401c <ds_twr_responder_sts+0x3bc>)
 8004014:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004016:	3301      	adds	r3, #1
 8004018:	62d3      	str	r3, [r2, #44]	; 0x2c
 800401a:	e7eb      	b.n	8003ff4 <ds_twr_responder_sts+0x394>
 800401c:	20000270 	.word	0x20000270
 8004020:	20000320 	.word	0x20000320
 8004024:	24059000 	.word	0x24059000

08004028 <build_examples>:
 8004028:	4b01      	ldr	r3, [pc, #4]	; (8004030 <build_examples+0x8>)
 800402a:	4a02      	ldr	r2, [pc, #8]	; (8004034 <build_examples+0xc>)
 800402c:	601a      	str	r2, [r3, #0]
 800402e:	4770      	bx	lr
 8004030:	20000324 	.word	0x20000324
 8004034:	08003c61 	.word	0x08003c61

08004038 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8004038:	b570      	push	{r4, r5, r6, lr}
 800403a:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800403c:	2400      	movs	r4, #0
 800403e:	9403      	str	r4, [sp, #12]
 8004040:	9404      	str	r4, [sp, #16]
 8004042:	9405      	str	r4, [sp, #20]
 8004044:	9406      	str	r4, [sp, #24]
 8004046:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004048:	4b1f      	ldr	r3, [pc, #124]	; (80040c8 <MX_GPIO_Init+0x90>)
 800404a:	695a      	ldr	r2, [r3, #20]
 800404c:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8004050:	615a      	str	r2, [r3, #20]
 8004052:	695a      	ldr	r2, [r3, #20]
 8004054:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8004058:	9200      	str	r2, [sp, #0]
 800405a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800405c:	695a      	ldr	r2, [r3, #20]
 800405e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8004062:	615a      	str	r2, [r3, #20]
 8004064:	695a      	ldr	r2, [r3, #20]
 8004066:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800406a:	9201      	str	r2, [sp, #4]
 800406c:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800406e:	695a      	ldr	r2, [r3, #20]
 8004070:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8004074:	615a      	str	r2, [r3, #20]
 8004076:	695b      	ldr	r3, [r3, #20]
 8004078:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800407c:	9302      	str	r3, [sp, #8]
 800407e:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DW_NSS_GPIO_Port, DW_NSS_Pin, GPIO_PIN_RESET);
 8004080:	4622      	mov	r2, r4
 8004082:	2110      	movs	r1, #16
 8004084:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004088:	f000 fda6 	bl	8004bd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DW_IRQn_Pin|DW_RESET_Pin, GPIO_PIN_RESET);
 800408c:	4d0f      	ldr	r5, [pc, #60]	; (80040cc <MX_GPIO_Init+0x94>)
 800408e:	4622      	mov	r2, r4
 8004090:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8004094:	4628      	mov	r0, r5
 8004096:	f000 fd9f 	bl	8004bd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DW_NSS_Pin */
  GPIO_InitStruct.Pin = DW_NSS_Pin;
 800409a:	2310      	movs	r3, #16
 800409c:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800409e:	2601      	movs	r6, #1
 80040a0:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040a2:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040a4:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(DW_NSS_GPIO_Port, &GPIO_InitStruct);
 80040a6:	a903      	add	r1, sp, #12
 80040a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80040ac:	f000 fcb0 	bl	8004a10 <HAL_GPIO_Init>

  /*Configure GPIO pins : DW_IRQn_Pin DW_RESET_Pin */
  GPIO_InitStruct.Pin = DW_IRQn_Pin|DW_RESET_Pin;
 80040b0:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80040b4:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80040b6:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040b8:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040ba:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040bc:	a903      	add	r1, sp, #12
 80040be:	4628      	mov	r0, r5
 80040c0:	f000 fca6 	bl	8004a10 <HAL_GPIO_Init>

}
 80040c4:	b008      	add	sp, #32
 80040c6:	bd70      	pop	{r4, r5, r6, pc}
 80040c8:	40021000 	.word	0x40021000
 80040cc:	48000400 	.word	0x48000400

080040d0 <HAL_UART_TxCpltCallback>:



void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
    if (huart->Instance == USART1)
 80040d0:	6802      	ldr	r2, [r0, #0]
 80040d2:	4b04      	ldr	r3, [pc, #16]	; (80040e4 <HAL_UART_TxCpltCallback+0x14>)
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d000      	beq.n	80040da <HAL_UART_TxCpltCallback+0xa>
    {
        uart_tx_ready = 1;  // Mark TX done
    }
}
 80040d8:	4770      	bx	lr
        uart_tx_ready = 1;  // Mark TX done
 80040da:	4b03      	ldr	r3, [pc, #12]	; (80040e8 <HAL_UART_TxCpltCallback+0x18>)
 80040dc:	2201      	movs	r2, #1
 80040de:	701a      	strb	r2, [r3, #0]
}
 80040e0:	e7fa      	b.n	80040d8 <HAL_UART_TxCpltCallback+0x8>
 80040e2:	bf00      	nop
 80040e4:	40013800 	.word	0x40013800
 80040e8:	200000f8 	.word	0x200000f8
 80040ec:	00000000 	.word	0x00000000

080040f0 <Send_Distance_Over_UART>:

void Send_Distance_Over_UART(double tof, int_fast32_t *received_floats)
{
    if (!uart_tx_ready) return;  // Prevent collision if previous transfer not done
 80040f0:	4b1b      	ldr	r3, [pc, #108]	; (8004160 <Send_Distance_Over_UART+0x70>)
 80040f2:	781b      	ldrb	r3, [r3, #0]
 80040f4:	b903      	cbnz	r3, 80040f8 <Send_Distance_Over_UART+0x8>
 80040f6:	4770      	bx	lr
{
 80040f8:	b5d0      	push	{r4, r6, r7, lr}
 80040fa:	ec57 6b10 	vmov	r6, r7, d0
 80040fe:	4604      	mov	r4, r0

    uart_tx_ready = 0;  // Clear flag
 8004100:	4b17      	ldr	r3, [pc, #92]	; (8004160 <Send_Distance_Over_UART+0x70>)
 8004102:	2200      	movs	r2, #0
 8004104:	701a      	strb	r2, [r3, #0]

    float distance = (float)(tof * SPEED_OF_LIGHT);
 8004106:	a314      	add	r3, pc, #80	; (adr r3, 8004158 <Send_Distance_Over_UART+0x68>)
 8004108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800410c:	ee10 0a10 	vmov	r0, s0
 8004110:	4639      	mov	r1, r7
 8004112:	f7fe f87b 	bl	800220c <__aeabi_dmul>
 8004116:	f7fe fa8b 	bl	8002630 <__aeabi_d2f>
    uart_tx_packet[0] = 0xAA;
 800411a:	4912      	ldr	r1, [pc, #72]	; (8004164 <Send_Distance_Over_UART+0x74>)
 800411c:	23aa      	movs	r3, #170	; 0xaa
 800411e:	700b      	strb	r3, [r1, #0]

    memcpy(&uart_tx_packet[1], &distance, sizeof(float));
 8004120:	f8c1 0001 	str.w	r0, [r1, #1]
    memcpy(&uart_tx_packet[1 + sizeof(float)], received_floats, 6 * sizeof(int32_t));
 8004124:	6822      	ldr	r2, [r4, #0]
 8004126:	6863      	ldr	r3, [r4, #4]
 8004128:	68a6      	ldr	r6, [r4, #8]
 800412a:	68e0      	ldr	r0, [r4, #12]
 800412c:	f8c1 2005 	str.w	r2, [r1, #5]
 8004130:	f8c1 3009 	str.w	r3, [r1, #9]
 8004134:	f8c1 600d 	str.w	r6, [r1, #13]
 8004138:	f8c1 0011 	str.w	r0, [r1, #17]
 800413c:	6922      	ldr	r2, [r4, #16]
 800413e:	6963      	ldr	r3, [r4, #20]
 8004140:	f8c1 2015 	str.w	r2, [r1, #21]
 8004144:	f8c1 3019 	str.w	r3, [r1, #25]

    HAL_UART_Transmit_DMA(&huart1, uart_tx_packet, TX_PACKET_SIZE);
 8004148:	221d      	movs	r2, #29
 800414a:	4807      	ldr	r0, [pc, #28]	; (8004168 <Send_Distance_Over_UART+0x78>)
 800414c:	f002 fa06 	bl	800655c <HAL_UART_Transmit_DMA>
}
 8004150:	bdd0      	pop	{r4, r6, r7, pc}
 8004152:	bf00      	nop
 8004154:	f3af 8000 	nop.w
 8004158:	20000000 	.word	0x20000000
 800415c:	41b1dd19 	.word	0x41b1dd19
 8004160:	200000f8 	.word	0x200000f8
 8004164:	20000328 	.word	0x20000328
 8004168:	20000444 	.word	0x20000444

0800416c <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800416c:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800416e:	e7fe      	b.n	800416e <Error_Handler+0x2>

08004170 <SystemClock_Config>:
{
 8004170:	b500      	push	{lr}
 8004172:	b09f      	sub	sp, #124	; 0x7c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004174:	2228      	movs	r2, #40	; 0x28
 8004176:	2100      	movs	r1, #0
 8004178:	a814      	add	r0, sp, #80	; 0x50
 800417a:	f7fc f8f1 	bl	8000360 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800417e:	2100      	movs	r1, #0
 8004180:	910f      	str	r1, [sp, #60]	; 0x3c
 8004182:	9110      	str	r1, [sp, #64]	; 0x40
 8004184:	9111      	str	r1, [sp, #68]	; 0x44
 8004186:	9112      	str	r1, [sp, #72]	; 0x48
 8004188:	9113      	str	r1, [sp, #76]	; 0x4c
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800418a:	223c      	movs	r2, #60	; 0x3c
 800418c:	4668      	mov	r0, sp
 800418e:	f7fc f8e7 	bl	8000360 <memset>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004192:	2301      	movs	r3, #1
 8004194:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004196:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800419a:	9215      	str	r2, [sp, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 800419c:	9316      	str	r3, [sp, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800419e:	9318      	str	r3, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80041a0:	2302      	movs	r3, #2
 80041a2:	931b      	str	r3, [sp, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80041a4:	921c      	str	r2, [sp, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80041a6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80041aa:	931d      	str	r3, [sp, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80041ac:	a814      	add	r0, sp, #80	; 0x50
 80041ae:	f000 fd31 	bl	8004c14 <HAL_RCC_OscConfig>
 80041b2:	b9c0      	cbnz	r0, 80041e6 <SystemClock_Config+0x76>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80041b4:	230f      	movs	r3, #15
 80041b6:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80041b8:	2102      	movs	r1, #2
 80041ba:	9110      	str	r1, [sp, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80041bc:	2300      	movs	r3, #0
 80041be:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80041c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80041c4:	9212      	str	r2, [sp, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80041c6:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80041c8:	a80f      	add	r0, sp, #60	; 0x3c
 80041ca:	f001 f86d 	bl	80052a8 <HAL_RCC_ClockConfig>
 80041ce:	b960      	cbnz	r0, 80041ea <SystemClock_Config+0x7a>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80041d0:	2301      	movs	r3, #1
 80041d2:	9300      	str	r3, [sp, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80041d4:	2300      	movs	r3, #0
 80041d6:	9302      	str	r3, [sp, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80041d8:	4668      	mov	r0, sp
 80041da:	f001 f96b 	bl	80054b4 <HAL_RCCEx_PeriphCLKConfig>
 80041de:	b930      	cbnz	r0, 80041ee <SystemClock_Config+0x7e>
}
 80041e0:	b01f      	add	sp, #124	; 0x7c
 80041e2:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80041e6:	f7ff ffc1 	bl	800416c <Error_Handler>
    Error_Handler();
 80041ea:	f7ff ffbf 	bl	800416c <Error_Handler>
    Error_Handler();
 80041ee:	f7ff ffbd 	bl	800416c <Error_Handler>
	...

080041f4 <main>:
{
 80041f4:	b508      	push	{r3, lr}
  build_examples();
 80041f6:	f7ff ff17 	bl	8004028 <build_examples>
  HAL_Init();
 80041fa:	f000 fa23 	bl	8004644 <HAL_Init>
  SystemClock_Config();
 80041fe:	f7ff ffb7 	bl	8004170 <SystemClock_Config>
  MX_GPIO_Init();
 8004202:	f7ff ff19 	bl	8004038 <MX_GPIO_Init>
  MX_DMA_Init();
 8004206:	f7ff fd11 	bl	8003c2c <MX_DMA_Init>
  MX_USART1_UART_Init();
 800420a:	f002 ff1d 	bl	8007048 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 800420e:	f000 f999 	bl	8004544 <MX_SPI1_Init>
  MX_TIM2_Init();
 8004212:	f002 fecd 	bl	8006fb0 <MX_TIM2_Init>
  HAL_TIM_Base_Start(&htim2);
 8004216:	4804      	ldr	r0, [pc, #16]	; (8004228 <main+0x34>)
 8004218:	f001 ffc2 	bl	80061a0 <HAL_TIM_Base_Start>
  port_DisableEXT_IRQ();
 800421c:	f000 f82f 	bl	800427e <port_DisableEXT_IRQ>
  example_pointer();
 8004220:	4b02      	ldr	r3, [pc, #8]	; (800422c <main+0x38>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4798      	blx	r3
  while (1)
 8004226:	e7fe      	b.n	8004226 <main+0x32>
 8004228:	200003b4 	.word	0x200003b4
 800422c:	20000324 	.word	0x20000324

08004230 <usleep>:
/* @fn    usleep
 * @brief precise usleep() delay
 * */
#pragma GCC optimize ("O0")
int usleep(useconds_t usec)
{
 8004230:	b480      	push	{r7}
 8004232:	b085      	sub	sp, #20
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
    unsigned int i;

    usec*=12;
 8004238:	687a      	ldr	r2, [r7, #4]
 800423a:	4613      	mov	r3, r2
 800423c:	005b      	lsls	r3, r3, #1
 800423e:	4413      	add	r3, r2
 8004240:	009b      	lsls	r3, r3, #2
 8004242:	607b      	str	r3, [r7, #4]
    for(i=0;i<usec;i++)
 8004244:	2300      	movs	r3, #0
 8004246:	60fb      	str	r3, [r7, #12]
 8004248:	e003      	b.n	8004252 <usleep+0x22>
    {
        __NOP();
 800424a:	bf00      	nop
    for(i=0;i<usec;i++)
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	3301      	adds	r3, #1
 8004250:	60fb      	str	r3, [r7, #12]
 8004252:	68fa      	ldr	r2, [r7, #12]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	429a      	cmp	r2, r3
 8004258:	d3f7      	bcc.n	800424a <usleep+0x1a>
    }
    return 0;
 800425a:	2300      	movs	r3, #0
}
 800425c:	4618      	mov	r0, r3
 800425e:	3714      	adds	r7, #20
 8004260:	46bd      	mov	sp, r7
 8004262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004266:	4770      	bx	lr

08004268 <Sleep>:
/* @fn    Sleep
 * @brief Sleep delay in ms using SysTick timer
 * */
__INLINE void
Sleep(uint32_t x)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b082      	sub	sp, #8
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
    HAL_Delay(x);
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	f000 fa0b 	bl	800468c <HAL_Delay>
}
 8004276:	bf00      	nop
 8004278:	3708      	adds	r7, #8
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}

0800427e <port_DisableEXT_IRQ>:
/* @fn      port_DisableEXT_IRQ
 * @brief   wrapper to disable DW_IRQ pin IRQ
 *          in current implementation it disables all IRQ from lines 5:9
 * */
__INLINE void port_DisableEXT_IRQ(void)
{
 800427e:	b580      	push	{r7, lr}
 8004280:	af00      	add	r7, sp, #0
    NVIC_DisableIRQ(EXTI0_IRQn);
 8004282:	2006      	movs	r0, #6
 8004284:	f000 f85c 	bl	8004340 <__NVIC_DisableIRQ>
}
 8004288:	bf00      	nop
 800428a:	bd80      	pop	{r7, pc}

0800428c <port_EnableEXT_IRQ>:
/* @fn      port_EnableEXT_IRQ
 * @brief   wrapper to enable DW_IRQ pin IRQ
 *          in current implementation it enables all IRQ from lines 5:9
 * */
__INLINE void port_EnableEXT_IRQ(void)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	af00      	add	r7, sp, #0
    NVIC_EnableIRQ(EXTI0_IRQn);
 8004290:	2006      	movs	r0, #6
 8004292:	f000 f847 	bl	8004324 <__NVIC_EnableIRQ>
}
 8004296:	bf00      	nop
 8004298:	bd80      	pop	{r7, pc}
	...

0800429c <EXTI_GetITEnStatus>:
  * @brief  Checks whether the specified IRQn line is enabled or not.
  * @param  IRQn: specifies the IRQn line to check.
  * @return "0" when IRQn is "not enabled" and !0 otherwise
  */
ITStatus EXTI_GetITEnStatus(IRQn_Type IRQn)
{
 800429c:	b480      	push	{r7}
 800429e:	b083      	sub	sp, #12
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	4603      	mov	r3, r0
 80042a4:	71fb      	strb	r3, [r7, #7]
        return ((NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] &\
 80042a6:	4a0c      	ldr	r2, [pc, #48]	; (80042d8 <EXTI_GetITEnStatus+0x3c>)
 80042a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042ac:	095b      	lsrs	r3, r3, #5
 80042ae:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
            (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL)) ) == (uint32_t)RESET)?(RESET):(SET);
 80042b2:	79fb      	ldrb	r3, [r7, #7]
 80042b4:	f003 031f 	and.w	r3, r3, #31
 80042b8:	fa22 f303 	lsr.w	r3, r2, r3
 80042bc:	f003 0301 	and.w	r3, r3, #1
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	bf14      	ite	ne
 80042c4:	2301      	movne	r3, #1
 80042c6:	2300      	moveq	r3, #0
 80042c8:	b2db      	uxtb	r3, r3
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	370c      	adds	r7, #12
 80042ce:	46bd      	mov	sp, r7
 80042d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d4:	4770      	bx	lr
 80042d6:	bf00      	nop
 80042d8:	e000e100 	.word	0xe000e100

080042dc <port_GetEXT_IRQStatus>:

/* @fn      port_GetEXT_IRQStatus
 * @brief   wrapper to read a DW_IRQ pin IRQ status
 * */
__INLINE uint32_t port_GetEXT_IRQStatus(void)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	af00      	add	r7, sp, #0
    return EXTI_GetITEnStatus(EXTI0_IRQn);
 80042e0:	2006      	movs	r0, #6
 80042e2:	f7ff ffdb 	bl	800429c <EXTI_GetITEnStatus>
 80042e6:	4603      	mov	r3, r0
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	bd80      	pop	{r7, pc}

080042ec <my_reset_DWIC>:
    Sleep(2);

}

void my_reset_DWIC(void)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(DW_RESET_GPIO_Port, DW_RESET_Pin, GPIO_PIN_RESET);
 80042f0:	2200      	movs	r2, #0
 80042f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80042f6:	480a      	ldr	r0, [pc, #40]	; (8004320 <my_reset_DWIC+0x34>)
 80042f8:	f000 fc6e 	bl	8004bd8 <HAL_GPIO_WritePin>
    HAL_Delay(6);
 80042fc:	2006      	movs	r0, #6
 80042fe:	f000 f9c5 	bl	800468c <HAL_Delay>
    HAL_GPIO_WritePin(DW_RESET_GPIO_Port, DW_RESET_Pin, GPIO_PIN_SET);
 8004302:	2201      	movs	r2, #1
 8004304:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004308:	4805      	ldr	r0, [pc, #20]	; (8004320 <my_reset_DWIC+0x34>)
 800430a:	f000 fc65 	bl	8004bd8 <HAL_GPIO_WritePin>
    HAL_Delay(3);
 800430e:	2003      	movs	r0, #3
 8004310:	f000 f9bc 	bl	800468c <HAL_Delay>
    Sleep(2); // Time needed for DW3000 to start up (transition from INIT_RC to IDLE_RC)
 8004314:	2002      	movs	r0, #2
 8004316:	f7ff ffa7 	bl	8004268 <Sleep>

}
 800431a:	bf00      	nop
 800431c:	bd80      	pop	{r7, pc}
 800431e:	bf00      	nop
 8004320:	48000400 	.word	0x48000400

08004324 <__NVIC_EnableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8004324:	2800      	cmp	r0, #0
 8004326:	db07      	blt.n	8004338 <__NVIC_EnableIRQ+0x14>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004328:	f000 021f 	and.w	r2, r0, #31
 800432c:	0940      	lsrs	r0, r0, #5
 800432e:	2301      	movs	r3, #1
 8004330:	4093      	lsls	r3, r2
 8004332:	4a02      	ldr	r2, [pc, #8]	; (800433c <__NVIC_EnableIRQ+0x18>)
 8004334:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  }
}
 8004338:	4770      	bx	lr
 800433a:	bf00      	nop
 800433c:	e000e100 	.word	0xe000e100

08004340 <__NVIC_DisableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8004340:	2800      	cmp	r0, #0
 8004342:	db0c      	blt.n	800435e <__NVIC_DisableIRQ+0x1e>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004344:	f000 021f 	and.w	r2, r0, #31
 8004348:	0940      	lsrs	r0, r0, #5
 800434a:	2301      	movs	r3, #1
 800434c:	4093      	lsls	r3, r2
 800434e:	3020      	adds	r0, #32
 8004350:	4a03      	ldr	r2, [pc, #12]	; (8004360 <__NVIC_DisableIRQ+0x20>)
 8004352:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004356:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800435a:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 800435e:	4770      	bx	lr
 8004360:	e000e100 	.word	0xe000e100

08004364 <check_for_status_errors>:
 * @param errors: pointer to a uint32_t buffer that contains the sum of different errors logged during program operation.
 *
 * @return none
 */
void check_for_status_errors(uint32_t reg, uint32_t * errors)
{
 8004364:	b510      	push	{r4, lr}
 8004366:	b082      	sub	sp, #8
 8004368:	460c      	mov	r4, r1
    uint16_t stsStatus = 0;
 800436a:	2300      	movs	r3, #0
 800436c:	f8ad 3006 	strh.w	r3, [sp, #6]

    if (!(reg & SYS_STATUS_RXFCG_BIT_MASK))
 8004370:	f410 4f80 	tst.w	r0, #16384	; 0x4000
 8004374:	d102      	bne.n	800437c <check_for_status_errors+0x18>
    {
        errors[BAD_FRAME_ERR_IDX] += 1;
 8004376:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8004378:	3301      	adds	r3, #1
 800437a:	628b      	str	r3, [r1, #40]	; 0x28
    }

    if (reg & SYS_STATUS_RXFSL_BIT_MASK)
 800437c:	f410 3f80 	tst.w	r0, #65536	; 0x10000
 8004380:	d002      	beq.n	8004388 <check_for_status_errors+0x24>
    {
        errors[RSE_ERR_IDX] += 1;
 8004382:	6863      	ldr	r3, [r4, #4]
 8004384:	3301      	adds	r3, #1
 8004386:	6063      	str	r3, [r4, #4]
    }

    if (reg & SYS_STATUS_RXPHE_BIT_MASK)
 8004388:	f410 5f80 	tst.w	r0, #4096	; 0x1000
 800438c:	d002      	beq.n	8004394 <check_for_status_errors+0x30>
    {
        errors[PHE_ERR_IDX] += 1;
 800438e:	68a3      	ldr	r3, [r4, #8]
 8004390:	3301      	adds	r3, #1
 8004392:	60a3      	str	r3, [r4, #8]
    }

    if (reg & SYS_STATUS_RXPTO_BIT_MASK)
 8004394:	f410 1f00 	tst.w	r0, #2097152	; 0x200000
 8004398:	d002      	beq.n	80043a0 <check_for_status_errors+0x3c>
    {
        errors[PTO_ERR_IDX] += 1;
 800439a:	6923      	ldr	r3, [r4, #16]
 800439c:	3301      	adds	r3, #1
 800439e:	6123      	str	r3, [r4, #16]
    }

    if (reg & SYS_STATUS_ARFE_BIT_MASK)
 80043a0:	f010 5f00 	tst.w	r0, #536870912	; 0x20000000
 80043a4:	d002      	beq.n	80043ac <check_for_status_errors+0x48>
    {
        errors[ARFE_ERR_IDX] += 1;
 80043a6:	6a23      	ldr	r3, [r4, #32]
 80043a8:	3301      	adds	r3, #1
 80043aa:	6223      	str	r3, [r4, #32]
    }

    if ((reg & SYS_STATUS_RXFR_BIT_MASK) && !(reg & SYS_STATUS_RXFCG_BIT_MASK))
 80043ac:	f400 43c0 	and.w	r3, r0, #24576	; 0x6000
 80043b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043b4:	d010      	beq.n	80043d8 <check_for_status_errors+0x74>
    {
        errors[CRC_ERR_IDX] += 1;
    }

    if ((reg & SYS_STATUS_RXFTO_BIT_MASK) || (reg & SYS_STATUS_ALL_RX_TO))
 80043b6:	f410 1f08 	tst.w	r0, #2228224	; 0x220000
 80043ba:	d002      	beq.n	80043c2 <check_for_status_errors+0x5e>
    {
        errors[RTO_ERR_IDX] += 1;
 80043bc:	6963      	ldr	r3, [r4, #20]
 80043be:	3301      	adds	r3, #1
 80043c0:	6163      	str	r3, [r4, #20]
    }

    if (reg & SYS_STATUS_RXSTO_BIT_MASK)
 80043c2:	f010 6f80 	tst.w	r0, #67108864	; 0x4000000
 80043c6:	d002      	beq.n	80043ce <check_for_status_errors+0x6a>
    {
        errors[SFDTO_ERR_IDX] += 1;
 80043c8:	68e3      	ldr	r3, [r4, #12]
 80043ca:	3301      	adds	r3, #1
 80043cc:	60e3      	str	r3, [r4, #12]
    }

    if (reg & SYS_STATUS_CPERR_BIT_MASK)
 80043ce:	f010 5f80 	tst.w	r0, #268435456	; 0x10000000
 80043d2:	d105      	bne.n	80043e0 <check_for_status_errors+0x7c>
        {
            // Logistic regression failed
            errors[STS_LOG_REG_FAILED_ERR] += 1;
        }
    }
}
 80043d4:	b002      	add	sp, #8
 80043d6:	bd10      	pop	{r4, pc}
        errors[CRC_ERR_IDX] += 1;
 80043d8:	6823      	ldr	r3, [r4, #0]
 80043da:	3301      	adds	r3, #1
 80043dc:	6023      	str	r3, [r4, #0]
 80043de:	e7ea      	b.n	80043b6 <check_for_status_errors+0x52>
        errors[STS_PREAMBLE_ERR] += 1;
 80043e0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80043e2:	3301      	adds	r3, #1
 80043e4:	6363      	str	r3, [r4, #52]	; 0x34
        dwt_readstsstatus(&stsStatus, 0);
 80043e6:	2100      	movs	r1, #0
 80043e8:	f10d 0006 	add.w	r0, sp, #6
 80043ec:	f7ff f8d0 	bl	8003590 <dwt_readstsstatus>
        if (stsStatus & 0x100)
 80043f0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80043f4:	f413 7f80 	tst.w	r3, #256	; 0x100
 80043f8:	d002      	beq.n	8004400 <check_for_status_errors+0x9c>
            errors[STS_PEAK_GROWTH_RATE_ERR] += 1;
 80043fa:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80043fc:	3201      	adds	r2, #1
 80043fe:	63a2      	str	r2, [r4, #56]	; 0x38
        if (stsStatus & 0x080)
 8004400:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004404:	d002      	beq.n	800440c <check_for_status_errors+0xa8>
            errors[STS_ADC_COUNT_ERR] += 1;
 8004406:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8004408:	3201      	adds	r2, #1
 800440a:	63e2      	str	r2, [r4, #60]	; 0x3c
        if (stsStatus & 0x040)
 800440c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004410:	d002      	beq.n	8004418 <check_for_status_errors+0xb4>
            errors[STS_SFD_COUNT_ERR] += 1;
 8004412:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004414:	3201      	adds	r2, #1
 8004416:	6422      	str	r2, [r4, #64]	; 0x40
        if (stsStatus & 0x020)
 8004418:	f013 0f20 	tst.w	r3, #32
 800441c:	d002      	beq.n	8004424 <check_for_status_errors+0xc0>
            errors[STS_LATE_FIRST_PATH_ERR] += 1;
 800441e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8004420:	3201      	adds	r2, #1
 8004422:	6462      	str	r2, [r4, #68]	; 0x44
        if (stsStatus & 0x010)
 8004424:	f013 0f10 	tst.w	r3, #16
 8004428:	d002      	beq.n	8004430 <check_for_status_errors+0xcc>
            errors[STS_LATE_COARSE_EST_ERR] += 1;
 800442a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800442c:	3201      	adds	r2, #1
 800442e:	64a2      	str	r2, [r4, #72]	; 0x48
        if (stsStatus & 0x008)
 8004430:	f013 0f08 	tst.w	r3, #8
 8004434:	d002      	beq.n	800443c <check_for_status_errors+0xd8>
            errors[STS_COARSE_EST_EMPTY_ERR] += 1;
 8004436:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8004438:	3201      	adds	r2, #1
 800443a:	64e2      	str	r2, [r4, #76]	; 0x4c
        if (stsStatus & 0x004)
 800443c:	f013 0f04 	tst.w	r3, #4
 8004440:	d002      	beq.n	8004448 <check_for_status_errors+0xe4>
            errors[STS_HIGH_NOISE_THREASH_ERR] += 1;
 8004442:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8004444:	3201      	adds	r2, #1
 8004446:	6522      	str	r2, [r4, #80]	; 0x50
        if (stsStatus & 0x002)
 8004448:	f013 0f02 	tst.w	r3, #2
 800444c:	d002      	beq.n	8004454 <check_for_status_errors+0xf0>
            errors[STS_NON_TRIANGLE_ERR] += 1;
 800444e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8004450:	3201      	adds	r2, #1
 8004452:	6562      	str	r2, [r4, #84]	; 0x54
        if (stsStatus & 0x001)
 8004454:	f013 0f01 	tst.w	r3, #1
 8004458:	d0bc      	beq.n	80043d4 <check_for_status_errors+0x70>
            errors[STS_LOG_REG_FAILED_ERR] += 1;
 800445a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800445c:	3301      	adds	r3, #1
 800445e:	65a3      	str	r3, [r4, #88]	; 0x58
}
 8004460:	e7b8      	b.n	80043d4 <check_for_status_errors+0x70>
	...

08004464 <get_rx_delay_time_txpreamble>:
{
    uint32_t delay_time = 0;
    /* Standard delay values for preamble lengths of 32, 64, 72 & 128 should be adequate.
     * Additional time delay will be needed for larger preamble lengths.
     * Delay required is dependent on the preamble length as it increases the frame length. */
    switch (config_options.txPreambLength)
 8004464:	4b0f      	ldr	r3, [pc, #60]	; (80044a4 <get_rx_delay_time_txpreamble+0x40>)
 8004466:	785b      	ldrb	r3, [r3, #1]
 8004468:	3b02      	subs	r3, #2
 800446a:	2b0b      	cmp	r3, #11
 800446c:	d807      	bhi.n	800447e <get_rx_delay_time_txpreamble+0x1a>
 800446e:	e8df f003 	tbb	[pc, r3]
 8004472:	140b      	.short	0x140b
 8004474:	060e0606 	.word	0x060e0606
 8004478:	06111706 	.word	0x06111706
 800447c:	0806      	.short	0x0806
 800447e:	2000      	movs	r0, #0
 8004480:	4770      	bx	lr
    {
    case DWT_PLEN_256:
        delay_time += 128; /* 256 - 128 */
        break;
    case DWT_PLEN_512:
        delay_time += 384; /* 512 - 128 */
 8004482:	f44f 70c0 	mov.w	r0, #384	; 0x180
        break;
 8004486:	4770      	bx	lr
    case DWT_PLEN_1024:
        delay_time += 896; /* 1024 - 128 */
 8004488:	f44f 7060 	mov.w	r0, #896	; 0x380
        break;
 800448c:	4770      	bx	lr
    case DWT_PLEN_1536:
        delay_time += 1408; /* 1536 - 128 */
 800448e:	f44f 60b0 	mov.w	r0, #1408	; 0x580
        break;
 8004492:	4770      	bx	lr
    case DWT_PLEN_2048:
        delay_time += 1920; /* 2048 - 128 */
 8004494:	f44f 60f0 	mov.w	r0, #1920	; 0x780
        break;
 8004498:	4770      	bx	lr
    case DWT_PLEN_4096:
        delay_time += 3968; /* 4096 - 128 */
 800449a:	f44f 6078 	mov.w	r0, #3968	; 0xf80
        break;
 800449e:	4770      	bx	lr
        delay_time += 128; /* 256 - 128 */
 80044a0:	2080      	movs	r0, #128	; 0x80
    default:
        break;
    }

    return delay_time;
}
 80044a2:	4770      	bx	lr
 80044a4:	20000064 	.word	0x20000064

080044a8 <get_rx_delay_time_data_rate>:
    uint32_t delay_time = 0;
    /*
     * If data rate is set to 850k (slower rate),
     * increase the delay time
     */
    switch (config_options.dataRate)
 80044a8:	4b03      	ldr	r3, [pc, #12]	; (80044b8 <get_rx_delay_time_data_rate+0x10>)
 80044aa:	799b      	ldrb	r3, [r3, #6]
 80044ac:	b10b      	cbz	r3, 80044b2 <get_rx_delay_time_data_rate+0xa>
    uint32_t delay_time = 0;
 80044ae:	2000      	movs	r0, #0
 80044b0:	4770      	bx	lr
    {
    case DWT_BR_850K:
        delay_time += 200;
 80044b2:	20c8      	movs	r0, #200	; 0xc8
    default:
        break;
    }

    return delay_time;
}
 80044b4:	4770      	bx	lr
 80044b6:	bf00      	nop
 80044b8:	20000064 	.word	0x20000064

080044bc <get_tx_timestamp_u64>:
 * @param  none
 *
 * @return  64-bit value of the read time-stamp.
 */
uint64_t get_tx_timestamp_u64(void)
{
 80044bc:	b500      	push	{lr}
 80044be:	b083      	sub	sp, #12
    uint8_t ts_tab[5];
    uint64_t ts = 0;
    int8_t i;
    dwt_readtxtimestamp(ts_tab);
 80044c0:	4668      	mov	r0, sp
 80044c2:	f7ff f89f 	bl	8003604 <dwt_readtxtimestamp>
    for (i = 4; i >= 0; i--)
 80044c6:	2304      	movs	r3, #4
    uint64_t ts = 0;
 80044c8:	2000      	movs	r0, #0
 80044ca:	4601      	mov	r1, r0
    for (i = 4; i >= 0; i--)
 80044cc:	e00b      	b.n	80044e6 <get_tx_timestamp_u64+0x2a>
    {
        ts <<= 8;
 80044ce:	0209      	lsls	r1, r1, #8
 80044d0:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
        ts |= ts_tab[i];
 80044d4:	f103 0208 	add.w	r2, r3, #8
 80044d8:	446a      	add	r2, sp
 80044da:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 80044de:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
    for (i = 4; i >= 0; i--)
 80044e2:	3b01      	subs	r3, #1
 80044e4:	b25b      	sxtb	r3, r3
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	daf1      	bge.n	80044ce <get_tx_timestamp_u64+0x12>
    }
    return ts;
}
 80044ea:	b003      	add	sp, #12
 80044ec:	f85d fb04 	ldr.w	pc, [sp], #4

080044f0 <get_rx_timestamp_u64>:
 * @param  none
 *
 * @return  64-bit value of the read time-stamp.
 */
uint64_t get_rx_timestamp_u64(void)
{
 80044f0:	b500      	push	{lr}
 80044f2:	b083      	sub	sp, #12
    uint8_t ts_tab[5];
    uint64_t ts = 0;
    int8_t i;
    dwt_readrxtimestamp(ts_tab);
 80044f4:	4668      	mov	r0, sp
 80044f6:	f7ff f88d 	bl	8003614 <dwt_readrxtimestamp>
    for (i = 4; i >= 0; i--)
 80044fa:	2304      	movs	r3, #4
    uint64_t ts = 0;
 80044fc:	2000      	movs	r0, #0
 80044fe:	4601      	mov	r1, r0
    for (i = 4; i >= 0; i--)
 8004500:	e00b      	b.n	800451a <get_rx_timestamp_u64+0x2a>
    {
        ts <<= 8;
 8004502:	0209      	lsls	r1, r1, #8
 8004504:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
        ts |= ts_tab[i];
 8004508:	f103 0208 	add.w	r2, r3, #8
 800450c:	446a      	add	r2, sp
 800450e:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 8004512:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
    for (i = 4; i >= 0; i--)
 8004516:	3b01      	subs	r3, #1
 8004518:	b25b      	sxtb	r3, r3
 800451a:	2b00      	cmp	r3, #0
 800451c:	daf1      	bge.n	8004502 <get_rx_timestamp_u64+0x12>
    }
    return ts;
}
 800451e:	b003      	add	sp, #12
 8004520:	f85d fb04 	ldr.w	pc, [sp], #4

08004524 <final_msg_get_ts>:
 * @return none
 */
void final_msg_get_ts(const uint8_t *ts_field, uint32_t *ts)
{
    uint8_t i;
    *ts = 0;
 8004524:	2300      	movs	r3, #0
 8004526:	600b      	str	r3, [r1, #0]
    for (i = 0; i < FINAL_MSG_TS_LEN; i++)
 8004528:	e009      	b.n	800453e <final_msg_get_ts+0x1a>
    {
        *ts += ((uint32_t)ts_field[i] << (i * 8));
 800452a:	5cc2      	ldrb	r2, [r0, r3]
 800452c:	ea4f 0cc3 	mov.w	ip, r3, lsl #3
 8004530:	fa02 fc0c 	lsl.w	ip, r2, ip
 8004534:	680a      	ldr	r2, [r1, #0]
 8004536:	4462      	add	r2, ip
 8004538:	600a      	str	r2, [r1, #0]
    for (i = 0; i < FINAL_MSG_TS_LEN; i++)
 800453a:	3301      	adds	r3, #1
 800453c:	b2db      	uxtb	r3, r3
 800453e:	2b03      	cmp	r3, #3
 8004540:	d9f3      	bls.n	800452a <final_msg_get_ts+0x6>
    }
}
 8004542:	4770      	bx	lr

08004544 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8004544:	b508      	push	{r3, lr}
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8004546:	4810      	ldr	r0, [pc, #64]	; (8004588 <MX_SPI1_Init+0x44>)
 8004548:	4b10      	ldr	r3, [pc, #64]	; (800458c <MX_SPI1_Init+0x48>)
 800454a:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800454c:	f44f 7382 	mov.w	r3, #260	; 0x104
 8004550:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004552:	2300      	movs	r3, #0
 8004554:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004556:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800455a:	60c2      	str	r2, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800455c:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800455e:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004560:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004564:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8004566:	2218      	movs	r2, #24
 8004568:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800456a:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800456c:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800456e:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8004570:	2207      	movs	r2, #7
 8004572:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004574:	6303      	str	r3, [r0, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8004576:	2308      	movs	r3, #8
 8004578:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800457a:	f001 fa21 	bl	80059c0 <HAL_SPI_Init>
 800457e:	b900      	cbnz	r0, 8004582 <MX_SPI1_Init+0x3e>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004580:	bd08      	pop	{r3, pc}
    Error_Handler();
 8004582:	f7ff fdf3 	bl	800416c <Error_Handler>
}
 8004586:	e7fb      	b.n	8004580 <MX_SPI1_Init+0x3c>
 8004588:	20000348 	.word	0x20000348
 800458c:	40013000 	.word	0x40013000

08004590 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8004590:	b500      	push	{lr}
 8004592:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004594:	2300      	movs	r3, #0
 8004596:	9303      	str	r3, [sp, #12]
 8004598:	9304      	str	r3, [sp, #16]
 800459a:	9305      	str	r3, [sp, #20]
 800459c:	9306      	str	r3, [sp, #24]
 800459e:	9307      	str	r3, [sp, #28]
  if(spiHandle->Instance==SPI1)
 80045a0:	6802      	ldr	r2, [r0, #0]
 80045a2:	4b14      	ldr	r3, [pc, #80]	; (80045f4 <HAL_SPI_MspInit+0x64>)
 80045a4:	429a      	cmp	r2, r3
 80045a6:	d002      	beq.n	80045ae <HAL_SPI_MspInit+0x1e>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80045a8:	b009      	add	sp, #36	; 0x24
 80045aa:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_SPI1_CLK_ENABLE();
 80045ae:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
 80045b2:	699a      	ldr	r2, [r3, #24]
 80045b4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80045b8:	619a      	str	r2, [r3, #24]
 80045ba:	699a      	ldr	r2, [r3, #24]
 80045bc:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80045c0:	9201      	str	r2, [sp, #4]
 80045c2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80045c4:	695a      	ldr	r2, [r3, #20]
 80045c6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80045ca:	615a      	str	r2, [r3, #20]
 80045cc:	695b      	ldr	r3, [r3, #20]
 80045ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045d2:	9302      	str	r3, [sp, #8]
 80045d4:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80045d6:	23e0      	movs	r3, #224	; 0xe0
 80045d8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045da:	2302      	movs	r3, #2
 80045dc:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80045de:	2303      	movs	r3, #3
 80045e0:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80045e2:	2305      	movs	r3, #5
 80045e4:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045e6:	a903      	add	r1, sp, #12
 80045e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80045ec:	f000 fa10 	bl	8004a10 <HAL_GPIO_Init>
}
 80045f0:	e7da      	b.n	80045a8 <HAL_SPI_MspInit+0x18>
 80045f2:	bf00      	nop
 80045f4:	40013000 	.word	0x40013000

080045f8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80045f8:	b510      	push	{r4, lr}
 80045fa:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80045fc:	4b0e      	ldr	r3, [pc, #56]	; (8004638 <HAL_InitTick+0x40>)
 80045fe:	7818      	ldrb	r0, [r3, #0]
 8004600:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004604:	fbb3 f3f0 	udiv	r3, r3, r0
 8004608:	4a0c      	ldr	r2, [pc, #48]	; (800463c <HAL_InitTick+0x44>)
 800460a:	6810      	ldr	r0, [r2, #0]
 800460c:	fbb0 f0f3 	udiv	r0, r0, r3
 8004610:	f000 f8a8 	bl	8004764 <HAL_SYSTICK_Config>
 8004614:	b968      	cbnz	r0, 8004632 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004616:	2c0f      	cmp	r4, #15
 8004618:	d901      	bls.n	800461e <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 800461a:	2001      	movs	r0, #1
 800461c:	e00a      	b.n	8004634 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800461e:	2200      	movs	r2, #0
 8004620:	4621      	mov	r1, r4
 8004622:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004626:	f000 f857 	bl	80046d8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800462a:	4b05      	ldr	r3, [pc, #20]	; (8004640 <HAL_InitTick+0x48>)
 800462c:	601c      	str	r4, [r3, #0]
  }
   /* Return function status */
  return HAL_OK;
 800462e:	2000      	movs	r0, #0
 8004630:	e000      	b.n	8004634 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8004632:	2001      	movs	r0, #1
}
 8004634:	bd10      	pop	{r4, pc}
 8004636:	bf00      	nop
 8004638:	200000f9 	.word	0x200000f9
 800463c:	20000100 	.word	0x20000100
 8004640:	200000fc 	.word	0x200000fc

08004644 <HAL_Init>:
{
 8004644:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004646:	4a07      	ldr	r2, [pc, #28]	; (8004664 <HAL_Init+0x20>)
 8004648:	6813      	ldr	r3, [r2, #0]
 800464a:	f043 0310 	orr.w	r3, r3, #16
 800464e:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004650:	2003      	movs	r0, #3
 8004652:	f000 f82f 	bl	80046b4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8004656:	200f      	movs	r0, #15
 8004658:	f7ff ffce 	bl	80045f8 <HAL_InitTick>
  HAL_MspInit();
 800465c:	f000 fac2 	bl	8004be4 <HAL_MspInit>
}
 8004660:	2000      	movs	r0, #0
 8004662:	bd08      	pop	{r3, pc}
 8004664:	40022000 	.word	0x40022000

08004668 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8004668:	4a03      	ldr	r2, [pc, #12]	; (8004678 <HAL_IncTick+0x10>)
 800466a:	6811      	ldr	r1, [r2, #0]
 800466c:	4b03      	ldr	r3, [pc, #12]	; (800467c <HAL_IncTick+0x14>)
 800466e:	781b      	ldrb	r3, [r3, #0]
 8004670:	440b      	add	r3, r1
 8004672:	6013      	str	r3, [r2, #0]
}
 8004674:	4770      	bx	lr
 8004676:	bf00      	nop
 8004678:	200003ac 	.word	0x200003ac
 800467c:	200000f9 	.word	0x200000f9

08004680 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8004680:	4b01      	ldr	r3, [pc, #4]	; (8004688 <HAL_GetTick+0x8>)
 8004682:	6818      	ldr	r0, [r3, #0]
}
 8004684:	4770      	bx	lr
 8004686:	bf00      	nop
 8004688:	200003ac 	.word	0x200003ac

0800468c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800468c:	b538      	push	{r3, r4, r5, lr}
 800468e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8004690:	f7ff fff6 	bl	8004680 <HAL_GetTick>
 8004694:	4605      	mov	r5, r0
  uint32_t wait = Delay;
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004696:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 800469a:	d002      	beq.n	80046a2 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 800469c:	4b04      	ldr	r3, [pc, #16]	; (80046b0 <HAL_Delay+0x24>)
 800469e:	781b      	ldrb	r3, [r3, #0]
 80046a0:	441c      	add	r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80046a2:	f7ff ffed 	bl	8004680 <HAL_GetTick>
 80046a6:	1b40      	subs	r0, r0, r5
 80046a8:	42a0      	cmp	r0, r4
 80046aa:	d3fa      	bcc.n	80046a2 <HAL_Delay+0x16>
  {
  }
}
 80046ac:	bd38      	pop	{r3, r4, r5, pc}
 80046ae:	bf00      	nop
 80046b0:	200000f9 	.word	0x200000f9

080046b4 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80046b4:	4a07      	ldr	r2, [pc, #28]	; (80046d4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80046b6:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80046b8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80046bc:	041b      	lsls	r3, r3, #16
 80046be:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80046c0:	0200      	lsls	r0, r0, #8
 80046c2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80046c6:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 80046c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80046cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80046d0:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80046d2:	4770      	bx	lr
 80046d4:	e000ed00 	.word	0xe000ed00

080046d8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80046d8:	b500      	push	{lr}
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80046da:	4b19      	ldr	r3, [pc, #100]	; (8004740 <HAL_NVIC_SetPriority+0x68>)
 80046dc:	68db      	ldr	r3, [r3, #12]
 80046de:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80046e2:	f1c3 0c07 	rsb	ip, r3, #7
 80046e6:	f1bc 0f04 	cmp.w	ip, #4
 80046ea:	bf28      	it	cs
 80046ec:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80046f0:	f103 0e04 	add.w	lr, r3, #4
 80046f4:	f1be 0f06 	cmp.w	lr, #6
 80046f8:	d918      	bls.n	800472c <HAL_NVIC_SetPriority+0x54>
 80046fa:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80046fc:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 8004700:	fa0e fc0c 	lsl.w	ip, lr, ip
 8004704:	ea21 010c 	bic.w	r1, r1, ip
 8004708:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800470a:	fa0e f303 	lsl.w	r3, lr, r3
 800470e:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004712:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8004714:	2800      	cmp	r0, #0
 8004716:	db0b      	blt.n	8004730 <HAL_NVIC_SetPriority+0x58>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004718:	0109      	lsls	r1, r1, #4
 800471a:	b2c9      	uxtb	r1, r1
 800471c:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8004720:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8004724:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8004728:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800472c:	2300      	movs	r3, #0
 800472e:	e7e5      	b.n	80046fc <HAL_NVIC_SetPriority+0x24>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004730:	f000 000f 	and.w	r0, r0, #15
 8004734:	0109      	lsls	r1, r1, #4
 8004736:	b2c9      	uxtb	r1, r1
 8004738:	4b02      	ldr	r3, [pc, #8]	; (8004744 <HAL_NVIC_SetPriority+0x6c>)
 800473a:	5419      	strb	r1, [r3, r0]
 800473c:	e7f4      	b.n	8004728 <HAL_NVIC_SetPriority+0x50>
 800473e:	bf00      	nop
 8004740:	e000ed00 	.word	0xe000ed00
 8004744:	e000ed14 	.word	0xe000ed14

08004748 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004748:	2800      	cmp	r0, #0
 800474a:	db07      	blt.n	800475c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800474c:	f000 021f 	and.w	r2, r0, #31
 8004750:	0940      	lsrs	r0, r0, #5
 8004752:	2301      	movs	r3, #1
 8004754:	4093      	lsls	r3, r2
 8004756:	4a02      	ldr	r2, [pc, #8]	; (8004760 <HAL_NVIC_EnableIRQ+0x18>)
 8004758:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800475c:	4770      	bx	lr
 800475e:	bf00      	nop
 8004760:	e000e100 	.word	0xe000e100

08004764 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004764:	3801      	subs	r0, #1
 8004766:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800476a:	d20b      	bcs.n	8004784 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800476c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8004770:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004772:	4a05      	ldr	r2, [pc, #20]	; (8004788 <HAL_SYSTICK_Config+0x24>)
 8004774:	21f0      	movs	r1, #240	; 0xf0
 8004776:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800477a:	2000      	movs	r0, #0
 800477c:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800477e:	2207      	movs	r2, #7
 8004780:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004782:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8004784:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8004786:	4770      	bx	lr
 8004788:	e000ed00 	.word	0xe000ed00

0800478c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800478c:	b430      	push	{r4, r5}
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800478e:	2401      	movs	r4, #1
 8004790:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8004792:	40ac      	lsls	r4, r5
 8004794:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 8004796:	606c      	str	r4, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004798:	6804      	ldr	r4, [r0, #0]
 800479a:	6063      	str	r3, [r4, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800479c:	6843      	ldr	r3, [r0, #4]
 800479e:	2b10      	cmp	r3, #16
 80047a0:	d005      	beq.n	80047ae <DMA_SetConfig+0x22>
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 80047a2:	6803      	ldr	r3, [r0, #0]
 80047a4:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 80047a6:	6803      	ldr	r3, [r0, #0]
 80047a8:	60da      	str	r2, [r3, #12]
  }
}
 80047aa:	bc30      	pop	{r4, r5}
 80047ac:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 80047ae:	6803      	ldr	r3, [r0, #0]
 80047b0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 80047b2:	6803      	ldr	r3, [r0, #0]
 80047b4:	60d9      	str	r1, [r3, #12]
 80047b6:	e7f8      	b.n	80047aa <DMA_SetConfig+0x1e>

080047b8 <DMA_CalcBaseAndBitshift>:
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80047b8:	6802      	ldr	r2, [r0, #0]
 80047ba:	4b0c      	ldr	r3, [pc, #48]	; (80047ec <DMA_CalcBaseAndBitshift+0x34>)
 80047bc:	429a      	cmp	r2, r3
 80047be:	d80a      	bhi.n	80047d6 <DMA_CalcBaseAndBitshift+0x1e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80047c0:	4b0b      	ldr	r3, [pc, #44]	; (80047f0 <DMA_CalcBaseAndBitshift+0x38>)
 80047c2:	4413      	add	r3, r2
 80047c4:	4a0b      	ldr	r2, [pc, #44]	; (80047f4 <DMA_CalcBaseAndBitshift+0x3c>)
 80047c6:	fba2 2303 	umull	r2, r3, r2, r3
 80047ca:	091b      	lsrs	r3, r3, #4
 80047cc:	009b      	lsls	r3, r3, #2
 80047ce:	6403      	str	r3, [r0, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 80047d0:	4b09      	ldr	r3, [pc, #36]	; (80047f8 <DMA_CalcBaseAndBitshift+0x40>)
 80047d2:	63c3      	str	r3, [r0, #60]	; 0x3c
 80047d4:	4770      	bx	lr
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80047d6:	4b09      	ldr	r3, [pc, #36]	; (80047fc <DMA_CalcBaseAndBitshift+0x44>)
 80047d8:	4413      	add	r3, r2
 80047da:	4a06      	ldr	r2, [pc, #24]	; (80047f4 <DMA_CalcBaseAndBitshift+0x3c>)
 80047dc:	fba2 2303 	umull	r2, r3, r2, r3
 80047e0:	091b      	lsrs	r3, r3, #4
 80047e2:	009b      	lsls	r3, r3, #2
 80047e4:	6403      	str	r3, [r0, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 80047e6:	4b06      	ldr	r3, [pc, #24]	; (8004800 <DMA_CalcBaseAndBitshift+0x48>)
 80047e8:	63c3      	str	r3, [r0, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 80047ea:	4770      	bx	lr
 80047ec:	40020407 	.word	0x40020407
 80047f0:	bffdfff8 	.word	0xbffdfff8
 80047f4:	cccccccd 	.word	0xcccccccd
 80047f8:	40020000 	.word	0x40020000
 80047fc:	bffdfbf8 	.word	0xbffdfbf8
 8004800:	40020400 	.word	0x40020400

08004804 <HAL_DMA_Init>:
  if(NULL == hdma)
 8004804:	b320      	cbz	r0, 8004850 <HAL_DMA_Init+0x4c>
{
 8004806:	b510      	push	{r4, lr}
 8004808:	4604      	mov	r4, r0
  hdma->State = HAL_DMA_STATE_BUSY;
 800480a:	2302      	movs	r3, #2
 800480c:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  tmp = hdma->Instance->CCR;
 8004810:	6801      	ldr	r1, [r0, #0]
 8004812:	680a      	ldr	r2, [r1, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004814:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
 8004818:	f022 0230 	bic.w	r2, r2, #48	; 0x30
  tmp |=  hdma->Init.Direction        |
 800481c:	6843      	ldr	r3, [r0, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800481e:	6880      	ldr	r0, [r0, #8]
  tmp |=  hdma->Init.Direction        |
 8004820:	4303      	orrs	r3, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004822:	68e0      	ldr	r0, [r4, #12]
 8004824:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004826:	6920      	ldr	r0, [r4, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004828:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800482a:	6960      	ldr	r0, [r4, #20]
 800482c:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 800482e:	69a0      	ldr	r0, [r4, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004830:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8004832:	69e0      	ldr	r0, [r4, #28]
 8004834:	4303      	orrs	r3, r0
  tmp |=  hdma->Init.Direction        |
 8004836:	4313      	orrs	r3, r2
  hdma->Instance->CCR = tmp;
 8004838:	600b      	str	r3, [r1, #0]
  DMA_CalcBaseAndBitshift(hdma);
 800483a:	4620      	mov	r0, r4
 800483c:	f7ff ffbc 	bl	80047b8 <DMA_CalcBaseAndBitshift>
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004840:	2000      	movs	r0, #0
 8004842:	63a0      	str	r0, [r4, #56]	; 0x38
  hdma->State = HAL_DMA_STATE_READY;
 8004844:	2301      	movs	r3, #1
 8004846:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  hdma->Lock = HAL_UNLOCKED;
 800484a:	f884 0020 	strb.w	r0, [r4, #32]
}
 800484e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8004850:	2001      	movs	r0, #1
}
 8004852:	4770      	bx	lr

08004854 <HAL_DMA_Start_IT>:
{
 8004854:	b538      	push	{r3, r4, r5, lr}
 8004856:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 8004858:	f890 0020 	ldrb.w	r0, [r0, #32]
 800485c:	2801      	cmp	r0, #1
 800485e:	d031      	beq.n	80048c4 <HAL_DMA_Start_IT+0x70>
 8004860:	2001      	movs	r0, #1
 8004862:	f884 0020 	strb.w	r0, [r4, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8004866:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
 800486a:	2801      	cmp	r0, #1
 800486c:	d004      	beq.n	8004878 <HAL_DMA_Start_IT+0x24>
    __HAL_UNLOCK(hdma);
 800486e:	2300      	movs	r3, #0
 8004870:	f884 3020 	strb.w	r3, [r4, #32]
    status = HAL_BUSY;
 8004874:	2002      	movs	r0, #2
}
 8004876:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8004878:	2002      	movs	r0, #2
 800487a:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800487e:	2000      	movs	r0, #0
 8004880:	63a0      	str	r0, [r4, #56]	; 0x38
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004882:	6825      	ldr	r5, [r4, #0]
 8004884:	6828      	ldr	r0, [r5, #0]
 8004886:	f020 0001 	bic.w	r0, r0, #1
 800488a:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800488c:	4620      	mov	r0, r4
 800488e:	f7ff ff7d 	bl	800478c <DMA_SetConfig>
    if(NULL != hdma->XferHalfCpltCallback )
 8004892:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004894:	b15b      	cbz	r3, 80048ae <HAL_DMA_Start_IT+0x5a>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004896:	6822      	ldr	r2, [r4, #0]
 8004898:	6813      	ldr	r3, [r2, #0]
 800489a:	f043 030e 	orr.w	r3, r3, #14
 800489e:	6013      	str	r3, [r2, #0]
    hdma->Instance->CCR |= DMA_CCR_EN;
 80048a0:	6822      	ldr	r2, [r4, #0]
 80048a2:	6813      	ldr	r3, [r2, #0]
 80048a4:	f043 0301 	orr.w	r3, r3, #1
 80048a8:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80048aa:	2000      	movs	r0, #0
 80048ac:	e7e3      	b.n	8004876 <HAL_DMA_Start_IT+0x22>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80048ae:	6822      	ldr	r2, [r4, #0]
 80048b0:	6813      	ldr	r3, [r2, #0]
 80048b2:	f043 030a 	orr.w	r3, r3, #10
 80048b6:	6013      	str	r3, [r2, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 80048b8:	6822      	ldr	r2, [r4, #0]
 80048ba:	6813      	ldr	r3, [r2, #0]
 80048bc:	f023 0304 	bic.w	r3, r3, #4
 80048c0:	6013      	str	r3, [r2, #0]
 80048c2:	e7ed      	b.n	80048a0 <HAL_DMA_Start_IT+0x4c>
  __HAL_LOCK(hdma);
 80048c4:	2002      	movs	r0, #2
 80048c6:	e7d6      	b.n	8004876 <HAL_DMA_Start_IT+0x22>

080048c8 <HAL_DMA_Abort>:
  if(NULL == hdma)
 80048c8:	4603      	mov	r3, r0
 80048ca:	b300      	cbz	r0, 800490e <HAL_DMA_Abort+0x46>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80048cc:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
 80048d0:	2a02      	cmp	r2, #2
 80048d2:	d006      	beq.n	80048e2 <HAL_DMA_Abort+0x1a>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80048d4:	2204      	movs	r2, #4
 80048d6:	6382      	str	r2, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 80048d8:	2200      	movs	r2, #0
 80048da:	f880 2020 	strb.w	r2, [r0, #32]
    return HAL_ERROR;
 80048de:	2001      	movs	r0, #1
 80048e0:	4770      	bx	lr
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80048e2:	6801      	ldr	r1, [r0, #0]
 80048e4:	680a      	ldr	r2, [r1, #0]
 80048e6:	f022 020e 	bic.w	r2, r2, #14
 80048ea:	600a      	str	r2, [r1, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80048ec:	6801      	ldr	r1, [r0, #0]
 80048ee:	680a      	ldr	r2, [r1, #0]
 80048f0:	f022 0201 	bic.w	r2, r2, #1
 80048f4:	600a      	str	r2, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80048f6:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80048f8:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 80048fa:	2101      	movs	r1, #1
 80048fc:	fa01 f202 	lsl.w	r2, r1, r2
 8004900:	6042      	str	r2, [r0, #4]
  hdma->State = HAL_DMA_STATE_READY;
 8004902:	f883 1021 	strb.w	r1, [r3, #33]	; 0x21
  __HAL_UNLOCK(hdma);
 8004906:	2000      	movs	r0, #0
 8004908:	f883 0020 	strb.w	r0, [r3, #32]
  return HAL_OK;
 800490c:	4770      	bx	lr
    return HAL_ERROR;
 800490e:	2001      	movs	r0, #1
}
 8004910:	4770      	bx	lr

08004912 <HAL_DMA_Abort_IT>:
{
 8004912:	b508      	push	{r3, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004914:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8004918:	2b02      	cmp	r3, #2
 800491a:	d003      	beq.n	8004924 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800491c:	2304      	movs	r3, #4
 800491e:	6383      	str	r3, [r0, #56]	; 0x38
    status = HAL_ERROR;
 8004920:	2001      	movs	r0, #1
}
 8004922:	bd08      	pop	{r3, pc}
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004924:	6802      	ldr	r2, [r0, #0]
 8004926:	6813      	ldr	r3, [r2, #0]
 8004928:	f023 030e 	bic.w	r3, r3, #14
 800492c:	6013      	str	r3, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800492e:	6802      	ldr	r2, [r0, #0]
 8004930:	6813      	ldr	r3, [r2, #0]
 8004932:	f023 0301 	bic.w	r3, r3, #1
 8004936:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8004938:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800493a:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 800493c:	2201      	movs	r2, #1
 800493e:	fa02 f303 	lsl.w	r3, r2, r3
 8004942:	604b      	str	r3, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8004944:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8004948:	2300      	movs	r3, #0
 800494a:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 800494e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004950:	b113      	cbz	r3, 8004958 <HAL_DMA_Abort_IT+0x46>
      hdma->XferAbortCallback(hdma);
 8004952:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8004954:	2000      	movs	r0, #0
 8004956:	e7e4      	b.n	8004922 <HAL_DMA_Abort_IT+0x10>
 8004958:	2000      	movs	r0, #0
 800495a:	e7e2      	b.n	8004922 <HAL_DMA_Abort_IT+0x10>

0800495c <HAL_DMA_IRQHandler>:
{
 800495c:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800495e:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8004960:	681a      	ldr	r2, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8004962:	6804      	ldr	r4, [r0, #0]
 8004964:	6825      	ldr	r5, [r4, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8004966:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8004968:	2304      	movs	r3, #4
 800496a:	408b      	lsls	r3, r1
 800496c:	4213      	tst	r3, r2
 800496e:	d013      	beq.n	8004998 <HAL_DMA_IRQHandler+0x3c>
 8004970:	f015 0f04 	tst.w	r5, #4
 8004974:	d010      	beq.n	8004998 <HAL_DMA_IRQHandler+0x3c>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004976:	6823      	ldr	r3, [r4, #0]
 8004978:	f013 0f20 	tst.w	r3, #32
 800497c:	d103      	bne.n	8004986 <HAL_DMA_IRQHandler+0x2a>
      hdma->Instance->CCR &= ~DMA_IT_HT;
 800497e:	6823      	ldr	r3, [r4, #0]
 8004980:	f023 0304 	bic.w	r3, r3, #4
 8004984:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8004986:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8004988:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800498a:	2304      	movs	r3, #4
 800498c:	408b      	lsls	r3, r1
 800498e:	6053      	str	r3, [r2, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8004990:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8004992:	b103      	cbz	r3, 8004996 <HAL_DMA_IRQHandler+0x3a>
      hdma->XferHalfCpltCallback(hdma);
 8004994:	4798      	blx	r3
}
 8004996:	bd38      	pop	{r3, r4, r5, pc}
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8004998:	2302      	movs	r3, #2
 800499a:	408b      	lsls	r3, r1
 800499c:	4213      	tst	r3, r2
 800499e:	d01a      	beq.n	80049d6 <HAL_DMA_IRQHandler+0x7a>
 80049a0:	f015 0f02 	tst.w	r5, #2
 80049a4:	d017      	beq.n	80049d6 <HAL_DMA_IRQHandler+0x7a>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80049a6:	6823      	ldr	r3, [r4, #0]
 80049a8:	f013 0f20 	tst.w	r3, #32
 80049ac:	d106      	bne.n	80049bc <HAL_DMA_IRQHandler+0x60>
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80049ae:	6823      	ldr	r3, [r4, #0]
 80049b0:	f023 030a 	bic.w	r3, r3, #10
 80049b4:	6023      	str	r3, [r4, #0]
      hdma->State = HAL_DMA_STATE_READY;
 80049b6:	2301      	movs	r3, #1
 80049b8:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80049bc:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80049be:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80049c0:	2302      	movs	r3, #2
 80049c2:	408b      	lsls	r3, r1
 80049c4:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 80049c6:	2300      	movs	r3, #0
 80049c8:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 80049cc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d0e1      	beq.n	8004996 <HAL_DMA_IRQHandler+0x3a>
      hdma->XferCpltCallback(hdma);
 80049d2:	4798      	blx	r3
 80049d4:	e7df      	b.n	8004996 <HAL_DMA_IRQHandler+0x3a>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80049d6:	2308      	movs	r3, #8
 80049d8:	fa03 f101 	lsl.w	r1, r3, r1
 80049dc:	4211      	tst	r1, r2
 80049de:	d0da      	beq.n	8004996 <HAL_DMA_IRQHandler+0x3a>
 80049e0:	f015 0f08 	tst.w	r5, #8
 80049e4:	d0d7      	beq.n	8004996 <HAL_DMA_IRQHandler+0x3a>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80049e6:	6823      	ldr	r3, [r4, #0]
 80049e8:	f023 030e 	bic.w	r3, r3, #14
 80049ec:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80049ee:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80049f0:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 80049f2:	2301      	movs	r3, #1
 80049f4:	fa03 f202 	lsl.w	r2, r3, r2
 80049f8:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80049fa:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 80049fc:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8004a00:	2300      	movs	r3, #0
 8004a02:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferErrorCallback != NULL)
 8004a06:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d0c4      	beq.n	8004996 <HAL_DMA_IRQHandler+0x3a>
      hdma->XferErrorCallback(hdma);
 8004a0c:	4798      	blx	r3
}
 8004a0e:	e7c2      	b.n	8004996 <HAL_DMA_IRQHandler+0x3a>

08004a10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004a10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a12:	b083      	sub	sp, #12
  uint32_t position = 0x00u;
 8004a14:	2300      	movs	r3, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004a16:	e062      	b.n	8004ade <HAL_GPIO_Init+0xce>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004a18:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8004a1a:	005e      	lsls	r6, r3, #1
 8004a1c:	2403      	movs	r4, #3
 8004a1e:	40b4      	lsls	r4, r6
 8004a20:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004a24:	68cc      	ldr	r4, [r1, #12]
 8004a26:	40b4      	lsls	r4, r6
 8004a28:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8004a2a:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004a2c:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004a2e:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004a32:	684c      	ldr	r4, [r1, #4]
 8004a34:	f3c4 1400 	ubfx	r4, r4, #4, #1
 8004a38:	409c      	lsls	r4, r3
 8004a3a:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->OTYPER = temp;
 8004a3e:	6044      	str	r4, [r0, #4]
 8004a40:	e05e      	b.n	8004b00 <HAL_GPIO_Init+0xf0>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004a42:	08dd      	lsrs	r5, r3, #3
 8004a44:	3508      	adds	r5, #8
 8004a46:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004a4a:	f003 0407 	and.w	r4, r3, #7
 8004a4e:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8004a52:	240f      	movs	r4, #15
 8004a54:	fa04 f40c 	lsl.w	r4, r4, ip
 8004a58:	ea26 0e04 	bic.w	lr, r6, r4
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004a5c:	690c      	ldr	r4, [r1, #16]
 8004a5e:	fa04 f40c 	lsl.w	r4, r4, ip
 8004a62:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3u] = temp;
 8004a66:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
 8004a6a:	e060      	b.n	8004b2e <HAL_GPIO_Init+0x11e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004a6c:	2404      	movs	r4, #4
 8004a6e:	e000      	b.n	8004a72 <HAL_GPIO_Init+0x62>
 8004a70:	2400      	movs	r4, #0
 8004a72:	fa04 f40e 	lsl.w	r4, r4, lr
 8004a76:	432c      	orrs	r4, r5
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004a78:	f10c 0c02 	add.w	ip, ip, #2
 8004a7c:	4d52      	ldr	r5, [pc, #328]	; (8004bc8 <HAL_GPIO_Init+0x1b8>)
 8004a7e:	f845 402c 	str.w	r4, [r5, ip, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004a82:	4c52      	ldr	r4, [pc, #328]	; (8004bcc <HAL_GPIO_Init+0x1bc>)
 8004a84:	68a5      	ldr	r5, [r4, #8]
        temp &= ~(iocurrent);
 8004a86:	43d4      	mvns	r4, r2
 8004a88:	ea25 0602 	bic.w	r6, r5, r2
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004a8c:	684f      	ldr	r7, [r1, #4]
 8004a8e:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8004a92:	d001      	beq.n	8004a98 <HAL_GPIO_Init+0x88>
        {
          temp |= iocurrent;
 8004a94:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR = temp;
 8004a98:	4d4c      	ldr	r5, [pc, #304]	; (8004bcc <HAL_GPIO_Init+0x1bc>)
 8004a9a:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR;
 8004a9c:	68ed      	ldr	r5, [r5, #12]
        temp &= ~(iocurrent);
 8004a9e:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004aa2:	684f      	ldr	r7, [r1, #4]
 8004aa4:	f417 1f00 	tst.w	r7, #2097152	; 0x200000
 8004aa8:	d001      	beq.n	8004aae <HAL_GPIO_Init+0x9e>
        {
          temp |= iocurrent;
 8004aaa:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->FTSR = temp;
 8004aae:	4d47      	ldr	r5, [pc, #284]	; (8004bcc <HAL_GPIO_Init+0x1bc>)
 8004ab0:	60ee      	str	r6, [r5, #12]

        temp = EXTI->EMR;
 8004ab2:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 8004ab4:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004ab8:	684f      	ldr	r7, [r1, #4]
 8004aba:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8004abe:	d001      	beq.n	8004ac4 <HAL_GPIO_Init+0xb4>
        {
          temp |= iocurrent;
 8004ac0:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->EMR = temp;
 8004ac4:	4d41      	ldr	r5, [pc, #260]	; (8004bcc <HAL_GPIO_Init+0x1bc>)
 8004ac6:	606e      	str	r6, [r5, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004ac8:	682d      	ldr	r5, [r5, #0]
        temp &= ~(iocurrent);
 8004aca:	402c      	ands	r4, r5
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004acc:	684e      	ldr	r6, [r1, #4]
 8004ace:	f416 3f80 	tst.w	r6, #65536	; 0x10000
 8004ad2:	d001      	beq.n	8004ad8 <HAL_GPIO_Init+0xc8>
        {
          temp |= iocurrent;
 8004ad4:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->IMR = temp;
 8004ad8:	4a3c      	ldr	r2, [pc, #240]	; (8004bcc <HAL_GPIO_Init+0x1bc>)
 8004ada:	6014      	str	r4, [r2, #0]
      }
    }

    position++;
 8004adc:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004ade:	680a      	ldr	r2, [r1, #0]
 8004ae0:	fa32 f403 	lsrs.w	r4, r2, r3
 8004ae4:	d06e      	beq.n	8004bc4 <HAL_GPIO_Init+0x1b4>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004ae6:	f04f 0c01 	mov.w	ip, #1
 8004aea:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00u)
 8004aee:	ea1c 0202 	ands.w	r2, ip, r2
 8004af2:	d0f3      	beq.n	8004adc <HAL_GPIO_Init+0xcc>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004af4:	684c      	ldr	r4, [r1, #4]
 8004af6:	f004 0403 	and.w	r4, r4, #3
 8004afa:	3c01      	subs	r4, #1
 8004afc:	2c01      	cmp	r4, #1
 8004afe:	d98b      	bls.n	8004a18 <HAL_GPIO_Init+0x8>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004b00:	684c      	ldr	r4, [r1, #4]
 8004b02:	f004 0403 	and.w	r4, r4, #3
 8004b06:	2c03      	cmp	r4, #3
 8004b08:	d00c      	beq.n	8004b24 <HAL_GPIO_Init+0x114>
        temp = GPIOx->PUPDR;
 8004b0a:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8004b0c:	005d      	lsls	r5, r3, #1
 8004b0e:	f04f 0c03 	mov.w	ip, #3
 8004b12:	fa0c fc05 	lsl.w	ip, ip, r5
 8004b16:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004b1a:	688c      	ldr	r4, [r1, #8]
 8004b1c:	40ac      	lsls	r4, r5
 8004b1e:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->PUPDR = temp;
 8004b22:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004b24:	684c      	ldr	r4, [r1, #4]
 8004b26:	f004 0403 	and.w	r4, r4, #3
 8004b2a:	2c02      	cmp	r4, #2
 8004b2c:	d089      	beq.n	8004a42 <HAL_GPIO_Init+0x32>
      temp = GPIOx->MODER;
 8004b2e:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8004b30:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8004b34:	f04f 0c03 	mov.w	ip, #3
 8004b38:	fa0c fc0e 	lsl.w	ip, ip, lr
 8004b3c:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004b40:	684c      	ldr	r4, [r1, #4]
 8004b42:	f004 0403 	and.w	r4, r4, #3
 8004b46:	fa04 f40e 	lsl.w	r4, r4, lr
 8004b4a:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 8004b4e:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004b50:	684c      	ldr	r4, [r1, #4]
 8004b52:	f414 3f40 	tst.w	r4, #196608	; 0x30000
 8004b56:	d0c1      	beq.n	8004adc <HAL_GPIO_Init+0xcc>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b58:	4c1d      	ldr	r4, [pc, #116]	; (8004bd0 <HAL_GPIO_Init+0x1c0>)
 8004b5a:	69a5      	ldr	r5, [r4, #24]
 8004b5c:	f045 0501 	orr.w	r5, r5, #1
 8004b60:	61a5      	str	r5, [r4, #24]
 8004b62:	69a4      	ldr	r4, [r4, #24]
 8004b64:	f004 0401 	and.w	r4, r4, #1
 8004b68:	9401      	str	r4, [sp, #4]
 8004b6a:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 8004b6c:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 8004b70:	f10c 0502 	add.w	r5, ip, #2
 8004b74:	4c14      	ldr	r4, [pc, #80]	; (8004bc8 <HAL_GPIO_Init+0x1b8>)
 8004b76:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004b7a:	f003 0403 	and.w	r4, r3, #3
 8004b7e:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8004b82:	240f      	movs	r4, #15
 8004b84:	fa04 f40e 	lsl.w	r4, r4, lr
 8004b88:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004b8c:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8004b90:	f43f af6e 	beq.w	8004a70 <HAL_GPIO_Init+0x60>
 8004b94:	4c0f      	ldr	r4, [pc, #60]	; (8004bd4 <HAL_GPIO_Init+0x1c4>)
 8004b96:	42a0      	cmp	r0, r4
 8004b98:	d00e      	beq.n	8004bb8 <HAL_GPIO_Init+0x1a8>
 8004b9a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004b9e:	42a0      	cmp	r0, r4
 8004ba0:	d00c      	beq.n	8004bbc <HAL_GPIO_Init+0x1ac>
 8004ba2:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004ba6:	42a0      	cmp	r0, r4
 8004ba8:	d00a      	beq.n	8004bc0 <HAL_GPIO_Init+0x1b0>
 8004baa:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004bae:	42a0      	cmp	r0, r4
 8004bb0:	f43f af5c 	beq.w	8004a6c <HAL_GPIO_Init+0x5c>
 8004bb4:	2405      	movs	r4, #5
 8004bb6:	e75c      	b.n	8004a72 <HAL_GPIO_Init+0x62>
 8004bb8:	2401      	movs	r4, #1
 8004bba:	e75a      	b.n	8004a72 <HAL_GPIO_Init+0x62>
 8004bbc:	2402      	movs	r4, #2
 8004bbe:	e758      	b.n	8004a72 <HAL_GPIO_Init+0x62>
 8004bc0:	2403      	movs	r4, #3
 8004bc2:	e756      	b.n	8004a72 <HAL_GPIO_Init+0x62>
  }
}
 8004bc4:	b003      	add	sp, #12
 8004bc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004bc8:	40010000 	.word	0x40010000
 8004bcc:	40010400 	.word	0x40010400
 8004bd0:	40021000 	.word	0x40021000
 8004bd4:	48000400 	.word	0x48000400

08004bd8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004bd8:	b10a      	cbz	r2, 8004bde <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004bda:	6181      	str	r1, [r0, #24]
 8004bdc:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004bde:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8004be0:	4770      	bx	lr
	...

08004be4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004be4:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004be6:	4b0a      	ldr	r3, [pc, #40]	; (8004c10 <HAL_MspInit+0x2c>)
 8004be8:	699a      	ldr	r2, [r3, #24]
 8004bea:	f042 0201 	orr.w	r2, r2, #1
 8004bee:	619a      	str	r2, [r3, #24]
 8004bf0:	699a      	ldr	r2, [r3, #24]
 8004bf2:	f002 0201 	and.w	r2, r2, #1
 8004bf6:	9200      	str	r2, [sp, #0]
 8004bf8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004bfa:	69da      	ldr	r2, [r3, #28]
 8004bfc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004c00:	61da      	str	r2, [r3, #28]
 8004c02:	69db      	ldr	r3, [r3, #28]
 8004c04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c08:	9301      	str	r3, [sp, #4]
 8004c0a:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004c0c:	b002      	add	sp, #8
 8004c0e:	4770      	bx	lr
 8004c10:	40021000 	.word	0x40021000

08004c14 <HAL_RCC_OscConfig>:
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004c14:	2800      	cmp	r0, #0
 8004c16:	f000 8301 	beq.w	800521c <HAL_RCC_OscConfig+0x608>
{
 8004c1a:	b570      	push	{r4, r5, r6, lr}
 8004c1c:	b082      	sub	sp, #8
 8004c1e:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c20:	6803      	ldr	r3, [r0, #0]
 8004c22:	f013 0f01 	tst.w	r3, #1
 8004c26:	d03b      	beq.n	8004ca0 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004c28:	4bb5      	ldr	r3, [pc, #724]	; (8004f00 <HAL_RCC_OscConfig+0x2ec>)
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	f003 030c 	and.w	r3, r3, #12
 8004c30:	2b04      	cmp	r3, #4
 8004c32:	d01e      	beq.n	8004c72 <HAL_RCC_OscConfig+0x5e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004c34:	4bb2      	ldr	r3, [pc, #712]	; (8004f00 <HAL_RCC_OscConfig+0x2ec>)
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	f003 030c 	and.w	r3, r3, #12
 8004c3c:	2b08      	cmp	r3, #8
 8004c3e:	d013      	beq.n	8004c68 <HAL_RCC_OscConfig+0x54>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c40:	6863      	ldr	r3, [r4, #4]
 8004c42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c46:	d068      	beq.n	8004d1a <HAL_RCC_OscConfig+0x106>
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	f040 8092 	bne.w	8004d72 <HAL_RCC_OscConfig+0x15e>
 8004c4e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004c52:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8004c56:	681a      	ldr	r2, [r3, #0]
 8004c58:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004c5c:	601a      	str	r2, [r3, #0]
 8004c5e:	681a      	ldr	r2, [r3, #0]
 8004c60:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004c64:	601a      	str	r2, [r3, #0]
 8004c66:	e05d      	b.n	8004d24 <HAL_RCC_OscConfig+0x110>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004c68:	4ba5      	ldr	r3, [pc, #660]	; (8004f00 <HAL_RCC_OscConfig+0x2ec>)
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8004c70:	d0e6      	beq.n	8004c40 <HAL_RCC_OscConfig+0x2c>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c72:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004c76:	fa93 f3a3 	rbit	r3, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c7a:	4ba1      	ldr	r3, [pc, #644]	; (8004f00 <HAL_RCC_OscConfig+0x2ec>)
 8004c7c:	6819      	ldr	r1, [r3, #0]
 8004c7e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004c82:	fa93 f3a3 	rbit	r3, r3
 8004c86:	fab3 f383 	clz	r3, r3
 8004c8a:	f003 031f 	and.w	r3, r3, #31
 8004c8e:	2201      	movs	r2, #1
 8004c90:	fa02 f303 	lsl.w	r3, r2, r3
 8004c94:	420b      	tst	r3, r1
 8004c96:	d003      	beq.n	8004ca0 <HAL_RCC_OscConfig+0x8c>
 8004c98:	6863      	ldr	r3, [r4, #4]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	f000 82c0 	beq.w	8005220 <HAL_RCC_OscConfig+0x60c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ca0:	6823      	ldr	r3, [r4, #0]
 8004ca2:	f013 0f02 	tst.w	r3, #2
 8004ca6:	f000 80c5 	beq.w	8004e34 <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004caa:	4b95      	ldr	r3, [pc, #596]	; (8004f00 <HAL_RCC_OscConfig+0x2ec>)
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	f013 0f0c 	tst.w	r3, #12
 8004cb2:	f000 809c 	beq.w	8004dee <HAL_RCC_OscConfig+0x1da>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004cb6:	4b92      	ldr	r3, [pc, #584]	; (8004f00 <HAL_RCC_OscConfig+0x2ec>)
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	f003 030c 	and.w	r3, r3, #12
 8004cbe:	2b08      	cmp	r3, #8
 8004cc0:	f000 808f 	beq.w	8004de2 <HAL_RCC_OscConfig+0x1ce>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004cc4:	6923      	ldr	r3, [r4, #16]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	f000 80f2 	beq.w	8004eb0 <HAL_RCC_OscConfig+0x29c>
 8004ccc:	2201      	movs	r2, #1
 8004cce:	fa92 f3a2 	rbit	r3, r2
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004cd2:	fab3 f383 	clz	r3, r3
 8004cd6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004cda:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004cde:	009b      	lsls	r3, r3, #2
 8004ce0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ce2:	f7ff fccd 	bl	8004680 <HAL_GetTick>
 8004ce6:	4605      	mov	r5, r0
 8004ce8:	2302      	movs	r3, #2
 8004cea:	fa93 f3a3 	rbit	r3, r3
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cee:	4b84      	ldr	r3, [pc, #528]	; (8004f00 <HAL_RCC_OscConfig+0x2ec>)
 8004cf0:	6819      	ldr	r1, [r3, #0]
 8004cf2:	2302      	movs	r3, #2
 8004cf4:	fa93 f3a3 	rbit	r3, r3
 8004cf8:	fab3 f383 	clz	r3, r3
 8004cfc:	f003 031f 	and.w	r3, r3, #31
 8004d00:	2201      	movs	r2, #1
 8004d02:	fa02 f303 	lsl.w	r3, r2, r3
 8004d06:	420b      	tst	r3, r1
 8004d08:	f040 80c3 	bne.w	8004e92 <HAL_RCC_OscConfig+0x27e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d0c:	f7ff fcb8 	bl	8004680 <HAL_GetTick>
 8004d10:	1b40      	subs	r0, r0, r5
 8004d12:	2802      	cmp	r0, #2
 8004d14:	d9e8      	bls.n	8004ce8 <HAL_RCC_OscConfig+0xd4>
          {
            return HAL_TIMEOUT;
 8004d16:	2003      	movs	r0, #3
 8004d18:	e28b      	b.n	8005232 <HAL_RCC_OscConfig+0x61e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d1a:	4a79      	ldr	r2, [pc, #484]	; (8004f00 <HAL_RCC_OscConfig+0x2ec>)
 8004d1c:	6813      	ldr	r3, [r2, #0]
 8004d1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d22:	6013      	str	r3, [r2, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004d24:	4a76      	ldr	r2, [pc, #472]	; (8004f00 <HAL_RCC_OscConfig+0x2ec>)
 8004d26:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004d28:	f023 030f 	bic.w	r3, r3, #15
 8004d2c:	68a1      	ldr	r1, [r4, #8]
 8004d2e:	430b      	orrs	r3, r1
 8004d30:	62d3      	str	r3, [r2, #44]	; 0x2c
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d32:	6863      	ldr	r3, [r4, #4]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d036      	beq.n	8004da6 <HAL_RCC_OscConfig+0x192>
        tickstart = HAL_GetTick();
 8004d38:	f7ff fca2 	bl	8004680 <HAL_GetTick>
 8004d3c:	4605      	mov	r5, r0
 8004d3e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004d42:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d46:	4b6e      	ldr	r3, [pc, #440]	; (8004f00 <HAL_RCC_OscConfig+0x2ec>)
 8004d48:	6819      	ldr	r1, [r3, #0]
 8004d4a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004d4e:	fa93 f3a3 	rbit	r3, r3
 8004d52:	fab3 f383 	clz	r3, r3
 8004d56:	f003 031f 	and.w	r3, r3, #31
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d60:	420b      	tst	r3, r1
 8004d62:	d19d      	bne.n	8004ca0 <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d64:	f7ff fc8c 	bl	8004680 <HAL_GetTick>
 8004d68:	1b40      	subs	r0, r0, r5
 8004d6a:	2864      	cmp	r0, #100	; 0x64
 8004d6c:	d9e7      	bls.n	8004d3e <HAL_RCC_OscConfig+0x12a>
            return HAL_TIMEOUT;
 8004d6e:	2003      	movs	r0, #3
 8004d70:	e25f      	b.n	8005232 <HAL_RCC_OscConfig+0x61e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d72:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d76:	d009      	beq.n	8004d8c <HAL_RCC_OscConfig+0x178>
 8004d78:	4b61      	ldr	r3, [pc, #388]	; (8004f00 <HAL_RCC_OscConfig+0x2ec>)
 8004d7a:	681a      	ldr	r2, [r3, #0]
 8004d7c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004d80:	601a      	str	r2, [r3, #0]
 8004d82:	681a      	ldr	r2, [r3, #0]
 8004d84:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004d88:	601a      	str	r2, [r3, #0]
 8004d8a:	e7cb      	b.n	8004d24 <HAL_RCC_OscConfig+0x110>
 8004d8c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004d90:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8004d94:	681a      	ldr	r2, [r3, #0]
 8004d96:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8004d9a:	601a      	str	r2, [r3, #0]
 8004d9c:	681a      	ldr	r2, [r3, #0]
 8004d9e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004da2:	601a      	str	r2, [r3, #0]
 8004da4:	e7be      	b.n	8004d24 <HAL_RCC_OscConfig+0x110>
        tickstart = HAL_GetTick();
 8004da6:	f7ff fc6b 	bl	8004680 <HAL_GetTick>
 8004daa:	4605      	mov	r5, r0
 8004dac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004db0:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004db4:	4b52      	ldr	r3, [pc, #328]	; (8004f00 <HAL_RCC_OscConfig+0x2ec>)
 8004db6:	6819      	ldr	r1, [r3, #0]
 8004db8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004dbc:	fa93 f3a3 	rbit	r3, r3
 8004dc0:	fab3 f383 	clz	r3, r3
 8004dc4:	f003 031f 	and.w	r3, r3, #31
 8004dc8:	2201      	movs	r2, #1
 8004dca:	fa02 f303 	lsl.w	r3, r2, r3
 8004dce:	420b      	tst	r3, r1
 8004dd0:	f43f af66 	beq.w	8004ca0 <HAL_RCC_OscConfig+0x8c>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004dd4:	f7ff fc54 	bl	8004680 <HAL_GetTick>
 8004dd8:	1b40      	subs	r0, r0, r5
 8004dda:	2864      	cmp	r0, #100	; 0x64
 8004ddc:	d9e6      	bls.n	8004dac <HAL_RCC_OscConfig+0x198>
            return HAL_TIMEOUT;
 8004dde:	2003      	movs	r0, #3
 8004de0:	e227      	b.n	8005232 <HAL_RCC_OscConfig+0x61e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004de2:	4b47      	ldr	r3, [pc, #284]	; (8004f00 <HAL_RCC_OscConfig+0x2ec>)
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8004dea:	f47f af6b 	bne.w	8004cc4 <HAL_RCC_OscConfig+0xb0>
 8004dee:	2302      	movs	r3, #2
 8004df0:	fa93 f3a3 	rbit	r3, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004df4:	4b42      	ldr	r3, [pc, #264]	; (8004f00 <HAL_RCC_OscConfig+0x2ec>)
 8004df6:	6819      	ldr	r1, [r3, #0]
 8004df8:	2302      	movs	r3, #2
 8004dfa:	fa93 f3a3 	rbit	r3, r3
 8004dfe:	fab3 f383 	clz	r3, r3
 8004e02:	f003 031f 	and.w	r3, r3, #31
 8004e06:	2201      	movs	r2, #1
 8004e08:	fa02 f303 	lsl.w	r3, r2, r3
 8004e0c:	420b      	tst	r3, r1
 8004e0e:	d003      	beq.n	8004e18 <HAL_RCC_OscConfig+0x204>
 8004e10:	6923      	ldr	r3, [r4, #16]
 8004e12:	4293      	cmp	r3, r2
 8004e14:	f040 8206 	bne.w	8005224 <HAL_RCC_OscConfig+0x610>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e18:	4839      	ldr	r0, [pc, #228]	; (8004f00 <HAL_RCC_OscConfig+0x2ec>)
 8004e1a:	6803      	ldr	r3, [r0, #0]
 8004e1c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004e20:	6961      	ldr	r1, [r4, #20]
 8004e22:	22f8      	movs	r2, #248	; 0xf8
 8004e24:	fa92 f2a2 	rbit	r2, r2
 8004e28:	fab2 f282 	clz	r2, r2
 8004e2c:	fa01 f202 	lsl.w	r2, r1, r2
 8004e30:	4313      	orrs	r3, r2
 8004e32:	6003      	str	r3, [r0, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e34:	6823      	ldr	r3, [r4, #0]
 8004e36:	f013 0f08 	tst.w	r3, #8
 8004e3a:	f000 808d 	beq.w	8004f58 <HAL_RCC_OscConfig+0x344>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004e3e:	69a3      	ldr	r3, [r4, #24]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d061      	beq.n	8004f08 <HAL_RCC_OscConfig+0x2f4>
 8004e44:	2101      	movs	r1, #1
 8004e46:	fa91 f2a1 	rbit	r2, r1
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e4a:	fab2 f282 	clz	r2, r2
 8004e4e:	4b2d      	ldr	r3, [pc, #180]	; (8004f04 <HAL_RCC_OscConfig+0x2f0>)
 8004e50:	4413      	add	r3, r2
 8004e52:	009b      	lsls	r3, r3, #2
 8004e54:	6019      	str	r1, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e56:	f7ff fc13 	bl	8004680 <HAL_GetTick>
 8004e5a:	4605      	mov	r5, r0
 8004e5c:	2302      	movs	r3, #2
 8004e5e:	fa93 f2a3 	rbit	r2, r3
 8004e62:	fa93 f2a3 	rbit	r2, r3
 8004e66:	fa93 f2a3 	rbit	r2, r3
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e6a:	4a25      	ldr	r2, [pc, #148]	; (8004f00 <HAL_RCC_OscConfig+0x2ec>)
 8004e6c:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8004e6e:	fa93 f3a3 	rbit	r3, r3
 8004e72:	fab3 f383 	clz	r3, r3
 8004e76:	f003 031f 	and.w	r3, r3, #31
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e80:	420b      	tst	r3, r1
 8004e82:	d169      	bne.n	8004f58 <HAL_RCC_OscConfig+0x344>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e84:	f7ff fbfc 	bl	8004680 <HAL_GetTick>
 8004e88:	1b40      	subs	r0, r0, r5
 8004e8a:	2802      	cmp	r0, #2
 8004e8c:	d9e6      	bls.n	8004e5c <HAL_RCC_OscConfig+0x248>
        {
          return HAL_TIMEOUT;
 8004e8e:	2003      	movs	r0, #3
 8004e90:	e1cf      	b.n	8005232 <HAL_RCC_OscConfig+0x61e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e92:	481b      	ldr	r0, [pc, #108]	; (8004f00 <HAL_RCC_OscConfig+0x2ec>)
 8004e94:	6803      	ldr	r3, [r0, #0]
 8004e96:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004e9a:	6961      	ldr	r1, [r4, #20]
 8004e9c:	22f8      	movs	r2, #248	; 0xf8
 8004e9e:	fa92 f2a2 	rbit	r2, r2
 8004ea2:	fab2 f282 	clz	r2, r2
 8004ea6:	fa01 f202 	lsl.w	r2, r1, r2
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	6003      	str	r3, [r0, #0]
 8004eae:	e7c1      	b.n	8004e34 <HAL_RCC_OscConfig+0x220>
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_HSI_DISABLE();
 8004eb6:	fab3 f383 	clz	r3, r3
 8004eba:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004ebe:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004ec2:	009b      	lsls	r3, r3, #2
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004ec8:	f7ff fbda 	bl	8004680 <HAL_GetTick>
 8004ecc:	4605      	mov	r5, r0
 8004ece:	2302      	movs	r3, #2
 8004ed0:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ed4:	4b0a      	ldr	r3, [pc, #40]	; (8004f00 <HAL_RCC_OscConfig+0x2ec>)
 8004ed6:	6819      	ldr	r1, [r3, #0]
 8004ed8:	2302      	movs	r3, #2
 8004eda:	fa93 f3a3 	rbit	r3, r3
 8004ede:	fab3 f383 	clz	r3, r3
 8004ee2:	f003 031f 	and.w	r3, r3, #31
 8004ee6:	2201      	movs	r2, #1
 8004ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8004eec:	420b      	tst	r3, r1
 8004eee:	d0a1      	beq.n	8004e34 <HAL_RCC_OscConfig+0x220>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ef0:	f7ff fbc6 	bl	8004680 <HAL_GetTick>
 8004ef4:	1b40      	subs	r0, r0, r5
 8004ef6:	2802      	cmp	r0, #2
 8004ef8:	d9e9      	bls.n	8004ece <HAL_RCC_OscConfig+0x2ba>
            return HAL_TIMEOUT;
 8004efa:	2003      	movs	r0, #3
 8004efc:	e199      	b.n	8005232 <HAL_RCC_OscConfig+0x61e>
 8004efe:	bf00      	nop
 8004f00:	40021000 	.word	0x40021000
 8004f04:	10908120 	.word	0x10908120
 8004f08:	2201      	movs	r2, #1
 8004f0a:	fa92 f2a2 	rbit	r2, r2
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f0e:	fab2 f282 	clz	r2, r2
 8004f12:	4bb7      	ldr	r3, [pc, #732]	; (80051f0 <HAL_RCC_OscConfig+0x5dc>)
 8004f14:	4413      	add	r3, r2
 8004f16:	009b      	lsls	r3, r3, #2
 8004f18:	2200      	movs	r2, #0
 8004f1a:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f1c:	f7ff fbb0 	bl	8004680 <HAL_GetTick>
 8004f20:	4605      	mov	r5, r0
 8004f22:	2302      	movs	r3, #2
 8004f24:	fa93 f2a3 	rbit	r2, r3
 8004f28:	fa93 f2a3 	rbit	r2, r3
 8004f2c:	fa93 f2a3 	rbit	r2, r3
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f30:	4ab0      	ldr	r2, [pc, #704]	; (80051f4 <HAL_RCC_OscConfig+0x5e0>)
 8004f32:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8004f34:	fa93 f3a3 	rbit	r3, r3
 8004f38:	fab3 f383 	clz	r3, r3
 8004f3c:	f003 031f 	and.w	r3, r3, #31
 8004f40:	2201      	movs	r2, #1
 8004f42:	fa02 f303 	lsl.w	r3, r2, r3
 8004f46:	420b      	tst	r3, r1
 8004f48:	d006      	beq.n	8004f58 <HAL_RCC_OscConfig+0x344>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004f4a:	f7ff fb99 	bl	8004680 <HAL_GetTick>
 8004f4e:	1b40      	subs	r0, r0, r5
 8004f50:	2802      	cmp	r0, #2
 8004f52:	d9e6      	bls.n	8004f22 <HAL_RCC_OscConfig+0x30e>
        {
          return HAL_TIMEOUT;
 8004f54:	2003      	movs	r0, #3
 8004f56:	e16c      	b.n	8005232 <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f58:	6823      	ldr	r3, [r4, #0]
 8004f5a:	f013 0f04 	tst.w	r3, #4
 8004f5e:	f000 80a9 	beq.w	80050b4 <HAL_RCC_OscConfig+0x4a0>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f62:	4ba4      	ldr	r3, [pc, #656]	; (80051f4 <HAL_RCC_OscConfig+0x5e0>)
 8004f64:	69db      	ldr	r3, [r3, #28]
 8004f66:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8004f6a:	d120      	bne.n	8004fae <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f6c:	4ba1      	ldr	r3, [pc, #644]	; (80051f4 <HAL_RCC_OscConfig+0x5e0>)
 8004f6e:	69da      	ldr	r2, [r3, #28]
 8004f70:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004f74:	61da      	str	r2, [r3, #28]
 8004f76:	69db      	ldr	r3, [r3, #28]
 8004f78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f7c:	9301      	str	r3, [sp, #4]
 8004f7e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8004f80:	2501      	movs	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f82:	4b9d      	ldr	r3, [pc, #628]	; (80051f8 <HAL_RCC_OscConfig+0x5e4>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004f8a:	d012      	beq.n	8004fb2 <HAL_RCC_OscConfig+0x39e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f8c:	68e3      	ldr	r3, [r4, #12]
 8004f8e:	2b01      	cmp	r3, #1
 8004f90:	d023      	beq.n	8004fda <HAL_RCC_OscConfig+0x3c6>
 8004f92:	bb73      	cbnz	r3, 8004ff2 <HAL_RCC_OscConfig+0x3de>
 8004f94:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004f98:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8004f9c:	6a1a      	ldr	r2, [r3, #32]
 8004f9e:	f022 0201 	bic.w	r2, r2, #1
 8004fa2:	621a      	str	r2, [r3, #32]
 8004fa4:	6a1a      	ldr	r2, [r3, #32]
 8004fa6:	f022 0204 	bic.w	r2, r2, #4
 8004faa:	621a      	str	r2, [r3, #32]
 8004fac:	e01a      	b.n	8004fe4 <HAL_RCC_OscConfig+0x3d0>
    FlagStatus       pwrclkchanged = RESET;
 8004fae:	2500      	movs	r5, #0
 8004fb0:	e7e7      	b.n	8004f82 <HAL_RCC_OscConfig+0x36e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004fb2:	4a91      	ldr	r2, [pc, #580]	; (80051f8 <HAL_RCC_OscConfig+0x5e4>)
 8004fb4:	6813      	ldr	r3, [r2, #0]
 8004fb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fba:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8004fbc:	f7ff fb60 	bl	8004680 <HAL_GetTick>
 8004fc0:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fc2:	4b8d      	ldr	r3, [pc, #564]	; (80051f8 <HAL_RCC_OscConfig+0x5e4>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004fca:	d1df      	bne.n	8004f8c <HAL_RCC_OscConfig+0x378>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fcc:	f7ff fb58 	bl	8004680 <HAL_GetTick>
 8004fd0:	1b80      	subs	r0, r0, r6
 8004fd2:	2864      	cmp	r0, #100	; 0x64
 8004fd4:	d9f5      	bls.n	8004fc2 <HAL_RCC_OscConfig+0x3ae>
          return HAL_TIMEOUT;
 8004fd6:	2003      	movs	r0, #3
 8004fd8:	e12b      	b.n	8005232 <HAL_RCC_OscConfig+0x61e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004fda:	4a86      	ldr	r2, [pc, #536]	; (80051f4 <HAL_RCC_OscConfig+0x5e0>)
 8004fdc:	6a13      	ldr	r3, [r2, #32]
 8004fde:	f043 0301 	orr.w	r3, r3, #1
 8004fe2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004fe4:	68e3      	ldr	r3, [r4, #12]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d03c      	beq.n	8005064 <HAL_RCC_OscConfig+0x450>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fea:	f7ff fb49 	bl	8004680 <HAL_GetTick>
 8004fee:	4606      	mov	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ff0:	e02b      	b.n	800504a <HAL_RCC_OscConfig+0x436>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ff2:	2b05      	cmp	r3, #5
 8004ff4:	d009      	beq.n	800500a <HAL_RCC_OscConfig+0x3f6>
 8004ff6:	4b7f      	ldr	r3, [pc, #508]	; (80051f4 <HAL_RCC_OscConfig+0x5e0>)
 8004ff8:	6a1a      	ldr	r2, [r3, #32]
 8004ffa:	f022 0201 	bic.w	r2, r2, #1
 8004ffe:	621a      	str	r2, [r3, #32]
 8005000:	6a1a      	ldr	r2, [r3, #32]
 8005002:	f022 0204 	bic.w	r2, r2, #4
 8005006:	621a      	str	r2, [r3, #32]
 8005008:	e7ec      	b.n	8004fe4 <HAL_RCC_OscConfig+0x3d0>
 800500a:	4b7a      	ldr	r3, [pc, #488]	; (80051f4 <HAL_RCC_OscConfig+0x5e0>)
 800500c:	6a1a      	ldr	r2, [r3, #32]
 800500e:	f042 0204 	orr.w	r2, r2, #4
 8005012:	621a      	str	r2, [r3, #32]
 8005014:	6a1a      	ldr	r2, [r3, #32]
 8005016:	f042 0201 	orr.w	r2, r2, #1
 800501a:	621a      	str	r2, [r3, #32]
 800501c:	e7e2      	b.n	8004fe4 <HAL_RCC_OscConfig+0x3d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800501e:	4b75      	ldr	r3, [pc, #468]	; (80051f4 <HAL_RCC_OscConfig+0x5e0>)
 8005020:	6a19      	ldr	r1, [r3, #32]
 8005022:	2302      	movs	r3, #2
 8005024:	fa93 f3a3 	rbit	r3, r3
 8005028:	fab3 f383 	clz	r3, r3
 800502c:	f003 031f 	and.w	r3, r3, #31
 8005030:	2201      	movs	r2, #1
 8005032:	fa02 f303 	lsl.w	r3, r2, r3
 8005036:	4219      	tst	r1, r3
 8005038:	d13b      	bne.n	80050b2 <HAL_RCC_OscConfig+0x49e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800503a:	f7ff fb21 	bl	8004680 <HAL_GetTick>
 800503e:	1b80      	subs	r0, r0, r6
 8005040:	f241 3388 	movw	r3, #5000	; 0x1388
 8005044:	4298      	cmp	r0, r3
 8005046:	f200 80ef 	bhi.w	8005228 <HAL_RCC_OscConfig+0x614>
 800504a:	2302      	movs	r3, #2
 800504c:	fa93 f2a3 	rbit	r2, r3
 8005050:	fa93 f3a3 	rbit	r3, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005054:	2b00      	cmp	r3, #0
 8005056:	d1e2      	bne.n	800501e <HAL_RCC_OscConfig+0x40a>
 8005058:	2302      	movs	r3, #2
 800505a:	fa93 f3a3 	rbit	r3, r3
 800505e:	4b65      	ldr	r3, [pc, #404]	; (80051f4 <HAL_RCC_OscConfig+0x5e0>)
 8005060:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005062:	e7de      	b.n	8005022 <HAL_RCC_OscConfig+0x40e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005064:	f7ff fb0c 	bl	8004680 <HAL_GetTick>
 8005068:	4606      	mov	r6, r0
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800506a:	e015      	b.n	8005098 <HAL_RCC_OscConfig+0x484>
 800506c:	4b61      	ldr	r3, [pc, #388]	; (80051f4 <HAL_RCC_OscConfig+0x5e0>)
 800506e:	6a19      	ldr	r1, [r3, #32]
 8005070:	2302      	movs	r3, #2
 8005072:	fa93 f3a3 	rbit	r3, r3
 8005076:	fab3 f383 	clz	r3, r3
 800507a:	f003 031f 	and.w	r3, r3, #31
 800507e:	2201      	movs	r2, #1
 8005080:	fa02 f303 	lsl.w	r3, r2, r3
 8005084:	4219      	tst	r1, r3
 8005086:	d014      	beq.n	80050b2 <HAL_RCC_OscConfig+0x49e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005088:	f7ff fafa 	bl	8004680 <HAL_GetTick>
 800508c:	1b80      	subs	r0, r0, r6
 800508e:	f241 3388 	movw	r3, #5000	; 0x1388
 8005092:	4298      	cmp	r0, r3
 8005094:	f200 80ca 	bhi.w	800522c <HAL_RCC_OscConfig+0x618>
 8005098:	2302      	movs	r3, #2
 800509a:	fa93 f2a3 	rbit	r2, r3
 800509e:	fa93 f3a3 	rbit	r3, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d1e2      	bne.n	800506c <HAL_RCC_OscConfig+0x458>
 80050a6:	2302      	movs	r3, #2
 80050a8:	fa93 f3a3 	rbit	r3, r3
 80050ac:	4b51      	ldr	r3, [pc, #324]	; (80051f4 <HAL_RCC_OscConfig+0x5e0>)
 80050ae:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80050b0:	e7de      	b.n	8005070 <HAL_RCC_OscConfig+0x45c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80050b2:	bbb5      	cbnz	r5, 8005122 <HAL_RCC_OscConfig+0x50e>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80050b4:	69e3      	ldr	r3, [r4, #28]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	f000 80ba 	beq.w	8005230 <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80050bc:	4a4d      	ldr	r2, [pc, #308]	; (80051f4 <HAL_RCC_OscConfig+0x5e0>)
 80050be:	6852      	ldr	r2, [r2, #4]
 80050c0:	f002 020c 	and.w	r2, r2, #12
 80050c4:	2a08      	cmp	r2, #8
 80050c6:	f000 8099 	beq.w	80051fc <HAL_RCC_OscConfig+0x5e8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80050ca:	2b02      	cmp	r3, #2
 80050cc:	d02f      	beq.n	800512e <HAL_RCC_OscConfig+0x51a>
 80050ce:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80050d2:	fa93 f3a3 	rbit	r3, r3
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050d6:	fab3 f383 	clz	r3, r3
 80050da:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80050de:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80050e2:	009b      	lsls	r3, r3, #2
 80050e4:	2200      	movs	r2, #0
 80050e6:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050e8:	f7ff faca 	bl	8004680 <HAL_GetTick>
 80050ec:	4604      	mov	r4, r0
 80050ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80050f2:	fa93 f3a3 	rbit	r3, r3
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80050f6:	4b3f      	ldr	r3, [pc, #252]	; (80051f4 <HAL_RCC_OscConfig+0x5e0>)
 80050f8:	6819      	ldr	r1, [r3, #0]
 80050fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80050fe:	fa93 f3a3 	rbit	r3, r3
 8005102:	fab3 f383 	clz	r3, r3
 8005106:	f003 031f 	and.w	r3, r3, #31
 800510a:	2201      	movs	r2, #1
 800510c:	fa02 f303 	lsl.w	r3, r2, r3
 8005110:	4219      	tst	r1, r3
 8005112:	d06b      	beq.n	80051ec <HAL_RCC_OscConfig+0x5d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005114:	f7ff fab4 	bl	8004680 <HAL_GetTick>
 8005118:	1b00      	subs	r0, r0, r4
 800511a:	2802      	cmp	r0, #2
 800511c:	d9e7      	bls.n	80050ee <HAL_RCC_OscConfig+0x4da>
          {
            return HAL_TIMEOUT;
 800511e:	2003      	movs	r0, #3
 8005120:	e087      	b.n	8005232 <HAL_RCC_OscConfig+0x61e>
      __HAL_RCC_PWR_CLK_DISABLE();
 8005122:	4a34      	ldr	r2, [pc, #208]	; (80051f4 <HAL_RCC_OscConfig+0x5e0>)
 8005124:	69d3      	ldr	r3, [r2, #28]
 8005126:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800512a:	61d3      	str	r3, [r2, #28]
 800512c:	e7c2      	b.n	80050b4 <HAL_RCC_OscConfig+0x4a0>
 800512e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005132:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8005136:	fab3 f383 	clz	r3, r3
 800513a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800513e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005142:	009b      	lsls	r3, r3, #2
 8005144:	2200      	movs	r2, #0
 8005146:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8005148:	f7ff fa9a 	bl	8004680 <HAL_GetTick>
 800514c:	4605      	mov	r5, r0
 800514e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005152:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005156:	4b27      	ldr	r3, [pc, #156]	; (80051f4 <HAL_RCC_OscConfig+0x5e0>)
 8005158:	6819      	ldr	r1, [r3, #0]
 800515a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800515e:	fa93 f3a3 	rbit	r3, r3
 8005162:	fab3 f383 	clz	r3, r3
 8005166:	f003 031f 	and.w	r3, r3, #31
 800516a:	2201      	movs	r2, #1
 800516c:	fa02 f303 	lsl.w	r3, r2, r3
 8005170:	4219      	tst	r1, r3
 8005172:	d006      	beq.n	8005182 <HAL_RCC_OscConfig+0x56e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005174:	f7ff fa84 	bl	8004680 <HAL_GetTick>
 8005178:	1b40      	subs	r0, r0, r5
 800517a:	2802      	cmp	r0, #2
 800517c:	d9e7      	bls.n	800514e <HAL_RCC_OscConfig+0x53a>
            return HAL_TIMEOUT;
 800517e:	2003      	movs	r0, #3
 8005180:	e057      	b.n	8005232 <HAL_RCC_OscConfig+0x61e>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005182:	491c      	ldr	r1, [pc, #112]	; (80051f4 <HAL_RCC_OscConfig+0x5e0>)
 8005184:	684b      	ldr	r3, [r1, #4]
 8005186:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 800518a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800518c:	6a20      	ldr	r0, [r4, #32]
 800518e:	4302      	orrs	r2, r0
 8005190:	4313      	orrs	r3, r2
 8005192:	604b      	str	r3, [r1, #4]
 8005194:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005198:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 800519c:	fab3 f383 	clz	r3, r3
 80051a0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80051a4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80051a8:	009b      	lsls	r3, r3, #2
 80051aa:	2201      	movs	r2, #1
 80051ac:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80051ae:	f7ff fa67 	bl	8004680 <HAL_GetTick>
 80051b2:	4604      	mov	r4, r0
 80051b4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80051b8:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80051bc:	4b0d      	ldr	r3, [pc, #52]	; (80051f4 <HAL_RCC_OscConfig+0x5e0>)
 80051be:	6819      	ldr	r1, [r3, #0]
 80051c0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80051c4:	fa93 f3a3 	rbit	r3, r3
 80051c8:	fab3 f383 	clz	r3, r3
 80051cc:	f003 031f 	and.w	r3, r3, #31
 80051d0:	2201      	movs	r2, #1
 80051d2:	fa02 f303 	lsl.w	r3, r2, r3
 80051d6:	4219      	tst	r1, r3
 80051d8:	d106      	bne.n	80051e8 <HAL_RCC_OscConfig+0x5d4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051da:	f7ff fa51 	bl	8004680 <HAL_GetTick>
 80051de:	1b00      	subs	r0, r0, r4
 80051e0:	2802      	cmp	r0, #2
 80051e2:	d9e7      	bls.n	80051b4 <HAL_RCC_OscConfig+0x5a0>
            return HAL_TIMEOUT;
 80051e4:	2003      	movs	r0, #3
 80051e6:	e024      	b.n	8005232 <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 80051e8:	2000      	movs	r0, #0
 80051ea:	e022      	b.n	8005232 <HAL_RCC_OscConfig+0x61e>
 80051ec:	2000      	movs	r0, #0
 80051ee:	e020      	b.n	8005232 <HAL_RCC_OscConfig+0x61e>
 80051f0:	10908120 	.word	0x10908120
 80051f4:	40021000 	.word	0x40021000
 80051f8:	40007000 	.word	0x40007000
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80051fc:	2b01      	cmp	r3, #1
 80051fe:	d01a      	beq.n	8005236 <HAL_RCC_OscConfig+0x622>
        pll_config = RCC->CFGR;
 8005200:	4b10      	ldr	r3, [pc, #64]	; (8005244 <HAL_RCC_OscConfig+0x630>)
 8005202:	685b      	ldr	r3, [r3, #4]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005204:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8005208:	6a22      	ldr	r2, [r4, #32]
 800520a:	4291      	cmp	r1, r2
 800520c:	d115      	bne.n	800523a <HAL_RCC_OscConfig+0x626>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800520e:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8005212:	6a62      	ldr	r2, [r4, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005214:	4293      	cmp	r3, r2
 8005216:	d112      	bne.n	800523e <HAL_RCC_OscConfig+0x62a>
  return HAL_OK;
 8005218:	2000      	movs	r0, #0
 800521a:	e00a      	b.n	8005232 <HAL_RCC_OscConfig+0x61e>
    return HAL_ERROR;
 800521c:	2001      	movs	r0, #1
}
 800521e:	4770      	bx	lr
        return HAL_ERROR;
 8005220:	2001      	movs	r0, #1
 8005222:	e006      	b.n	8005232 <HAL_RCC_OscConfig+0x61e>
        return HAL_ERROR;
 8005224:	2001      	movs	r0, #1
 8005226:	e004      	b.n	8005232 <HAL_RCC_OscConfig+0x61e>
          return HAL_TIMEOUT;
 8005228:	2003      	movs	r0, #3
 800522a:	e002      	b.n	8005232 <HAL_RCC_OscConfig+0x61e>
          return HAL_TIMEOUT;
 800522c:	2003      	movs	r0, #3
 800522e:	e000      	b.n	8005232 <HAL_RCC_OscConfig+0x61e>
  return HAL_OK;
 8005230:	2000      	movs	r0, #0
}
 8005232:	b002      	add	sp, #8
 8005234:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8005236:	2001      	movs	r0, #1
 8005238:	e7fb      	b.n	8005232 <HAL_RCC_OscConfig+0x61e>
          return HAL_ERROR;
 800523a:	2001      	movs	r0, #1
 800523c:	e7f9      	b.n	8005232 <HAL_RCC_OscConfig+0x61e>
 800523e:	2001      	movs	r0, #1
 8005240:	e7f7      	b.n	8005232 <HAL_RCC_OscConfig+0x61e>
 8005242:	bf00      	nop
 8005244:	40021000 	.word	0x40021000

08005248 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8005248:	4b11      	ldr	r3, [pc, #68]	; (8005290 <HAL_RCC_GetSysClockFreq+0x48>)
 800524a:	685a      	ldr	r2, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800524c:	f002 030c 	and.w	r3, r2, #12
 8005250:	2b04      	cmp	r3, #4
 8005252:	d018      	beq.n	8005286 <HAL_RCC_GetSysClockFreq+0x3e>
 8005254:	2b08      	cmp	r3, #8
 8005256:	d118      	bne.n	800528a <HAL_RCC_GetSysClockFreq+0x42>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8005258:	f3c2 4383 	ubfx	r3, r2, #18, #4
 800525c:	490d      	ldr	r1, [pc, #52]	; (8005294 <HAL_RCC_GetSysClockFreq+0x4c>)
 800525e:	5cc8      	ldrb	r0, [r1, r3]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8005260:	4b0b      	ldr	r3, [pc, #44]	; (8005290 <HAL_RCC_GetSysClockFreq+0x48>)
 8005262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005264:	f003 030f 	and.w	r3, r3, #15
 8005268:	490b      	ldr	r1, [pc, #44]	; (8005298 <HAL_RCC_GetSysClockFreq+0x50>)
 800526a:	5cc9      	ldrb	r1, [r1, r3]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800526c:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8005270:	d005      	beq.n	800527e <HAL_RCC_GetSysClockFreq+0x36>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005272:	4b0a      	ldr	r3, [pc, #40]	; (800529c <HAL_RCC_GetSysClockFreq+0x54>)
 8005274:	fbb3 f3f1 	udiv	r3, r3, r1
 8005278:	fb03 f000 	mul.w	r0, r3, r0
 800527c:	4770      	bx	lr
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800527e:	4b08      	ldr	r3, [pc, #32]	; (80052a0 <HAL_RCC_GetSysClockFreq+0x58>)
 8005280:	fb03 f000 	mul.w	r0, r3, r0
 8005284:	4770      	bx	lr
  switch (tmpreg & RCC_CFGR_SWS)
 8005286:	4805      	ldr	r0, [pc, #20]	; (800529c <HAL_RCC_GetSysClockFreq+0x54>)
 8005288:	4770      	bx	lr
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800528a:	4806      	ldr	r0, [pc, #24]	; (80052a4 <HAL_RCC_GetSysClockFreq+0x5c>)
      break;
    }
  }
  return sysclockfreq;
}
 800528c:	4770      	bx	lr
 800528e:	bf00      	nop
 8005290:	40021000 	.word	0x40021000
 8005294:	080072f8 	.word	0x080072f8
 8005298:	08007308 	.word	0x08007308
 800529c:	00f42400 	.word	0x00f42400
 80052a0:	003d0900 	.word	0x003d0900
 80052a4:	007a1200 	.word	0x007a1200

080052a8 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 80052a8:	2800      	cmp	r0, #0
 80052aa:	f000 80be 	beq.w	800542a <HAL_RCC_ClockConfig+0x182>
{
 80052ae:	b570      	push	{r4, r5, r6, lr}
 80052b0:	460d      	mov	r5, r1
 80052b2:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80052b4:	4b61      	ldr	r3, [pc, #388]	; (800543c <HAL_RCC_ClockConfig+0x194>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f003 0307 	and.w	r3, r3, #7
 80052bc:	428b      	cmp	r3, r1
 80052be:	d20b      	bcs.n	80052d8 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052c0:	4a5e      	ldr	r2, [pc, #376]	; (800543c <HAL_RCC_ClockConfig+0x194>)
 80052c2:	6813      	ldr	r3, [r2, #0]
 80052c4:	f023 0307 	bic.w	r3, r3, #7
 80052c8:	430b      	orrs	r3, r1
 80052ca:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80052cc:	6813      	ldr	r3, [r2, #0]
 80052ce:	f003 0307 	and.w	r3, r3, #7
 80052d2:	428b      	cmp	r3, r1
 80052d4:	f040 80ab 	bne.w	800542e <HAL_RCC_ClockConfig+0x186>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80052d8:	6823      	ldr	r3, [r4, #0]
 80052da:	f013 0f02 	tst.w	r3, #2
 80052de:	d006      	beq.n	80052ee <HAL_RCC_ClockConfig+0x46>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80052e0:	4a57      	ldr	r2, [pc, #348]	; (8005440 <HAL_RCC_ClockConfig+0x198>)
 80052e2:	6853      	ldr	r3, [r2, #4]
 80052e4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80052e8:	68a1      	ldr	r1, [r4, #8]
 80052ea:	430b      	orrs	r3, r1
 80052ec:	6053      	str	r3, [r2, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80052ee:	6823      	ldr	r3, [r4, #0]
 80052f0:	f013 0f01 	tst.w	r3, #1
 80052f4:	d05a      	beq.n	80053ac <HAL_RCC_ClockConfig+0x104>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80052f6:	6863      	ldr	r3, [r4, #4]
 80052f8:	2b01      	cmp	r3, #1
 80052fa:	d02d      	beq.n	8005358 <HAL_RCC_ClockConfig+0xb0>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80052fc:	2b02      	cmp	r3, #2
 80052fe:	d040      	beq.n	8005382 <HAL_RCC_ClockConfig+0xda>
 8005300:	2202      	movs	r2, #2
 8005302:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005306:	4a4e      	ldr	r2, [pc, #312]	; (8005440 <HAL_RCC_ClockConfig+0x198>)
 8005308:	6810      	ldr	r0, [r2, #0]
 800530a:	2202      	movs	r2, #2
 800530c:	fa92 f2a2 	rbit	r2, r2
 8005310:	fab2 f282 	clz	r2, r2
 8005314:	f002 021f 	and.w	r2, r2, #31
 8005318:	2101      	movs	r1, #1
 800531a:	fa01 f202 	lsl.w	r2, r1, r2
 800531e:	4210      	tst	r0, r2
 8005320:	f000 8087 	beq.w	8005432 <HAL_RCC_ClockConfig+0x18a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005324:	4946      	ldr	r1, [pc, #280]	; (8005440 <HAL_RCC_ClockConfig+0x198>)
 8005326:	684a      	ldr	r2, [r1, #4]
 8005328:	f022 0203 	bic.w	r2, r2, #3
 800532c:	4313      	orrs	r3, r2
 800532e:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8005330:	f7ff f9a6 	bl	8004680 <HAL_GetTick>
 8005334:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005336:	4b42      	ldr	r3, [pc, #264]	; (8005440 <HAL_RCC_ClockConfig+0x198>)
 8005338:	685b      	ldr	r3, [r3, #4]
 800533a:	f003 030c 	and.w	r3, r3, #12
 800533e:	6862      	ldr	r2, [r4, #4]
 8005340:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8005344:	d032      	beq.n	80053ac <HAL_RCC_ClockConfig+0x104>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005346:	f7ff f99b 	bl	8004680 <HAL_GetTick>
 800534a:	1b80      	subs	r0, r0, r6
 800534c:	f241 3388 	movw	r3, #5000	; 0x1388
 8005350:	4298      	cmp	r0, r3
 8005352:	d9f0      	bls.n	8005336 <HAL_RCC_ClockConfig+0x8e>
        return HAL_TIMEOUT;
 8005354:	2003      	movs	r0, #3
 8005356:	e067      	b.n	8005428 <HAL_RCC_ClockConfig+0x180>
 8005358:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800535c:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005360:	4a37      	ldr	r2, [pc, #220]	; (8005440 <HAL_RCC_ClockConfig+0x198>)
 8005362:	6810      	ldr	r0, [r2, #0]
 8005364:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005368:	fa92 f2a2 	rbit	r2, r2
 800536c:	fab2 f282 	clz	r2, r2
 8005370:	f002 021f 	and.w	r2, r2, #31
 8005374:	2101      	movs	r1, #1
 8005376:	fa01 f202 	lsl.w	r2, r1, r2
 800537a:	4202      	tst	r2, r0
 800537c:	d1d2      	bne.n	8005324 <HAL_RCC_ClockConfig+0x7c>
        return HAL_ERROR;
 800537e:	2001      	movs	r0, #1
 8005380:	e052      	b.n	8005428 <HAL_RCC_ClockConfig+0x180>
 8005382:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005386:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800538a:	4a2d      	ldr	r2, [pc, #180]	; (8005440 <HAL_RCC_ClockConfig+0x198>)
 800538c:	6810      	ldr	r0, [r2, #0]
 800538e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005392:	fa92 f2a2 	rbit	r2, r2
 8005396:	fab2 f282 	clz	r2, r2
 800539a:	f002 021f 	and.w	r2, r2, #31
 800539e:	2101      	movs	r1, #1
 80053a0:	fa01 f202 	lsl.w	r2, r1, r2
 80053a4:	4210      	tst	r0, r2
 80053a6:	d1bd      	bne.n	8005324 <HAL_RCC_ClockConfig+0x7c>
        return HAL_ERROR;
 80053a8:	2001      	movs	r0, #1
 80053aa:	e03d      	b.n	8005428 <HAL_RCC_ClockConfig+0x180>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80053ac:	4b23      	ldr	r3, [pc, #140]	; (800543c <HAL_RCC_ClockConfig+0x194>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f003 0307 	and.w	r3, r3, #7
 80053b4:	42ab      	cmp	r3, r5
 80053b6:	d90a      	bls.n	80053ce <HAL_RCC_ClockConfig+0x126>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053b8:	4a20      	ldr	r2, [pc, #128]	; (800543c <HAL_RCC_ClockConfig+0x194>)
 80053ba:	6813      	ldr	r3, [r2, #0]
 80053bc:	f023 0307 	bic.w	r3, r3, #7
 80053c0:	432b      	orrs	r3, r5
 80053c2:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80053c4:	6813      	ldr	r3, [r2, #0]
 80053c6:	f003 0307 	and.w	r3, r3, #7
 80053ca:	42ab      	cmp	r3, r5
 80053cc:	d133      	bne.n	8005436 <HAL_RCC_ClockConfig+0x18e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053ce:	6823      	ldr	r3, [r4, #0]
 80053d0:	f013 0f04 	tst.w	r3, #4
 80053d4:	d006      	beq.n	80053e4 <HAL_RCC_ClockConfig+0x13c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80053d6:	4a1a      	ldr	r2, [pc, #104]	; (8005440 <HAL_RCC_ClockConfig+0x198>)
 80053d8:	6853      	ldr	r3, [r2, #4]
 80053da:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80053de:	68e1      	ldr	r1, [r4, #12]
 80053e0:	430b      	orrs	r3, r1
 80053e2:	6053      	str	r3, [r2, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053e4:	6823      	ldr	r3, [r4, #0]
 80053e6:	f013 0f08 	tst.w	r3, #8
 80053ea:	d007      	beq.n	80053fc <HAL_RCC_ClockConfig+0x154>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80053ec:	4a14      	ldr	r2, [pc, #80]	; (8005440 <HAL_RCC_ClockConfig+0x198>)
 80053ee:	6853      	ldr	r3, [r2, #4]
 80053f0:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80053f4:	6921      	ldr	r1, [r4, #16]
 80053f6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80053fa:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80053fc:	f7ff ff24 	bl	8005248 <HAL_RCC_GetSysClockFreq>
 8005400:	4b0f      	ldr	r3, [pc, #60]	; (8005440 <HAL_RCC_ClockConfig+0x198>)
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005408:	22f0      	movs	r2, #240	; 0xf0
 800540a:	fa92 f2a2 	rbit	r2, r2
 800540e:	fab2 f282 	clz	r2, r2
 8005412:	40d3      	lsrs	r3, r2
 8005414:	4a0b      	ldr	r2, [pc, #44]	; (8005444 <HAL_RCC_ClockConfig+0x19c>)
 8005416:	5cd3      	ldrb	r3, [r2, r3]
 8005418:	40d8      	lsrs	r0, r3
 800541a:	4b0b      	ldr	r3, [pc, #44]	; (8005448 <HAL_RCC_ClockConfig+0x1a0>)
 800541c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 800541e:	4b0b      	ldr	r3, [pc, #44]	; (800544c <HAL_RCC_ClockConfig+0x1a4>)
 8005420:	6818      	ldr	r0, [r3, #0]
 8005422:	f7ff f8e9 	bl	80045f8 <HAL_InitTick>
  return HAL_OK;
 8005426:	2000      	movs	r0, #0
}
 8005428:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800542a:	2001      	movs	r0, #1
}
 800542c:	4770      	bx	lr
      return HAL_ERROR;
 800542e:	2001      	movs	r0, #1
 8005430:	e7fa      	b.n	8005428 <HAL_RCC_ClockConfig+0x180>
        return HAL_ERROR;
 8005432:	2001      	movs	r0, #1
 8005434:	e7f8      	b.n	8005428 <HAL_RCC_ClockConfig+0x180>
      return HAL_ERROR;
 8005436:	2001      	movs	r0, #1
 8005438:	e7f6      	b.n	8005428 <HAL_RCC_ClockConfig+0x180>
 800543a:	bf00      	nop
 800543c:	40022000 	.word	0x40022000
 8005440:	40021000 	.word	0x40021000
 8005444:	08007318 	.word	0x08007318
 8005448:	20000100 	.word	0x20000100
 800544c:	200000fc 	.word	0x200000fc

08005450 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8005450:	4b01      	ldr	r3, [pc, #4]	; (8005458 <HAL_RCC_GetHCLKFreq+0x8>)
 8005452:	6818      	ldr	r0, [r3, #0]
 8005454:	4770      	bx	lr
 8005456:	bf00      	nop
 8005458:	20000100 	.word	0x20000100

0800545c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800545c:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800545e:	f7ff fff7 	bl	8005450 <HAL_RCC_GetHCLKFreq>
 8005462:	4b07      	ldr	r3, [pc, #28]	; (8005480 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800546a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800546e:	fa92 f2a2 	rbit	r2, r2
 8005472:	fab2 f282 	clz	r2, r2
 8005476:	40d3      	lsrs	r3, r2
 8005478:	4a02      	ldr	r2, [pc, #8]	; (8005484 <HAL_RCC_GetPCLK1Freq+0x28>)
 800547a:	5cd3      	ldrb	r3, [r2, r3]
}    
 800547c:	40d8      	lsrs	r0, r3
 800547e:	bd08      	pop	{r3, pc}
 8005480:	40021000 	.word	0x40021000
 8005484:	08007328 	.word	0x08007328

08005488 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005488:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800548a:	f7ff ffe1 	bl	8005450 <HAL_RCC_GetHCLKFreq>
 800548e:	4b07      	ldr	r3, [pc, #28]	; (80054ac <HAL_RCC_GetPCLK2Freq+0x24>)
 8005490:	685b      	ldr	r3, [r3, #4]
 8005492:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8005496:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800549a:	fa92 f2a2 	rbit	r2, r2
 800549e:	fab2 f282 	clz	r2, r2
 80054a2:	40d3      	lsrs	r3, r2
 80054a4:	4a02      	ldr	r2, [pc, #8]	; (80054b0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80054a6:	5cd3      	ldrb	r3, [r2, r3]
} 
 80054a8:	40d8      	lsrs	r0, r3
 80054aa:	bd08      	pop	{r3, pc}
 80054ac:	40021000 	.word	0x40021000
 80054b0:	08007328 	.word	0x08007328

080054b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80054b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80054b6:	b083      	sub	sp, #12
 80054b8:	4604      	mov	r4, r0
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80054ba:	6803      	ldr	r3, [r0, #0]
 80054bc:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80054c0:	d048      	beq.n	8005554 <HAL_RCCEx_PeriphCLKConfig+0xa0>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80054c2:	4b91      	ldr	r3, [pc, #580]	; (8005708 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80054c4:	69db      	ldr	r3, [r3, #28]
 80054c6:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80054ca:	f040 80d4 	bne.w	8005676 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80054ce:	4b8e      	ldr	r3, [pc, #568]	; (8005708 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80054d0:	69da      	ldr	r2, [r3, #28]
 80054d2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80054d6:	61da      	str	r2, [r3, #28]
 80054d8:	69db      	ldr	r3, [r3, #28]
 80054da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054de:	9301      	str	r3, [sp, #4]
 80054e0:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80054e2:	2501      	movs	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054e4:	4b89      	ldr	r3, [pc, #548]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f413 7f80 	tst.w	r3, #256	; 0x100
 80054ec:	f000 80c5 	beq.w	800567a <HAL_RCCEx_PeriphCLKConfig+0x1c6>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80054f0:	4b85      	ldr	r3, [pc, #532]	; (8005708 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80054f2:	6a1b      	ldr	r3, [r3, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80054f4:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80054f8:	d022      	beq.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0x8c>
 80054fa:	6862      	ldr	r2, [r4, #4]
 80054fc:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8005500:	429a      	cmp	r2, r3
 8005502:	d01d      	beq.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005504:	4880      	ldr	r0, [pc, #512]	; (8005708 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005506:	6a01      	ldr	r1, [r0, #32]
 8005508:	f421 7640 	bic.w	r6, r1, #768	; 0x300
 800550c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005510:	fa93 f2a3 	rbit	r2, r3
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005514:	fab2 f282 	clz	r2, r2
 8005518:	4f7d      	ldr	r7, [pc, #500]	; (8005710 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800551a:	443a      	add	r2, r7
 800551c:	0092      	lsls	r2, r2, #2
 800551e:	f04f 0c01 	mov.w	ip, #1
 8005522:	f8c2 c000 	str.w	ip, [r2]
 8005526:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 800552a:	fab3 f383 	clz	r3, r3
 800552e:	443b      	add	r3, r7
 8005530:	009b      	lsls	r3, r3, #2
 8005532:	2200      	movs	r2, #0
 8005534:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005536:	6206      	str	r6, [r0, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005538:	f011 0f01 	tst.w	r1, #1
 800553c:	f040 80b2 	bne.w	80056a4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8005540:	4a71      	ldr	r2, [pc, #452]	; (8005708 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005542:	6a13      	ldr	r3, [r2, #32]
 8005544:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005548:	6861      	ldr	r1, [r4, #4]
 800554a:	430b      	orrs	r3, r1
 800554c:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800554e:	2d00      	cmp	r5, #0
 8005550:	f040 80cf 	bne.w	80056f2 <HAL_RCCEx_PeriphCLKConfig+0x23e>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005554:	6823      	ldr	r3, [r4, #0]
 8005556:	f013 0f01 	tst.w	r3, #1
 800555a:	d006      	beq.n	800556a <HAL_RCCEx_PeriphCLKConfig+0xb6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800555c:	4a6a      	ldr	r2, [pc, #424]	; (8005708 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800555e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8005560:	f023 0303 	bic.w	r3, r3, #3
 8005564:	68a1      	ldr	r1, [r4, #8]
 8005566:	430b      	orrs	r3, r1
 8005568:	6313      	str	r3, [r2, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800556a:	6823      	ldr	r3, [r4, #0]
 800556c:	f013 0f02 	tst.w	r3, #2
 8005570:	d006      	beq.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005572:	4a65      	ldr	r2, [pc, #404]	; (8005708 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005574:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8005576:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800557a:	68e1      	ldr	r1, [r4, #12]
 800557c:	430b      	orrs	r3, r1
 800557e:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005580:	6823      	ldr	r3, [r4, #0]
 8005582:	f013 0f04 	tst.w	r3, #4
 8005586:	d006      	beq.n	8005596 <HAL_RCCEx_PeriphCLKConfig+0xe2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005588:	4a5f      	ldr	r2, [pc, #380]	; (8005708 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800558a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800558c:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8005590:	6921      	ldr	r1, [r4, #16]
 8005592:	430b      	orrs	r3, r1
 8005594:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005596:	6823      	ldr	r3, [r4, #0]
 8005598:	f013 0f20 	tst.w	r3, #32
 800559c:	d006      	beq.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0xf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800559e:	4a5a      	ldr	r2, [pc, #360]	; (8005708 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80055a0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80055a2:	f023 0310 	bic.w	r3, r3, #16
 80055a6:	69e1      	ldr	r1, [r4, #28]
 80055a8:	430b      	orrs	r3, r1
 80055aa:	6313      	str	r3, [r2, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80055ac:	6823      	ldr	r3, [r4, #0]
 80055ae:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80055b2:	d006      	beq.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80055b4:	4a54      	ldr	r2, [pc, #336]	; (8005708 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80055b6:	6853      	ldr	r3, [r2, #4]
 80055b8:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80055bc:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80055be:	430b      	orrs	r3, r1
 80055c0:	6053      	str	r3, [r2, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80055c2:	6823      	ldr	r3, [r4, #0]
 80055c4:	f013 0f40 	tst.w	r3, #64	; 0x40
 80055c8:	d006      	beq.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80055ca:	4a4f      	ldr	r2, [pc, #316]	; (8005708 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80055cc:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80055ce:	f023 0320 	bic.w	r3, r3, #32
 80055d2:	6a21      	ldr	r1, [r4, #32]
 80055d4:	430b      	orrs	r3, r1
 80055d6:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80055d8:	6823      	ldr	r3, [r4, #0]
 80055da:	f013 0f08 	tst.w	r3, #8
 80055de:	d006      	beq.n	80055ee <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80055e0:	4a49      	ldr	r2, [pc, #292]	; (8005708 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80055e2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80055e4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80055e8:	6961      	ldr	r1, [r4, #20]
 80055ea:	430b      	orrs	r3, r1
 80055ec:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80055ee:	6823      	ldr	r3, [r4, #0]
 80055f0:	f013 0f10 	tst.w	r3, #16
 80055f4:	d006      	beq.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0x150>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80055f6:	4a44      	ldr	r2, [pc, #272]	; (8005708 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80055f8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80055fa:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80055fe:	69a1      	ldr	r1, [r4, #24]
 8005600:	430b      	orrs	r3, r1
 8005602:	6313      	str	r3, [r2, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005604:	6823      	ldr	r3, [r4, #0]
 8005606:	f413 7f00 	tst.w	r3, #512	; 0x200
 800560a:	d006      	beq.n	800561a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800560c:	4a3e      	ldr	r2, [pc, #248]	; (8005708 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800560e:	6853      	ldr	r3, [r2, #4]
 8005610:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005614:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8005616:	430b      	orrs	r3, r1
 8005618:	6053      	str	r3, [r2, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800561a:	6823      	ldr	r3, [r4, #0]
 800561c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005620:	d006      	beq.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005622:	4a39      	ldr	r2, [pc, #228]	; (8005708 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005624:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8005626:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 800562a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800562c:	430b      	orrs	r3, r1
 800562e:	62d3      	str	r3, [r2, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8005630:	6823      	ldr	r3, [r4, #0]
 8005632:	f413 7f80 	tst.w	r3, #256	; 0x100
 8005636:	d006      	beq.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8005638:	4a33      	ldr	r2, [pc, #204]	; (8005708 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800563a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800563c:	f423 5378 	bic.w	r3, r3, #15872	; 0x3e00
 8005640:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8005642:	430b      	orrs	r3, r1
 8005644:	62d3      	str	r3, [r2, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005646:	6823      	ldr	r3, [r4, #0]
 8005648:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 800564c:	d006      	beq.n	800565c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800564e:	4a2e      	ldr	r2, [pc, #184]	; (8005708 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005650:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8005652:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005656:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8005658:	430b      	orrs	r3, r1
 800565a:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800565c:	6823      	ldr	r3, [r4, #0]
 800565e:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8005662:	d04d      	beq.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8005664:	4a28      	ldr	r2, [pc, #160]	; (8005708 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005666:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8005668:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800566c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800566e:	430b      	orrs	r3, r1
 8005670:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8005672:	2000      	movs	r0, #0
 8005674:	e045      	b.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0x24e>
  FlagStatus       pwrclkchanged = RESET;
 8005676:	2500      	movs	r5, #0
 8005678:	e734      	b.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0x30>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800567a:	4a24      	ldr	r2, [pc, #144]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800567c:	6813      	ldr	r3, [r2, #0]
 800567e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005682:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8005684:	f7fe fffc 	bl	8004680 <HAL_GetTick>
 8005688:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800568a:	4b20      	ldr	r3, [pc, #128]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8005692:	f47f af2d 	bne.w	80054f0 <HAL_RCCEx_PeriphCLKConfig+0x3c>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005696:	f7fe fff3 	bl	8004680 <HAL_GetTick>
 800569a:	1b80      	subs	r0, r0, r6
 800569c:	2864      	cmp	r0, #100	; 0x64
 800569e:	d9f4      	bls.n	800568a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
          return HAL_TIMEOUT;
 80056a0:	2003      	movs	r0, #3
 80056a2:	e02e      	b.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0x24e>
        tickstart = HAL_GetTick();
 80056a4:	f7fe ffec 	bl	8004680 <HAL_GetTick>
 80056a8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056aa:	e015      	b.n	80056d8 <HAL_RCCEx_PeriphCLKConfig+0x224>
 80056ac:	4b16      	ldr	r3, [pc, #88]	; (8005708 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80056ae:	6a19      	ldr	r1, [r3, #32]
 80056b0:	2302      	movs	r3, #2
 80056b2:	fa93 f3a3 	rbit	r3, r3
 80056b6:	fab3 f383 	clz	r3, r3
 80056ba:	f003 031f 	and.w	r3, r3, #31
 80056be:	2201      	movs	r2, #1
 80056c0:	fa02 f303 	lsl.w	r3, r2, r3
 80056c4:	420b      	tst	r3, r1
 80056c6:	f47f af3b 	bne.w	8005540 <HAL_RCCEx_PeriphCLKConfig+0x8c>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056ca:	f7fe ffd9 	bl	8004680 <HAL_GetTick>
 80056ce:	1b80      	subs	r0, r0, r6
 80056d0:	f241 3388 	movw	r3, #5000	; 0x1388
 80056d4:	4298      	cmp	r0, r3
 80056d6:	d811      	bhi.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0x248>
 80056d8:	2302      	movs	r3, #2
 80056da:	fa93 f2a3 	rbit	r2, r3
 80056de:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d1e2      	bne.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80056e6:	2302      	movs	r3, #2
 80056e8:	fa93 f3a3 	rbit	r3, r3
 80056ec:	4b06      	ldr	r3, [pc, #24]	; (8005708 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80056ee:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80056f0:	e7de      	b.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
      __HAL_RCC_PWR_CLK_DISABLE();
 80056f2:	69d3      	ldr	r3, [r2, #28]
 80056f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80056f8:	61d3      	str	r3, [r2, #28]
 80056fa:	e72b      	b.n	8005554 <HAL_RCCEx_PeriphCLKConfig+0xa0>
            return HAL_TIMEOUT;
 80056fc:	2003      	movs	r0, #3
 80056fe:	e000      	b.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0x24e>
  return HAL_OK;
 8005700:	2000      	movs	r0, #0
}
 8005702:	b003      	add	sp, #12
 8005704:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005706:	bf00      	nop
 8005708:	40021000 	.word	0x40021000
 800570c:	40007000 	.word	0x40007000
 8005710:	10908100 	.word	0x10908100

08005714 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005714:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005718:	b082      	sub	sp, #8
 800571a:	4605      	mov	r5, r0
 800571c:	4688      	mov	r8, r1
 800571e:	4617      	mov	r7, r2
 8005720:	461e      	mov	r6, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005722:	f7fe ffad 	bl	8004680 <HAL_GetTick>
 8005726:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005728:	1a1b      	subs	r3, r3, r0
 800572a:	eb03 0906 	add.w	r9, r3, r6
  tmp_tickstart = HAL_GetTick();
 800572e:	f7fe ffa7 	bl	8004680 <HAL_GetTick>
 8005732:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005734:	4b2b      	ldr	r3, [pc, #172]	; (80057e4 <SPI_WaitFlagStateUntilTimeout+0xd0>)
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 800573c:	fb09 f303 	mul.w	r3, r9, r3
 8005740:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005742:	682b      	ldr	r3, [r5, #0]
 8005744:	689c      	ldr	r4, [r3, #8]
 8005746:	ea38 0304 	bics.w	r3, r8, r4
 800574a:	bf0c      	ite	eq
 800574c:	f04f 0c01 	moveq.w	ip, #1
 8005750:	f04f 0c00 	movne.w	ip, #0
 8005754:	45bc      	cmp	ip, r7
 8005756:	d040      	beq.n	80057da <SPI_WaitFlagStateUntilTimeout+0xc6>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005758:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
 800575c:	d0f1      	beq.n	8005742 <SPI_WaitFlagStateUntilTimeout+0x2e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800575e:	f7fe ff8f 	bl	8004680 <HAL_GetTick>
 8005762:	eba0 000a 	sub.w	r0, r0, sl
 8005766:	4548      	cmp	r0, r9
 8005768:	d20a      	bcs.n	8005780 <SPI_WaitFlagStateUntilTimeout+0x6c>
 800576a:	f1b9 0f00 	cmp.w	r9, #0
 800576e:	d007      	beq.n	8005780 <SPI_WaitFlagStateUntilTimeout+0x6c>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005770:	9a01      	ldr	r2, [sp, #4]
 8005772:	b102      	cbz	r2, 8005776 <SPI_WaitFlagStateUntilTimeout+0x62>
 8005774:	464a      	mov	r2, r9
      {
        tmp_timeout = 0U;
      }
      count--;
 8005776:	9b01      	ldr	r3, [sp, #4]
 8005778:	3b01      	subs	r3, #1
 800577a:	9301      	str	r3, [sp, #4]
 800577c:	4691      	mov	r9, r2
 800577e:	e7e0      	b.n	8005742 <SPI_WaitFlagStateUntilTimeout+0x2e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005780:	682a      	ldr	r2, [r5, #0]
 8005782:	6853      	ldr	r3, [r2, #4]
 8005784:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8005788:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800578a:	686b      	ldr	r3, [r5, #4]
 800578c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005790:	d00b      	beq.n	80057aa <SPI_WaitFlagStateUntilTimeout+0x96>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005792:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8005794:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005798:	d014      	beq.n	80057c4 <SPI_WaitFlagStateUntilTimeout+0xb0>
        hspi->State = HAL_SPI_STATE_READY;
 800579a:	2301      	movs	r3, #1
 800579c:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 80057a0:	2300      	movs	r3, #0
 80057a2:	f885 305c 	strb.w	r3, [r5, #92]	; 0x5c
        return HAL_TIMEOUT;
 80057a6:	2003      	movs	r0, #3
 80057a8:	e018      	b.n	80057dc <SPI_WaitFlagStateUntilTimeout+0xc8>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80057aa:	68ab      	ldr	r3, [r5, #8]
 80057ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057b0:	d002      	beq.n	80057b8 <SPI_WaitFlagStateUntilTimeout+0xa4>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80057b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057b6:	d1ec      	bne.n	8005792 <SPI_WaitFlagStateUntilTimeout+0x7e>
          __HAL_SPI_DISABLE(hspi);
 80057b8:	682a      	ldr	r2, [r5, #0]
 80057ba:	6813      	ldr	r3, [r2, #0]
 80057bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057c0:	6013      	str	r3, [r2, #0]
 80057c2:	e7e6      	b.n	8005792 <SPI_WaitFlagStateUntilTimeout+0x7e>
          SPI_RESET_CRC(hspi);
 80057c4:	682a      	ldr	r2, [r5, #0]
 80057c6:	6813      	ldr	r3, [r2, #0]
 80057c8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80057cc:	6013      	str	r3, [r2, #0]
 80057ce:	682a      	ldr	r2, [r5, #0]
 80057d0:	6813      	ldr	r3, [r2, #0]
 80057d2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80057d6:	6013      	str	r3, [r2, #0]
 80057d8:	e7df      	b.n	800579a <SPI_WaitFlagStateUntilTimeout+0x86>
    }
  }

  return HAL_OK;
 80057da:	2000      	movs	r0, #0
}
 80057dc:	b002      	add	sp, #8
 80057de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057e2:	bf00      	nop
 80057e4:	20000100 	.word	0x20000100

080057e8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80057e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057ec:	b082      	sub	sp, #8
 80057ee:	4606      	mov	r6, r0
 80057f0:	460c      	mov	r4, r1
 80057f2:	4615      	mov	r5, r2
 80057f4:	461f      	mov	r7, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80057f6:	2300      	movs	r3, #0
 80057f8:	f88d 3003 	strb.w	r3, [sp, #3]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80057fc:	f7fe ff40 	bl	8004680 <HAL_GetTick>
 8005800:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005802:	1a1b      	subs	r3, r3, r0
 8005804:	eb03 0807 	add.w	r8, r3, r7
  tmp_tickstart = HAL_GetTick();
 8005808:	f7fe ff3a 	bl	8004680 <HAL_GetTick>
 800580c:	4681      	mov	r9, r0

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800580e:	f8d6 a000 	ldr.w	sl, [r6]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005812:	4b31      	ldr	r3, [pc, #196]	; (80058d8 <SPI_WaitFifoStateUntilTimeout+0xf0>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800581a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800581e:	0d1b      	lsrs	r3, r3, #20
 8005820:	fb08 f303 	mul.w	r3, r8, r3
 8005824:	9301      	str	r3, [sp, #4]

  while ((hspi->Instance->SR & Fifo) != State)
 8005826:	e002      	b.n	800582e <SPI_WaitFifoStateUntilTimeout+0x46>
      tmpreg8 = *ptmpreg8;
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
    }

    if (Timeout != HAL_MAX_DELAY)
 8005828:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 800582c:	d112      	bne.n	8005854 <SPI_WaitFifoStateUntilTimeout+0x6c>
  while ((hspi->Instance->SR & Fifo) != State)
 800582e:	6833      	ldr	r3, [r6, #0]
 8005830:	689b      	ldr	r3, [r3, #8]
 8005832:	ea03 0c04 	and.w	ip, r3, r4
 8005836:	45ac      	cmp	ip, r5
 8005838:	d04a      	beq.n	80058d0 <SPI_WaitFifoStateUntilTimeout+0xe8>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800583a:	f5b4 6fc0 	cmp.w	r4, #1536	; 0x600
 800583e:	d1f3      	bne.n	8005828 <SPI_WaitFifoStateUntilTimeout+0x40>
 8005840:	2d00      	cmp	r5, #0
 8005842:	d1f1      	bne.n	8005828 <SPI_WaitFifoStateUntilTimeout+0x40>
      tmpreg8 = *ptmpreg8;
 8005844:	f89a 300c 	ldrb.w	r3, [sl, #12]
 8005848:	b2db      	uxtb	r3, r3
 800584a:	f88d 3003 	strb.w	r3, [sp, #3]
      UNUSED(tmpreg8);
 800584e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8005852:	e7e9      	b.n	8005828 <SPI_WaitFifoStateUntilTimeout+0x40>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005854:	f7fe ff14 	bl	8004680 <HAL_GetTick>
 8005858:	eba0 0009 	sub.w	r0, r0, r9
 800585c:	4540      	cmp	r0, r8
 800585e:	d20a      	bcs.n	8005876 <SPI_WaitFifoStateUntilTimeout+0x8e>
 8005860:	f1b8 0f00 	cmp.w	r8, #0
 8005864:	d007      	beq.n	8005876 <SPI_WaitFifoStateUntilTimeout+0x8e>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005866:	9a01      	ldr	r2, [sp, #4]
 8005868:	b102      	cbz	r2, 800586c <SPI_WaitFifoStateUntilTimeout+0x84>
 800586a:	4642      	mov	r2, r8
      {
        tmp_timeout = 0U;
      }
      count--;
 800586c:	9b01      	ldr	r3, [sp, #4]
 800586e:	3b01      	subs	r3, #1
 8005870:	9301      	str	r3, [sp, #4]
 8005872:	4690      	mov	r8, r2
 8005874:	e7db      	b.n	800582e <SPI_WaitFifoStateUntilTimeout+0x46>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005876:	6832      	ldr	r2, [r6, #0]
 8005878:	6853      	ldr	r3, [r2, #4]
 800587a:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 800587e:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005880:	6873      	ldr	r3, [r6, #4]
 8005882:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005886:	d00b      	beq.n	80058a0 <SPI_WaitFifoStateUntilTimeout+0xb8>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005888:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 800588a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800588e:	d014      	beq.n	80058ba <SPI_WaitFifoStateUntilTimeout+0xd2>
        hspi->State = HAL_SPI_STATE_READY;
 8005890:	2301      	movs	r3, #1
 8005892:	f886 305d 	strb.w	r3, [r6, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 8005896:	2300      	movs	r3, #0
 8005898:	f886 305c 	strb.w	r3, [r6, #92]	; 0x5c
        return HAL_TIMEOUT;
 800589c:	2003      	movs	r0, #3
 800589e:	e018      	b.n	80058d2 <SPI_WaitFifoStateUntilTimeout+0xea>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80058a0:	68b3      	ldr	r3, [r6, #8]
 80058a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058a6:	d002      	beq.n	80058ae <SPI_WaitFifoStateUntilTimeout+0xc6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80058a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058ac:	d1ec      	bne.n	8005888 <SPI_WaitFifoStateUntilTimeout+0xa0>
          __HAL_SPI_DISABLE(hspi);
 80058ae:	6832      	ldr	r2, [r6, #0]
 80058b0:	6813      	ldr	r3, [r2, #0]
 80058b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058b6:	6013      	str	r3, [r2, #0]
 80058b8:	e7e6      	b.n	8005888 <SPI_WaitFifoStateUntilTimeout+0xa0>
          SPI_RESET_CRC(hspi);
 80058ba:	6832      	ldr	r2, [r6, #0]
 80058bc:	6813      	ldr	r3, [r2, #0]
 80058be:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80058c2:	6013      	str	r3, [r2, #0]
 80058c4:	6832      	ldr	r2, [r6, #0]
 80058c6:	6813      	ldr	r3, [r2, #0]
 80058c8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80058cc:	6013      	str	r3, [r2, #0]
 80058ce:	e7df      	b.n	8005890 <SPI_WaitFifoStateUntilTimeout+0xa8>
    }
  }

  return HAL_OK;
 80058d0:	2000      	movs	r0, #0
}
 80058d2:	b002      	add	sp, #8
 80058d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058d8:	20000100 	.word	0x20000100

080058dc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80058dc:	b570      	push	{r4, r5, r6, lr}
 80058de:	b082      	sub	sp, #8
 80058e0:	4604      	mov	r4, r0
 80058e2:	460d      	mov	r5, r1
 80058e4:	4616      	mov	r6, r2
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80058e6:	9200      	str	r2, [sp, #0]
 80058e8:	460b      	mov	r3, r1
 80058ea:	2200      	movs	r2, #0
 80058ec:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80058f0:	f7ff ff7a 	bl	80057e8 <SPI_WaitFifoStateUntilTimeout>
 80058f4:	b9b0      	cbnz	r0, 8005924 <SPI_EndRxTxTransaction+0x48>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80058f6:	9600      	str	r6, [sp, #0]
 80058f8:	462b      	mov	r3, r5
 80058fa:	2200      	movs	r2, #0
 80058fc:	2180      	movs	r1, #128	; 0x80
 80058fe:	4620      	mov	r0, r4
 8005900:	f7ff ff08 	bl	8005714 <SPI_WaitFlagStateUntilTimeout>
 8005904:	b9a8      	cbnz	r0, 8005932 <SPI_EndRxTxTransaction+0x56>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005906:	9600      	str	r6, [sp, #0]
 8005908:	462b      	mov	r3, r5
 800590a:	2200      	movs	r2, #0
 800590c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005910:	4620      	mov	r0, r4
 8005912:	f7ff ff69 	bl	80057e8 <SPI_WaitFifoStateUntilTimeout>
 8005916:	b150      	cbz	r0, 800592e <SPI_EndRxTxTransaction+0x52>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005918:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800591a:	f043 0320 	orr.w	r3, r3, #32
 800591e:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8005920:	2003      	movs	r0, #3
 8005922:	e004      	b.n	800592e <SPI_EndRxTxTransaction+0x52>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005924:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8005926:	f043 0320 	orr.w	r3, r3, #32
 800592a:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 800592c:	2003      	movs	r0, #3
  }

  return HAL_OK;
}
 800592e:	b002      	add	sp, #8
 8005930:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005932:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8005934:	f043 0320 	orr.w	r3, r3, #32
 8005938:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 800593a:	2003      	movs	r0, #3
 800593c:	e7f7      	b.n	800592e <SPI_EndRxTxTransaction+0x52>

0800593e <SPI_EndRxTransaction>:
{
 800593e:	b570      	push	{r4, r5, r6, lr}
 8005940:	b082      	sub	sp, #8
 8005942:	4604      	mov	r4, r0
 8005944:	460d      	mov	r5, r1
 8005946:	4616      	mov	r6, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005948:	6843      	ldr	r3, [r0, #4]
 800594a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800594e:	d00d      	beq.n	800596c <SPI_EndRxTransaction+0x2e>
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005950:	9600      	str	r6, [sp, #0]
 8005952:	462b      	mov	r3, r5
 8005954:	2200      	movs	r2, #0
 8005956:	2180      	movs	r1, #128	; 0x80
 8005958:	4620      	mov	r0, r4
 800595a:	f7ff fedb 	bl	8005714 <SPI_WaitFlagStateUntilTimeout>
 800595e:	b990      	cbnz	r0, 8005986 <SPI_EndRxTransaction+0x48>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005960:	6863      	ldr	r3, [r4, #4]
 8005962:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005966:	d014      	beq.n	8005992 <SPI_EndRxTransaction+0x54>
}
 8005968:	b002      	add	sp, #8
 800596a:	bd70      	pop	{r4, r5, r6, pc}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800596c:	6883      	ldr	r3, [r0, #8]
 800596e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005972:	d002      	beq.n	800597a <SPI_EndRxTransaction+0x3c>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005974:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005978:	d1ea      	bne.n	8005950 <SPI_EndRxTransaction+0x12>
    __HAL_SPI_DISABLE(hspi);
 800597a:	6822      	ldr	r2, [r4, #0]
 800597c:	6813      	ldr	r3, [r2, #0]
 800597e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005982:	6013      	str	r3, [r2, #0]
 8005984:	e7e4      	b.n	8005950 <SPI_EndRxTransaction+0x12>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005986:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8005988:	f043 0320 	orr.w	r3, r3, #32
 800598c:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 800598e:	2003      	movs	r0, #3
 8005990:	e7ea      	b.n	8005968 <SPI_EndRxTransaction+0x2a>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005992:	68a3      	ldr	r3, [r4, #8]
 8005994:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005998:	d002      	beq.n	80059a0 <SPI_EndRxTransaction+0x62>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800599a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800599e:	d1e3      	bne.n	8005968 <SPI_EndRxTransaction+0x2a>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80059a0:	9600      	str	r6, [sp, #0]
 80059a2:	462b      	mov	r3, r5
 80059a4:	2200      	movs	r2, #0
 80059a6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80059aa:	4620      	mov	r0, r4
 80059ac:	f7ff ff1c 	bl	80057e8 <SPI_WaitFifoStateUntilTimeout>
 80059b0:	2800      	cmp	r0, #0
 80059b2:	d0d9      	beq.n	8005968 <SPI_EndRxTransaction+0x2a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80059b4:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80059b6:	f043 0320 	orr.w	r3, r3, #32
 80059ba:	6623      	str	r3, [r4, #96]	; 0x60
      return HAL_TIMEOUT;
 80059bc:	2003      	movs	r0, #3
 80059be:	e7d3      	b.n	8005968 <SPI_EndRxTransaction+0x2a>

080059c0 <HAL_SPI_Init>:
  if (hspi == NULL)
 80059c0:	2800      	cmp	r0, #0
 80059c2:	d06f      	beq.n	8005aa4 <HAL_SPI_Init+0xe4>
{
 80059c4:	b510      	push	{r4, lr}
 80059c6:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80059c8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80059ca:	b933      	cbnz	r3, 80059da <HAL_SPI_Init+0x1a>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80059cc:	6843      	ldr	r3, [r0, #4]
 80059ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80059d2:	d005      	beq.n	80059e0 <HAL_SPI_Init+0x20>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80059d4:	2300      	movs	r3, #0
 80059d6:	61c3      	str	r3, [r0, #28]
 80059d8:	e002      	b.n	80059e0 <HAL_SPI_Init+0x20>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80059da:	2300      	movs	r3, #0
 80059dc:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80059de:	6143      	str	r3, [r0, #20]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80059e0:	2300      	movs	r3, #0
 80059e2:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 80059e4:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d052      	beq.n	8005a92 <HAL_SPI_Init+0xd2>
  hspi->State = HAL_SPI_STATE_BUSY;
 80059ec:	2302      	movs	r3, #2
 80059ee:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 80059f2:	6822      	ldr	r2, [r4, #0]
 80059f4:	6813      	ldr	r3, [r2, #0]
 80059f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059fa:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80059fc:	68e3      	ldr	r3, [r4, #12]
 80059fe:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005a02:	d94c      	bls.n	8005a9e <HAL_SPI_Init+0xde>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005a04:	2200      	movs	r2, #0
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005a06:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005a0a:	d004      	beq.n	8005a16 <HAL_SPI_Init+0x56>
 8005a0c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005a10:	d001      	beq.n	8005a16 <HAL_SPI_Init+0x56>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005a12:	2300      	movs	r3, #0
 8005a14:	62a3      	str	r3, [r4, #40]	; 0x28
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005a16:	6863      	ldr	r3, [r4, #4]
 8005a18:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8005a1c:	68a1      	ldr	r1, [r4, #8]
 8005a1e:	f401 4104 	and.w	r1, r1, #33792	; 0x8400
 8005a22:	430b      	orrs	r3, r1
 8005a24:	6921      	ldr	r1, [r4, #16]
 8005a26:	f001 0102 	and.w	r1, r1, #2
 8005a2a:	430b      	orrs	r3, r1
 8005a2c:	6961      	ldr	r1, [r4, #20]
 8005a2e:	f001 0101 	and.w	r1, r1, #1
 8005a32:	430b      	orrs	r3, r1
 8005a34:	69a1      	ldr	r1, [r4, #24]
 8005a36:	f401 7100 	and.w	r1, r1, #512	; 0x200
 8005a3a:	430b      	orrs	r3, r1
 8005a3c:	69e1      	ldr	r1, [r4, #28]
 8005a3e:	f001 0138 	and.w	r1, r1, #56	; 0x38
 8005a42:	430b      	orrs	r3, r1
 8005a44:	6a21      	ldr	r1, [r4, #32]
 8005a46:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8005a4a:	430b      	orrs	r3, r1
 8005a4c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8005a4e:	f401 5100 	and.w	r1, r1, #8192	; 0x2000
 8005a52:	6820      	ldr	r0, [r4, #0]
 8005a54:	430b      	orrs	r3, r1
 8005a56:	6003      	str	r3, [r0, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005a58:	8b63      	ldrh	r3, [r4, #26]
 8005a5a:	f003 0304 	and.w	r3, r3, #4
 8005a5e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005a60:	f001 0110 	and.w	r1, r1, #16
 8005a64:	430b      	orrs	r3, r1
 8005a66:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005a68:	f001 0108 	and.w	r1, r1, #8
 8005a6c:	430b      	orrs	r3, r1
 8005a6e:	68e1      	ldr	r1, [r4, #12]
 8005a70:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
 8005a74:	430b      	orrs	r3, r1
 8005a76:	6821      	ldr	r1, [r4, #0]
 8005a78:	4313      	orrs	r3, r2
 8005a7a:	604b      	str	r3, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005a7c:	6822      	ldr	r2, [r4, #0]
 8005a7e:	69d3      	ldr	r3, [r2, #28]
 8005a80:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005a84:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005a86:	2000      	movs	r0, #0
 8005a88:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
}
 8005a90:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 8005a92:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 8005a96:	4620      	mov	r0, r4
 8005a98:	f7fe fd7a 	bl	8004590 <HAL_SPI_MspInit>
 8005a9c:	e7a6      	b.n	80059ec <HAL_SPI_Init+0x2c>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005a9e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005aa2:	e7b0      	b.n	8005a06 <HAL_SPI_Init+0x46>
    return HAL_ERROR;
 8005aa4:	2001      	movs	r0, #1
}
 8005aa6:	4770      	bx	lr

08005aa8 <HAL_SPI_Transmit>:
{
 8005aa8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005aac:	b083      	sub	sp, #12
 8005aae:	461d      	mov	r5, r3
  __HAL_LOCK(hspi);
 8005ab0:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 8005ab4:	2b01      	cmp	r3, #1
 8005ab6:	f000 80f4 	beq.w	8005ca2 <HAL_SPI_Transmit+0x1fa>
 8005aba:	4604      	mov	r4, r0
 8005abc:	4688      	mov	r8, r1
 8005abe:	4691      	mov	r9, r2
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8005ac6:	f7fe fddb 	bl	8004680 <HAL_GetTick>
 8005aca:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8005acc:	f894 605d 	ldrb.w	r6, [r4, #93]	; 0x5d
 8005ad0:	b2f6      	uxtb	r6, r6
 8005ad2:	2e01      	cmp	r6, #1
 8005ad4:	f040 80dd 	bne.w	8005c92 <HAL_SPI_Transmit+0x1ea>
  if ((pData == NULL) || (Size == 0U))
 8005ad8:	f1b8 0f00 	cmp.w	r8, #0
 8005adc:	f000 80da 	beq.w	8005c94 <HAL_SPI_Transmit+0x1ec>
 8005ae0:	f1b9 0f00 	cmp.w	r9, #0
 8005ae4:	f000 80d6 	beq.w	8005c94 <HAL_SPI_Transmit+0x1ec>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005ae8:	2303      	movs	r3, #3
 8005aea:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005aee:	2300      	movs	r3, #0
 8005af0:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005af2:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005af6:	f8a4 903c 	strh.w	r9, [r4, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005afa:	f8a4 903e 	strh.w	r9, [r4, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005afe:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005b00:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005b04:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005b08:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005b0a:	64e3      	str	r3, [r4, #76]	; 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b0c:	68a3      	ldr	r3, [r4, #8]
 8005b0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b12:	d01e      	beq.n	8005b52 <HAL_SPI_Transmit+0xaa>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005b14:	6823      	ldr	r3, [r4, #0]
 8005b16:	681a      	ldr	r2, [r3, #0]
 8005b18:	f012 0f40 	tst.w	r2, #64	; 0x40
 8005b1c:	d103      	bne.n	8005b26 <HAL_SPI_Transmit+0x7e>
    __HAL_SPI_ENABLE(hspi);
 8005b1e:	681a      	ldr	r2, [r3, #0]
 8005b20:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b24:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005b26:	68e3      	ldr	r3, [r4, #12]
 8005b28:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005b2c:	d944      	bls.n	8005bb8 <HAL_SPI_Transmit+0x110>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b2e:	6863      	ldr	r3, [r4, #4]
 8005b30:	b113      	cbz	r3, 8005b38 <HAL_SPI_Transmit+0x90>
 8005b32:	f1b9 0f01 	cmp.w	r9, #1
 8005b36:	d120      	bne.n	8005b7a <HAL_SPI_Transmit+0xd2>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b38:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005b3a:	6823      	ldr	r3, [r4, #0]
 8005b3c:	8812      	ldrh	r2, [r2, #0]
 8005b3e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b40:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005b42:	3302      	adds	r3, #2
 8005b44:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8005b46:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005b48:	b29b      	uxth	r3, r3
 8005b4a:	3b01      	subs	r3, #1
 8005b4c:	b29b      	uxth	r3, r3
 8005b4e:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8005b50:	e013      	b.n	8005b7a <HAL_SPI_Transmit+0xd2>
    __HAL_SPI_DISABLE(hspi);
 8005b52:	6822      	ldr	r2, [r4, #0]
 8005b54:	6813      	ldr	r3, [r2, #0]
 8005b56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b5a:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 8005b5c:	6822      	ldr	r2, [r4, #0]
 8005b5e:	6813      	ldr	r3, [r2, #0]
 8005b60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005b64:	6013      	str	r3, [r2, #0]
 8005b66:	e7d5      	b.n	8005b14 <HAL_SPI_Transmit+0x6c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b68:	f7fe fd8a 	bl	8004680 <HAL_GetTick>
 8005b6c:	1bc0      	subs	r0, r0, r7
 8005b6e:	42a8      	cmp	r0, r5
 8005b70:	d302      	bcc.n	8005b78 <HAL_SPI_Transmit+0xd0>
 8005b72:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8005b76:	d11a      	bne.n	8005bae <HAL_SPI_Transmit+0x106>
 8005b78:	b1cd      	cbz	r5, 8005bae <HAL_SPI_Transmit+0x106>
    while (hspi->TxXferCount > 0U)
 8005b7a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005b7c:	b29b      	uxth	r3, r3
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d06f      	beq.n	8005c62 <HAL_SPI_Transmit+0x1ba>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005b82:	6823      	ldr	r3, [r4, #0]
 8005b84:	689a      	ldr	r2, [r3, #8]
 8005b86:	f012 0f02 	tst.w	r2, #2
 8005b8a:	d0ed      	beq.n	8005b68 <HAL_SPI_Transmit+0xc0>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b8c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005b8e:	8812      	ldrh	r2, [r2, #0]
 8005b90:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b92:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005b94:	3302      	adds	r3, #2
 8005b96:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8005b98:	f8b4 c03e 	ldrh.w	ip, [r4, #62]	; 0x3e
 8005b9c:	fa1f fc8c 	uxth.w	ip, ip
 8005ba0:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8005ba4:	fa1f fc8c 	uxth.w	ip, ip
 8005ba8:	f8a4 c03e 	strh.w	ip, [r4, #62]	; 0x3e
 8005bac:	e7e5      	b.n	8005b7a <HAL_SPI_Transmit+0xd2>
          hspi->State = HAL_SPI_STATE_READY;
 8005bae:	2301      	movs	r3, #1
 8005bb0:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
          errorcode = HAL_TIMEOUT;
 8005bb4:	2603      	movs	r6, #3
          goto error;
 8005bb6:	e06d      	b.n	8005c94 <HAL_SPI_Transmit+0x1ec>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005bb8:	6863      	ldr	r3, [r4, #4]
 8005bba:	b113      	cbz	r3, 8005bc2 <HAL_SPI_Transmit+0x11a>
 8005bbc:	f1b9 0f01 	cmp.w	r9, #1
 8005bc0:	d132      	bne.n	8005c28 <HAL_SPI_Transmit+0x180>
      if (hspi->TxXferCount > 1U)
 8005bc2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005bc4:	b29b      	uxth	r3, r3
 8005bc6:	2b01      	cmp	r3, #1
 8005bc8:	d90c      	bls.n	8005be4 <HAL_SPI_Transmit+0x13c>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005bca:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005bcc:	6823      	ldr	r3, [r4, #0]
 8005bce:	8812      	ldrh	r2, [r2, #0]
 8005bd0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005bd2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005bd4:	3302      	adds	r3, #2
 8005bd6:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005bd8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005bda:	b29b      	uxth	r3, r3
 8005bdc:	3b02      	subs	r3, #2
 8005bde:	b29b      	uxth	r3, r3
 8005be0:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8005be2:	e021      	b.n	8005c28 <HAL_SPI_Transmit+0x180>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005be4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005be6:	6823      	ldr	r3, [r4, #0]
 8005be8:	7812      	ldrb	r2, [r2, #0]
 8005bea:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr ++;
 8005bec:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005bee:	3301      	adds	r3, #1
 8005bf0:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8005bf2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005bf4:	b29b      	uxth	r3, r3
 8005bf6:	3b01      	subs	r3, #1
 8005bf8:	b29b      	uxth	r3, r3
 8005bfa:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8005bfc:	e014      	b.n	8005c28 <HAL_SPI_Transmit+0x180>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005bfe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005c00:	781b      	ldrb	r3, [r3, #0]
 8005c02:	7313      	strb	r3, [r2, #12]
          hspi->pTxBuffPtr++;
 8005c04:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005c06:	3301      	adds	r3, #1
 8005c08:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 8005c0a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005c0c:	b29b      	uxth	r3, r3
 8005c0e:	3b01      	subs	r3, #1
 8005c10:	b29b      	uxth	r3, r3
 8005c12:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8005c14:	e008      	b.n	8005c28 <HAL_SPI_Transmit+0x180>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005c16:	f7fe fd33 	bl	8004680 <HAL_GetTick>
 8005c1a:	1bc0      	subs	r0, r0, r7
 8005c1c:	42a8      	cmp	r0, r5
 8005c1e:	d302      	bcc.n	8005c26 <HAL_SPI_Transmit+0x17e>
 8005c20:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8005c24:	d118      	bne.n	8005c58 <HAL_SPI_Transmit+0x1b0>
 8005c26:	b1bd      	cbz	r5, 8005c58 <HAL_SPI_Transmit+0x1b0>
    while (hspi->TxXferCount > 0U)
 8005c28:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005c2a:	b29b      	uxth	r3, r3
 8005c2c:	b1cb      	cbz	r3, 8005c62 <HAL_SPI_Transmit+0x1ba>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005c2e:	6822      	ldr	r2, [r4, #0]
 8005c30:	6893      	ldr	r3, [r2, #8]
 8005c32:	f013 0f02 	tst.w	r3, #2
 8005c36:	d0ee      	beq.n	8005c16 <HAL_SPI_Transmit+0x16e>
        if (hspi->TxXferCount > 1U)
 8005c38:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005c3a:	b29b      	uxth	r3, r3
 8005c3c:	2b01      	cmp	r3, #1
 8005c3e:	d9de      	bls.n	8005bfe <HAL_SPI_Transmit+0x156>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c40:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005c42:	881b      	ldrh	r3, [r3, #0]
 8005c44:	60d3      	str	r3, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c46:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005c48:	3302      	adds	r3, #2
 8005c4a:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005c4c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005c4e:	b29b      	uxth	r3, r3
 8005c50:	3b02      	subs	r3, #2
 8005c52:	b29b      	uxth	r3, r3
 8005c54:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8005c56:	e7e7      	b.n	8005c28 <HAL_SPI_Transmit+0x180>
          hspi->State = HAL_SPI_STATE_READY;
 8005c58:	2301      	movs	r3, #1
 8005c5a:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
          errorcode = HAL_TIMEOUT;
 8005c5e:	2603      	movs	r6, #3
          goto error;
 8005c60:	e018      	b.n	8005c94 <HAL_SPI_Transmit+0x1ec>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005c62:	463a      	mov	r2, r7
 8005c64:	4629      	mov	r1, r5
 8005c66:	4620      	mov	r0, r4
 8005c68:	f7ff fe38 	bl	80058dc <SPI_EndRxTxTransaction>
 8005c6c:	b108      	cbz	r0, 8005c72 <HAL_SPI_Transmit+0x1ca>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005c6e:	2320      	movs	r3, #32
 8005c70:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005c72:	68a3      	ldr	r3, [r4, #8]
 8005c74:	b933      	cbnz	r3, 8005c84 <HAL_SPI_Transmit+0x1dc>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005c76:	9301      	str	r3, [sp, #4]
 8005c78:	6823      	ldr	r3, [r4, #0]
 8005c7a:	68da      	ldr	r2, [r3, #12]
 8005c7c:	9201      	str	r2, [sp, #4]
 8005c7e:	689b      	ldr	r3, [r3, #8]
 8005c80:	9301      	str	r3, [sp, #4]
 8005c82:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005c84:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8005c86:	b92b      	cbnz	r3, 8005c94 <HAL_SPI_Transmit+0x1ec>
    hspi->State = HAL_SPI_STATE_READY;
 8005c88:	2301      	movs	r3, #1
 8005c8a:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005c8e:	2600      	movs	r6, #0
 8005c90:	e000      	b.n	8005c94 <HAL_SPI_Transmit+0x1ec>
    errorcode = HAL_BUSY;
 8005c92:	2602      	movs	r6, #2
  __HAL_UNLOCK(hspi);
 8005c94:	2300      	movs	r3, #0
 8005c96:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 8005c9a:	4630      	mov	r0, r6
 8005c9c:	b003      	add	sp, #12
 8005c9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(hspi);
 8005ca2:	2602      	movs	r6, #2
 8005ca4:	e7f9      	b.n	8005c9a <HAL_SPI_Transmit+0x1f2>

08005ca6 <HAL_SPI_TransmitReceive>:
{
 8005ca6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005caa:	461f      	mov	r7, r3
 8005cac:	9d08      	ldr	r5, [sp, #32]
  __HAL_LOCK(hspi);
 8005cae:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 8005cb2:	2b01      	cmp	r3, #1
 8005cb4:	f000 816b 	beq.w	8005f8e <HAL_SPI_TransmitReceive+0x2e8>
 8005cb8:	4604      	mov	r4, r0
 8005cba:	4688      	mov	r8, r1
 8005cbc:	4691      	mov	r9, r2
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8005cc4:	f7fe fcdc 	bl	8004680 <HAL_GetTick>
 8005cc8:	4606      	mov	r6, r0
  tmp_state           = hspi->State;
 8005cca:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8005cce:	b2db      	uxtb	r3, r3
  tmp_mode            = hspi->Init.Mode;
 8005cd0:	6862      	ldr	r2, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005cd2:	2b01      	cmp	r3, #1
 8005cd4:	d00a      	beq.n	8005cec <HAL_SPI_TransmitReceive+0x46>
 8005cd6:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8005cda:	f040 8146 	bne.w	8005f6a <HAL_SPI_TransmitReceive+0x2c4>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005cde:	68a2      	ldr	r2, [r4, #8]
 8005ce0:	2a00      	cmp	r2, #0
 8005ce2:	f040 8148 	bne.w	8005f76 <HAL_SPI_TransmitReceive+0x2d0>
 8005ce6:	2b04      	cmp	r3, #4
 8005ce8:	f040 8147 	bne.w	8005f7a <HAL_SPI_TransmitReceive+0x2d4>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005cec:	f1b8 0f00 	cmp.w	r8, #0
 8005cf0:	f000 8145 	beq.w	8005f7e <HAL_SPI_TransmitReceive+0x2d8>
 8005cf4:	f1b9 0f00 	cmp.w	r9, #0
 8005cf8:	f000 8143 	beq.w	8005f82 <HAL_SPI_TransmitReceive+0x2dc>
 8005cfc:	2f00      	cmp	r7, #0
 8005cfe:	f000 8142 	beq.w	8005f86 <HAL_SPI_TransmitReceive+0x2e0>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005d02:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8005d06:	b2db      	uxtb	r3, r3
 8005d08:	2b04      	cmp	r3, #4
 8005d0a:	d002      	beq.n	8005d12 <HAL_SPI_TransmitReceive+0x6c>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005d0c:	2305      	movs	r3, #5
 8005d0e:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005d12:	2300      	movs	r3, #0
 8005d14:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005d16:	f8c4 9040 	str.w	r9, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 8005d1a:	f8a4 7046 	strh.w	r7, [r4, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8005d1e:	f8a4 7044 	strh.w	r7, [r4, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005d22:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 8005d26:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8005d28:	87a7      	strh	r7, [r4, #60]	; 0x3c
  hspi->RxISR       = NULL;
 8005d2a:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005d2c:	6523      	str	r3, [r4, #80]	; 0x50
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005d2e:	68e3      	ldr	r3, [r4, #12]
 8005d30:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005d34:	d801      	bhi.n	8005d3a <HAL_SPI_TransmitReceive+0x94>
 8005d36:	2f01      	cmp	r7, #1
 8005d38:	d923      	bls.n	8005d82 <HAL_SPI_TransmitReceive+0xdc>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005d3a:	6822      	ldr	r2, [r4, #0]
 8005d3c:	6853      	ldr	r3, [r2, #4]
 8005d3e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005d42:	6053      	str	r3, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005d44:	6823      	ldr	r3, [r4, #0]
 8005d46:	681a      	ldr	r2, [r3, #0]
 8005d48:	f012 0f40 	tst.w	r2, #64	; 0x40
 8005d4c:	d103      	bne.n	8005d56 <HAL_SPI_TransmitReceive+0xb0>
    __HAL_SPI_ENABLE(hspi);
 8005d4e:	681a      	ldr	r2, [r3, #0]
 8005d50:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d54:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005d56:	68e3      	ldr	r3, [r4, #12]
 8005d58:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005d5c:	d95c      	bls.n	8005e18 <HAL_SPI_TransmitReceive+0x172>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005d5e:	6863      	ldr	r3, [r4, #4]
 8005d60:	b10b      	cbz	r3, 8005d66 <HAL_SPI_TransmitReceive+0xc0>
 8005d62:	2f01      	cmp	r7, #1
 8005d64:	d10b      	bne.n	8005d7e <HAL_SPI_TransmitReceive+0xd8>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d66:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005d68:	6823      	ldr	r3, [r4, #0]
 8005d6a:	8812      	ldrh	r2, [r2, #0]
 8005d6c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d6e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005d70:	3302      	adds	r3, #2
 8005d72:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8005d74:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005d76:	b29b      	uxth	r3, r3
 8005d78:	3b01      	subs	r3, #1
 8005d7a:	b29b      	uxth	r3, r3
 8005d7c:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8005d7e:	2701      	movs	r7, #1
 8005d80:	e030      	b.n	8005de4 <HAL_SPI_TransmitReceive+0x13e>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005d82:	6822      	ldr	r2, [r4, #0]
 8005d84:	6853      	ldr	r3, [r2, #4]
 8005d86:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005d8a:	6053      	str	r3, [r2, #4]
 8005d8c:	e7da      	b.n	8005d44 <HAL_SPI_TransmitReceive+0x9e>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d8e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005d90:	8812      	ldrh	r2, [r2, #0]
 8005d92:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d94:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005d96:	3302      	adds	r3, #2
 8005d98:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8005d9a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005d9c:	b29b      	uxth	r3, r3
 8005d9e:	3b01      	subs	r3, #1
 8005da0:	b29b      	uxth	r3, r3
 8005da2:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 8005da4:	2700      	movs	r7, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005da6:	6823      	ldr	r3, [r4, #0]
 8005da8:	689a      	ldr	r2, [r3, #8]
 8005daa:	f012 0f01 	tst.w	r2, #1
 8005dae:	d011      	beq.n	8005dd4 <HAL_SPI_TransmitReceive+0x12e>
 8005db0:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8005db4:	b292      	uxth	r2, r2
 8005db6:	b16a      	cbz	r2, 8005dd4 <HAL_SPI_TransmitReceive+0x12e>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005db8:	68da      	ldr	r2, [r3, #12]
 8005dba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005dbc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005dbe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005dc0:	3302      	adds	r3, #2
 8005dc2:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8005dc4:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8005dc8:	b29b      	uxth	r3, r3
 8005dca:	3b01      	subs	r3, #1
 8005dcc:	b29b      	uxth	r3, r3
 8005dce:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        txallowed = 1U;
 8005dd2:	2701      	movs	r7, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005dd4:	f7fe fc54 	bl	8004680 <HAL_GetTick>
 8005dd8:	1b83      	subs	r3, r0, r6
 8005dda:	42ab      	cmp	r3, r5
 8005ddc:	d302      	bcc.n	8005de4 <HAL_SPI_TransmitReceive+0x13e>
 8005dde:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8005de2:	d114      	bne.n	8005e0e <HAL_SPI_TransmitReceive+0x168>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005de4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005de6:	b29b      	uxth	r3, r3
 8005de8:	b92b      	cbnz	r3, 8005df6 <HAL_SPI_TransmitReceive+0x150>
 8005dea:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8005dee:	b29b      	uxth	r3, r3
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	f000 80ab 	beq.w	8005f4c <HAL_SPI_TransmitReceive+0x2a6>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005df6:	6823      	ldr	r3, [r4, #0]
 8005df8:	689a      	ldr	r2, [r3, #8]
 8005dfa:	f012 0f02 	tst.w	r2, #2
 8005dfe:	d0d2      	beq.n	8005da6 <HAL_SPI_TransmitReceive+0x100>
 8005e00:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8005e02:	b292      	uxth	r2, r2
 8005e04:	2a00      	cmp	r2, #0
 8005e06:	d0ce      	beq.n	8005da6 <HAL_SPI_TransmitReceive+0x100>
 8005e08:	2f00      	cmp	r7, #0
 8005e0a:	d0cc      	beq.n	8005da6 <HAL_SPI_TransmitReceive+0x100>
 8005e0c:	e7bf      	b.n	8005d8e <HAL_SPI_TransmitReceive+0xe8>
        hspi->State = HAL_SPI_STATE_READY;
 8005e0e:	2301      	movs	r3, #1
 8005e10:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
        errorcode = HAL_TIMEOUT;
 8005e14:	2003      	movs	r0, #3
        goto error;
 8005e16:	e0a9      	b.n	8005f6c <HAL_SPI_TransmitReceive+0x2c6>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005e18:	6863      	ldr	r3, [r4, #4]
 8005e1a:	b10b      	cbz	r3, 8005e20 <HAL_SPI_TransmitReceive+0x17a>
 8005e1c:	2f01      	cmp	r7, #1
 8005e1e:	d10f      	bne.n	8005e40 <HAL_SPI_TransmitReceive+0x19a>
      if (hspi->TxXferCount > 1U)
 8005e20:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005e22:	b29b      	uxth	r3, r3
 8005e24:	2b01      	cmp	r3, #1
 8005e26:	d90d      	bls.n	8005e44 <HAL_SPI_TransmitReceive+0x19e>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005e28:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005e2a:	6823      	ldr	r3, [r4, #0]
 8005e2c:	8812      	ldrh	r2, [r2, #0]
 8005e2e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e30:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005e32:	3302      	adds	r3, #2
 8005e34:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005e36:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005e38:	b29b      	uxth	r3, r3
 8005e3a:	3b02      	subs	r3, #2
 8005e3c:	b29b      	uxth	r3, r3
 8005e3e:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8005e40:	2701      	movs	r7, #1
 8005e42:	e049      	b.n	8005ed8 <HAL_SPI_TransmitReceive+0x232>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005e44:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005e46:	6823      	ldr	r3, [r4, #0]
 8005e48:	7812      	ldrb	r2, [r2, #0]
 8005e4a:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 8005e4c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005e4e:	3301      	adds	r3, #1
 8005e50:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8005e52:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005e54:	b29b      	uxth	r3, r3
 8005e56:	3b01      	subs	r3, #1
 8005e58:	b29b      	uxth	r3, r3
 8005e5a:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8005e5c:	e7f0      	b.n	8005e40 <HAL_SPI_TransmitReceive+0x19a>
        if (hspi->TxXferCount > 1U)
 8005e5e:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8005e60:	b292      	uxth	r2, r2
 8005e62:	2a01      	cmp	r2, #1
 8005e64:	d90c      	bls.n	8005e80 <HAL_SPI_TransmitReceive+0x1da>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005e66:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005e68:	8812      	ldrh	r2, [r2, #0]
 8005e6a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e6c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005e6e:	3302      	adds	r3, #2
 8005e70:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005e72:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005e74:	b29b      	uxth	r3, r3
 8005e76:	3b02      	subs	r3, #2
 8005e78:	b29b      	uxth	r3, r3
 8005e7a:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 8005e7c:	2700      	movs	r7, #0
 8005e7e:	e03d      	b.n	8005efc <HAL_SPI_TransmitReceive+0x256>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005e80:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005e82:	7812      	ldrb	r2, [r2, #0]
 8005e84:	731a      	strb	r2, [r3, #12]
          hspi->pTxBuffPtr++;
 8005e86:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005e88:	3301      	adds	r3, #1
 8005e8a:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 8005e8c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005e8e:	b29b      	uxth	r3, r3
 8005e90:	3b01      	subs	r3, #1
 8005e92:	b29b      	uxth	r3, r3
 8005e94:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 8005e96:	2700      	movs	r7, #0
 8005e98:	e030      	b.n	8005efc <HAL_SPI_TransmitReceive+0x256>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005e9a:	6822      	ldr	r2, [r4, #0]
 8005e9c:	6853      	ldr	r3, [r2, #4]
 8005e9e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005ea2:	6053      	str	r3, [r2, #4]
        txallowed = 1U;
 8005ea4:	2701      	movs	r7, #1
 8005ea6:	e00d      	b.n	8005ec4 <HAL_SPI_TransmitReceive+0x21e>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005ea8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005eaa:	7b1b      	ldrb	r3, [r3, #12]
 8005eac:	7013      	strb	r3, [r2, #0]
          hspi->pRxBuffPtr++;
 8005eae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005eb0:	3301      	adds	r3, #1
 8005eb2:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount--;
 8005eb4:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8005eb8:	b29b      	uxth	r3, r3
 8005eba:	3b01      	subs	r3, #1
 8005ebc:	b29b      	uxth	r3, r3
 8005ebe:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        txallowed = 1U;
 8005ec2:	2701      	movs	r7, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005ec4:	f7fe fbdc 	bl	8004680 <HAL_GetTick>
 8005ec8:	1b80      	subs	r0, r0, r6
 8005eca:	42a8      	cmp	r0, r5
 8005ecc:	d302      	bcc.n	8005ed4 <HAL_SPI_TransmitReceive+0x22e>
 8005ece:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8005ed2:	d136      	bne.n	8005f42 <HAL_SPI_TransmitReceive+0x29c>
 8005ed4:	2d00      	cmp	r5, #0
 8005ed6:	d034      	beq.n	8005f42 <HAL_SPI_TransmitReceive+0x29c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005ed8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005eda:	b29b      	uxth	r3, r3
 8005edc:	b923      	cbnz	r3, 8005ee8 <HAL_SPI_TransmitReceive+0x242>
 8005ede:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8005ee2:	b29b      	uxth	r3, r3
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d031      	beq.n	8005f4c <HAL_SPI_TransmitReceive+0x2a6>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005ee8:	6823      	ldr	r3, [r4, #0]
 8005eea:	689a      	ldr	r2, [r3, #8]
 8005eec:	f012 0f02 	tst.w	r2, #2
 8005ef0:	d004      	beq.n	8005efc <HAL_SPI_TransmitReceive+0x256>
 8005ef2:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8005ef4:	b292      	uxth	r2, r2
 8005ef6:	b10a      	cbz	r2, 8005efc <HAL_SPI_TransmitReceive+0x256>
 8005ef8:	2f00      	cmp	r7, #0
 8005efa:	d1b0      	bne.n	8005e5e <HAL_SPI_TransmitReceive+0x1b8>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005efc:	6823      	ldr	r3, [r4, #0]
 8005efe:	689a      	ldr	r2, [r3, #8]
 8005f00:	f012 0f01 	tst.w	r2, #1
 8005f04:	d0de      	beq.n	8005ec4 <HAL_SPI_TransmitReceive+0x21e>
 8005f06:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8005f0a:	b292      	uxth	r2, r2
 8005f0c:	2a00      	cmp	r2, #0
 8005f0e:	d0d9      	beq.n	8005ec4 <HAL_SPI_TransmitReceive+0x21e>
        if (hspi->RxXferCount > 1U)
 8005f10:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8005f14:	b292      	uxth	r2, r2
 8005f16:	2a01      	cmp	r2, #1
 8005f18:	d9c6      	bls.n	8005ea8 <HAL_SPI_TransmitReceive+0x202>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005f1a:	68da      	ldr	r2, [r3, #12]
 8005f1c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005f1e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005f20:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005f22:	3302      	adds	r3, #2
 8005f24:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8005f26:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8005f2a:	b29b      	uxth	r3, r3
 8005f2c:	3b02      	subs	r3, #2
 8005f2e:	b29b      	uxth	r3, r3
 8005f30:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8005f34:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8005f38:	b29b      	uxth	r3, r3
 8005f3a:	2b01      	cmp	r3, #1
 8005f3c:	d9ad      	bls.n	8005e9a <HAL_SPI_TransmitReceive+0x1f4>
        txallowed = 1U;
 8005f3e:	2701      	movs	r7, #1
 8005f40:	e7c0      	b.n	8005ec4 <HAL_SPI_TransmitReceive+0x21e>
        hspi->State = HAL_SPI_STATE_READY;
 8005f42:	2301      	movs	r3, #1
 8005f44:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
        errorcode = HAL_TIMEOUT;
 8005f48:	2003      	movs	r0, #3
        goto error;
 8005f4a:	e00f      	b.n	8005f6c <HAL_SPI_TransmitReceive+0x2c6>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005f4c:	4632      	mov	r2, r6
 8005f4e:	4629      	mov	r1, r5
 8005f50:	4620      	mov	r0, r4
 8005f52:	f7ff fcc3 	bl	80058dc <SPI_EndRxTxTransaction>
 8005f56:	b110      	cbz	r0, 8005f5e <HAL_SPI_TransmitReceive+0x2b8>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005f58:	2320      	movs	r3, #32
 8005f5a:	6623      	str	r3, [r4, #96]	; 0x60
    errorcode = HAL_ERROR;
 8005f5c:	2001      	movs	r0, #1
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005f5e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8005f60:	b99b      	cbnz	r3, 8005f8a <HAL_SPI_TransmitReceive+0x2e4>
    hspi->State = HAL_SPI_STATE_READY;
 8005f62:	2301      	movs	r3, #1
 8005f64:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
 8005f68:	e000      	b.n	8005f6c <HAL_SPI_TransmitReceive+0x2c6>
    errorcode = HAL_BUSY;
 8005f6a:	2002      	movs	r0, #2
  __HAL_UNLOCK(hspi);
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 8005f72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    errorcode = HAL_BUSY;
 8005f76:	2002      	movs	r0, #2
 8005f78:	e7f8      	b.n	8005f6c <HAL_SPI_TransmitReceive+0x2c6>
 8005f7a:	2002      	movs	r0, #2
 8005f7c:	e7f6      	b.n	8005f6c <HAL_SPI_TransmitReceive+0x2c6>
    errorcode = HAL_ERROR;
 8005f7e:	2001      	movs	r0, #1
 8005f80:	e7f4      	b.n	8005f6c <HAL_SPI_TransmitReceive+0x2c6>
 8005f82:	2001      	movs	r0, #1
 8005f84:	e7f2      	b.n	8005f6c <HAL_SPI_TransmitReceive+0x2c6>
 8005f86:	2001      	movs	r0, #1
 8005f88:	e7f0      	b.n	8005f6c <HAL_SPI_TransmitReceive+0x2c6>
    errorcode = HAL_ERROR;
 8005f8a:	2001      	movs	r0, #1
 8005f8c:	e7ee      	b.n	8005f6c <HAL_SPI_TransmitReceive+0x2c6>
  __HAL_LOCK(hspi);
 8005f8e:	2002      	movs	r0, #2
 8005f90:	e7ef      	b.n	8005f72 <HAL_SPI_TransmitReceive+0x2cc>

08005f92 <HAL_SPI_Receive>:
{
 8005f92:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005f96:	b083      	sub	sp, #12
 8005f98:	4604      	mov	r4, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8005f9a:	f890 605d 	ldrb.w	r6, [r0, #93]	; 0x5d
 8005f9e:	b2f6      	uxtb	r6, r6
 8005fa0:	2e01      	cmp	r6, #1
 8005fa2:	f040 80c0 	bne.w	8006126 <HAL_SPI_Receive+0x194>
 8005fa6:	4688      	mov	r8, r1
 8005fa8:	4691      	mov	r9, r2
 8005faa:	461d      	mov	r5, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005fac:	6843      	ldr	r3, [r0, #4]
 8005fae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005fb2:	d03d      	beq.n	8006030 <HAL_SPI_Receive+0x9e>
  __HAL_LOCK(hspi);
 8005fb4:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 8005fb8:	2b01      	cmp	r3, #1
 8005fba:	f000 80bc 	beq.w	8006136 <HAL_SPI_Receive+0x1a4>
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8005fc4:	f7fe fb5c 	bl	8004680 <HAL_GetTick>
 8005fc8:	4607      	mov	r7, r0
  if ((pData == NULL) || (Size == 0U))
 8005fca:	f1b8 0f00 	cmp.w	r8, #0
 8005fce:	f000 80ab 	beq.w	8006128 <HAL_SPI_Receive+0x196>
 8005fd2:	f1b9 0f00 	cmp.w	r9, #0
 8005fd6:	f000 80a7 	beq.w	8006128 <HAL_SPI_Receive+0x196>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005fda:	2304      	movs	r3, #4
 8005fdc:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005fe4:	f8c4 8040 	str.w	r8, [r4, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005fe8:	f8a4 9044 	strh.w	r9, [r4, #68]	; 0x44
  hspi->RxXferCount = Size;
 8005fec:	f8a4 9046 	strh.w	r9, [r4, #70]	; 0x46
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005ff0:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8005ff2:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8005ff4:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8005ff6:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005ff8:	6523      	str	r3, [r4, #80]	; 0x50
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005ffa:	68e3      	ldr	r3, [r4, #12]
 8005ffc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006000:	d923      	bls.n	800604a <HAL_SPI_Receive+0xb8>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006002:	6822      	ldr	r2, [r4, #0]
 8006004:	6853      	ldr	r3, [r2, #4]
 8006006:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800600a:	6053      	str	r3, [r2, #4]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800600c:	68a3      	ldr	r3, [r4, #8]
 800600e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006012:	d020      	beq.n	8006056 <HAL_SPI_Receive+0xc4>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006014:	6823      	ldr	r3, [r4, #0]
 8006016:	681a      	ldr	r2, [r3, #0]
 8006018:	f012 0f40 	tst.w	r2, #64	; 0x40
 800601c:	d103      	bne.n	8006026 <HAL_SPI_Receive+0x94>
    __HAL_SPI_ENABLE(hspi);
 800601e:	681a      	ldr	r2, [r3, #0]
 8006020:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006024:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8006026:	68e3      	ldr	r3, [r4, #12]
 8006028:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800602c:	d927      	bls.n	800607e <HAL_SPI_Receive+0xec>
 800602e:	e04c      	b.n	80060ca <HAL_SPI_Receive+0x138>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006030:	6883      	ldr	r3, [r0, #8]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d1be      	bne.n	8005fb4 <HAL_SPI_Receive+0x22>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006036:	2304      	movs	r3, #4
 8006038:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800603c:	9500      	str	r5, [sp, #0]
 800603e:	4613      	mov	r3, r2
 8006040:	460a      	mov	r2, r1
 8006042:	f7ff fe30 	bl	8005ca6 <HAL_SPI_TransmitReceive>
 8006046:	4606      	mov	r6, r0
 8006048:	e071      	b.n	800612e <HAL_SPI_Receive+0x19c>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800604a:	6822      	ldr	r2, [r4, #0]
 800604c:	6853      	ldr	r3, [r2, #4]
 800604e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006052:	6053      	str	r3, [r2, #4]
 8006054:	e7da      	b.n	800600c <HAL_SPI_Receive+0x7a>
    __HAL_SPI_DISABLE(hspi);
 8006056:	6822      	ldr	r2, [r4, #0]
 8006058:	6813      	ldr	r3, [r2, #0]
 800605a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800605e:	6013      	str	r3, [r2, #0]
    SPI_1LINE_RX(hspi);
 8006060:	6822      	ldr	r2, [r4, #0]
 8006062:	6813      	ldr	r3, [r2, #0]
 8006064:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006068:	6013      	str	r3, [r2, #0]
 800606a:	e7d3      	b.n	8006014 <HAL_SPI_Receive+0x82>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800606c:	f7fe fb08 	bl	8004680 <HAL_GetTick>
 8006070:	1bc0      	subs	r0, r0, r7
 8006072:	42a8      	cmp	r0, r5
 8006074:	d302      	bcc.n	800607c <HAL_SPI_Receive+0xea>
 8006076:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 800607a:	d118      	bne.n	80060ae <HAL_SPI_Receive+0x11c>
 800607c:	b1bd      	cbz	r5, 80060ae <HAL_SPI_Receive+0x11c>
    while (hspi->RxXferCount > 0U)
 800607e:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8006082:	b29b      	uxth	r3, r3
 8006084:	2b00      	cmp	r3, #0
 8006086:	d03f      	beq.n	8006108 <HAL_SPI_Receive+0x176>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006088:	6823      	ldr	r3, [r4, #0]
 800608a:	689a      	ldr	r2, [r3, #8]
 800608c:	f012 0f01 	tst.w	r2, #1
 8006090:	d0ec      	beq.n	800606c <HAL_SPI_Receive+0xda>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006092:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8006094:	7b1b      	ldrb	r3, [r3, #12]
 8006096:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006098:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800609a:	3301      	adds	r3, #1
 800609c:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 800609e:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80060a2:	b29b      	uxth	r3, r3
 80060a4:	3b01      	subs	r3, #1
 80060a6:	b29b      	uxth	r3, r3
 80060a8:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 80060ac:	e7e7      	b.n	800607e <HAL_SPI_Receive+0xec>
          hspi->State = HAL_SPI_STATE_READY;
 80060ae:	2301      	movs	r3, #1
 80060b0:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
          errorcode = HAL_TIMEOUT;
 80060b4:	2603      	movs	r6, #3
          goto error;
 80060b6:	e037      	b.n	8006128 <HAL_SPI_Receive+0x196>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80060b8:	f7fe fae2 	bl	8004680 <HAL_GetTick>
 80060bc:	1bc0      	subs	r0, r0, r7
 80060be:	42a8      	cmp	r0, r5
 80060c0:	d302      	bcc.n	80060c8 <HAL_SPI_Receive+0x136>
 80060c2:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 80060c6:	d11a      	bne.n	80060fe <HAL_SPI_Receive+0x16c>
 80060c8:	b1cd      	cbz	r5, 80060fe <HAL_SPI_Receive+0x16c>
    while (hspi->RxXferCount > 0U)
 80060ca:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80060ce:	b29b      	uxth	r3, r3
 80060d0:	b1d3      	cbz	r3, 8006108 <HAL_SPI_Receive+0x176>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80060d2:	6823      	ldr	r3, [r4, #0]
 80060d4:	689a      	ldr	r2, [r3, #8]
 80060d6:	f012 0f01 	tst.w	r2, #1
 80060da:	d0ed      	beq.n	80060b8 <HAL_SPI_Receive+0x126>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80060dc:	68da      	ldr	r2, [r3, #12]
 80060de:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80060e0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80060e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80060e4:	3302      	adds	r3, #2
 80060e6:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 80060e8:	f8b4 c046 	ldrh.w	ip, [r4, #70]	; 0x46
 80060ec:	fa1f fc8c 	uxth.w	ip, ip
 80060f0:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 80060f4:	fa1f fc8c 	uxth.w	ip, ip
 80060f8:	f8a4 c046 	strh.w	ip, [r4, #70]	; 0x46
 80060fc:	e7e5      	b.n	80060ca <HAL_SPI_Receive+0x138>
          hspi->State = HAL_SPI_STATE_READY;
 80060fe:	2301      	movs	r3, #1
 8006100:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
          errorcode = HAL_TIMEOUT;
 8006104:	2603      	movs	r6, #3
          goto error;
 8006106:	e00f      	b.n	8006128 <HAL_SPI_Receive+0x196>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006108:	463a      	mov	r2, r7
 800610a:	4629      	mov	r1, r5
 800610c:	4620      	mov	r0, r4
 800610e:	f7ff fc16 	bl	800593e <SPI_EndRxTransaction>
 8006112:	b108      	cbz	r0, 8006118 <HAL_SPI_Receive+0x186>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006114:	2320      	movs	r3, #32
 8006116:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006118:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800611a:	b92b      	cbnz	r3, 8006128 <HAL_SPI_Receive+0x196>
    hspi->State = HAL_SPI_STATE_READY;
 800611c:	2301      	movs	r3, #1
 800611e:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006122:	2600      	movs	r6, #0
 8006124:	e000      	b.n	8006128 <HAL_SPI_Receive+0x196>
    errorcode = HAL_BUSY;
 8006126:	2602      	movs	r6, #2
  __HAL_UNLOCK(hspi);
 8006128:	2300      	movs	r3, #0
 800612a:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 800612e:	4630      	mov	r0, r6
 8006130:	b003      	add	sp, #12
 8006132:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(hspi);
 8006136:	2602      	movs	r6, #2
 8006138:	e7f9      	b.n	800612e <HAL_SPI_Receive+0x19c>

0800613a <HAL_SPI_GetState>:
  return hspi->State;
 800613a:	f890 005d 	ldrb.w	r0, [r0, #93]	; 0x5d
}
 800613e:	4770      	bx	lr

08006140 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006140:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006142:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006144:	6a04      	ldr	r4, [r0, #32]
 8006146:	f024 0401 	bic.w	r4, r4, #1
 800614a:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800614c:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800614e:	f024 0cf0 	bic.w	ip, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006152:	ea4c 1202 	orr.w	r2, ip, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006156:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 800615a:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800615c:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800615e:	6203      	str	r3, [r0, #32]
}
 8006160:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006164:	4770      	bx	lr

08006166 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006166:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006168:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800616a:	6a04      	ldr	r4, [r0, #32]
 800616c:	f024 0410 	bic.w	r4, r4, #16
 8006170:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006172:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006174:	f424 4c70 	bic.w	ip, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006178:	ea4c 3202 	orr.w	r2, ip, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800617c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8006180:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006184:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8006186:	6203      	str	r3, [r0, #32]
}
 8006188:	f85d 4b04 	ldr.w	r4, [sp], #4
 800618c:	4770      	bx	lr

0800618e <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800618e:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006190:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006194:	430b      	orrs	r3, r1
 8006196:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800619a:	6083      	str	r3, [r0, #8]
}
 800619c:	4770      	bx	lr
	...

080061a0 <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 80061a0:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80061a4:	b2db      	uxtb	r3, r3
 80061a6:	2b01      	cmp	r3, #1
 80061a8:	d12d      	bne.n	8006206 <HAL_TIM_Base_Start+0x66>
  htim->State = HAL_TIM_STATE_BUSY;
 80061aa:	2302      	movs	r3, #2
 80061ac:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061b0:	6803      	ldr	r3, [r0, #0]
 80061b2:	4a18      	ldr	r2, [pc, #96]	; (8006214 <HAL_TIM_Base_Start+0x74>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d018      	beq.n	80061ea <HAL_TIM_Base_Start+0x4a>
 80061b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061bc:	d015      	beq.n	80061ea <HAL_TIM_Base_Start+0x4a>
 80061be:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d011      	beq.n	80061ea <HAL_TIM_Base_Start+0x4a>
 80061c6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d00d      	beq.n	80061ea <HAL_TIM_Base_Start+0x4a>
 80061ce:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d009      	beq.n	80061ea <HAL_TIM_Base_Start+0x4a>
 80061d6:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 80061da:	4293      	cmp	r3, r2
 80061dc:	d005      	beq.n	80061ea <HAL_TIM_Base_Start+0x4a>
    __HAL_TIM_ENABLE(htim);
 80061de:	681a      	ldr	r2, [r3, #0]
 80061e0:	f042 0201 	orr.w	r2, r2, #1
 80061e4:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80061e6:	2000      	movs	r0, #0
 80061e8:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80061ea:	6899      	ldr	r1, [r3, #8]
 80061ec:	4a0a      	ldr	r2, [pc, #40]	; (8006218 <HAL_TIM_Base_Start+0x78>)
 80061ee:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061f0:	2a06      	cmp	r2, #6
 80061f2:	d00a      	beq.n	800620a <HAL_TIM_Base_Start+0x6a>
 80061f4:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80061f8:	d009      	beq.n	800620e <HAL_TIM_Base_Start+0x6e>
      __HAL_TIM_ENABLE(htim);
 80061fa:	681a      	ldr	r2, [r3, #0]
 80061fc:	f042 0201 	orr.w	r2, r2, #1
 8006200:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8006202:	2000      	movs	r0, #0
 8006204:	4770      	bx	lr
    return HAL_ERROR;
 8006206:	2001      	movs	r0, #1
 8006208:	4770      	bx	lr
  return HAL_OK;
 800620a:	2000      	movs	r0, #0
 800620c:	4770      	bx	lr
 800620e:	2000      	movs	r0, #0
}
 8006210:	4770      	bx	lr
 8006212:	bf00      	nop
 8006214:	40012c00 	.word	0x40012c00
 8006218:	00010007 	.word	0x00010007

0800621c <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 800621c:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800621e:	4a30      	ldr	r2, [pc, #192]	; (80062e0 <TIM_Base_SetConfig+0xc4>)
 8006220:	4290      	cmp	r0, r2
 8006222:	d00e      	beq.n	8006242 <TIM_Base_SetConfig+0x26>
 8006224:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8006228:	d00b      	beq.n	8006242 <TIM_Base_SetConfig+0x26>
 800622a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800622e:	4290      	cmp	r0, r2
 8006230:	d007      	beq.n	8006242 <TIM_Base_SetConfig+0x26>
 8006232:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006236:	4290      	cmp	r0, r2
 8006238:	d003      	beq.n	8006242 <TIM_Base_SetConfig+0x26>
 800623a:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 800623e:	4290      	cmp	r0, r2
 8006240:	d103      	bne.n	800624a <TIM_Base_SetConfig+0x2e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006242:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8006246:	684a      	ldr	r2, [r1, #4]
 8006248:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800624a:	4a25      	ldr	r2, [pc, #148]	; (80062e0 <TIM_Base_SetConfig+0xc4>)
 800624c:	4290      	cmp	r0, r2
 800624e:	d01a      	beq.n	8006286 <TIM_Base_SetConfig+0x6a>
 8006250:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8006254:	d017      	beq.n	8006286 <TIM_Base_SetConfig+0x6a>
 8006256:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800625a:	4290      	cmp	r0, r2
 800625c:	d013      	beq.n	8006286 <TIM_Base_SetConfig+0x6a>
 800625e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006262:	4290      	cmp	r0, r2
 8006264:	d00f      	beq.n	8006286 <TIM_Base_SetConfig+0x6a>
 8006266:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 800626a:	4290      	cmp	r0, r2
 800626c:	d00b      	beq.n	8006286 <TIM_Base_SetConfig+0x6a>
 800626e:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8006272:	4290      	cmp	r0, r2
 8006274:	d007      	beq.n	8006286 <TIM_Base_SetConfig+0x6a>
 8006276:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800627a:	4290      	cmp	r0, r2
 800627c:	d003      	beq.n	8006286 <TIM_Base_SetConfig+0x6a>
 800627e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006282:	4290      	cmp	r0, r2
 8006284:	d103      	bne.n	800628e <TIM_Base_SetConfig+0x72>
    tmpcr1 &= ~TIM_CR1_CKD;
 8006286:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800628a:	68ca      	ldr	r2, [r1, #12]
 800628c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800628e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006292:	694a      	ldr	r2, [r1, #20]
 8006294:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8006296:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006298:	688b      	ldr	r3, [r1, #8]
 800629a:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800629c:	680b      	ldr	r3, [r1, #0]
 800629e:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80062a0:	4b0f      	ldr	r3, [pc, #60]	; (80062e0 <TIM_Base_SetConfig+0xc4>)
 80062a2:	4298      	cmp	r0, r3
 80062a4:	d00f      	beq.n	80062c6 <TIM_Base_SetConfig+0xaa>
 80062a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062aa:	4298      	cmp	r0, r3
 80062ac:	d00b      	beq.n	80062c6 <TIM_Base_SetConfig+0xaa>
 80062ae:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 80062b2:	4298      	cmp	r0, r3
 80062b4:	d007      	beq.n	80062c6 <TIM_Base_SetConfig+0xaa>
 80062b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80062ba:	4298      	cmp	r0, r3
 80062bc:	d003      	beq.n	80062c6 <TIM_Base_SetConfig+0xaa>
 80062be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80062c2:	4298      	cmp	r0, r3
 80062c4:	d101      	bne.n	80062ca <TIM_Base_SetConfig+0xae>
    TIMx->RCR = Structure->RepetitionCounter;
 80062c6:	690b      	ldr	r3, [r1, #16]
 80062c8:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 80062ca:	2301      	movs	r3, #1
 80062cc:	6143      	str	r3, [r0, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80062ce:	6903      	ldr	r3, [r0, #16]
 80062d0:	f013 0f01 	tst.w	r3, #1
 80062d4:	d003      	beq.n	80062de <TIM_Base_SetConfig+0xc2>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80062d6:	6903      	ldr	r3, [r0, #16]
 80062d8:	f023 0301 	bic.w	r3, r3, #1
 80062dc:	6103      	str	r3, [r0, #16]
}
 80062de:	4770      	bx	lr
 80062e0:	40012c00 	.word	0x40012c00

080062e4 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 80062e4:	b360      	cbz	r0, 8006340 <HAL_TIM_Base_Init+0x5c>
{
 80062e6:	b510      	push	{r4, lr}
 80062e8:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80062ea:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80062ee:	b313      	cbz	r3, 8006336 <HAL_TIM_Base_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 80062f0:	2302      	movs	r3, #2
 80062f2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80062f6:	4621      	mov	r1, r4
 80062f8:	f851 0b04 	ldr.w	r0, [r1], #4
 80062fc:	f7ff ff8e 	bl	800621c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006300:	2301      	movs	r3, #1
 8006302:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006306:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800630a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800630e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8006312:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8006316:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800631a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800631e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8006322:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006326:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800632a:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 800632e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8006332:	2000      	movs	r0, #0
}
 8006334:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8006336:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800633a:	f000 fe71 	bl	8007020 <HAL_TIM_Base_MspInit>
 800633e:	e7d7      	b.n	80062f0 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8006340:	2001      	movs	r0, #1
}
 8006342:	4770      	bx	lr

08006344 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006344:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006346:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006348:	f424 4c7f 	bic.w	ip, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800634c:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8006350:	430a      	orrs	r2, r1
 8006352:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006356:	6082      	str	r2, [r0, #8]
}
 8006358:	f85d 4b04 	ldr.w	r4, [sp], #4
 800635c:	4770      	bx	lr
	...

08006360 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8006360:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8006364:	2b01      	cmp	r3, #1
 8006366:	d076      	beq.n	8006456 <HAL_TIM_ConfigClockSource+0xf6>
{
 8006368:	b510      	push	{r4, lr}
 800636a:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 800636c:	2301      	movs	r3, #1
 800636e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8006372:	2302      	movs	r3, #2
 8006374:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8006378:	6802      	ldr	r2, [r0, #0]
 800637a:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800637c:	4b37      	ldr	r3, [pc, #220]	; (800645c <HAL_TIM_ConfigClockSource+0xfc>)
 800637e:	4003      	ands	r3, r0
  htim->Instance->SMCR = tmpsmcr;
 8006380:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8006382:	680b      	ldr	r3, [r1, #0]
 8006384:	2b60      	cmp	r3, #96	; 0x60
 8006386:	d04c      	beq.n	8006422 <HAL_TIM_ConfigClockSource+0xc2>
 8006388:	d829      	bhi.n	80063de <HAL_TIM_ConfigClockSource+0x7e>
 800638a:	2b40      	cmp	r3, #64	; 0x40
 800638c:	d054      	beq.n	8006438 <HAL_TIM_ConfigClockSource+0xd8>
 800638e:	d90c      	bls.n	80063aa <HAL_TIM_ConfigClockSource+0x4a>
 8006390:	2b50      	cmp	r3, #80	; 0x50
 8006392:	d122      	bne.n	80063da <HAL_TIM_ConfigClockSource+0x7a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006394:	68ca      	ldr	r2, [r1, #12]
 8006396:	6849      	ldr	r1, [r1, #4]
 8006398:	6820      	ldr	r0, [r4, #0]
 800639a:	f7ff fed1 	bl	8006140 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800639e:	2150      	movs	r1, #80	; 0x50
 80063a0:	6820      	ldr	r0, [r4, #0]
 80063a2:	f7ff fef4 	bl	800618e <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80063a6:	2000      	movs	r0, #0
      break;
 80063a8:	e005      	b.n	80063b6 <HAL_TIM_ConfigClockSource+0x56>
  switch (sClockSourceConfig->ClockSource)
 80063aa:	2b20      	cmp	r3, #32
 80063ac:	d00d      	beq.n	80063ca <HAL_TIM_ConfigClockSource+0x6a>
 80063ae:	d909      	bls.n	80063c4 <HAL_TIM_ConfigClockSource+0x64>
 80063b0:	2b30      	cmp	r3, #48	; 0x30
 80063b2:	d00a      	beq.n	80063ca <HAL_TIM_ConfigClockSource+0x6a>
      status = HAL_ERROR;
 80063b4:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_READY;
 80063b6:	2301      	movs	r3, #1
 80063b8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80063bc:	2300      	movs	r3, #0
 80063be:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 80063c2:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 80063c4:	b10b      	cbz	r3, 80063ca <HAL_TIM_ConfigClockSource+0x6a>
 80063c6:	2b10      	cmp	r3, #16
 80063c8:	d105      	bne.n	80063d6 <HAL_TIM_ConfigClockSource+0x76>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80063ca:	4619      	mov	r1, r3
 80063cc:	6820      	ldr	r0, [r4, #0]
 80063ce:	f7ff fede 	bl	800618e <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80063d2:	2000      	movs	r0, #0
      break;
 80063d4:	e7ef      	b.n	80063b6 <HAL_TIM_ConfigClockSource+0x56>
      status = HAL_ERROR;
 80063d6:	2001      	movs	r0, #1
 80063d8:	e7ed      	b.n	80063b6 <HAL_TIM_ConfigClockSource+0x56>
 80063da:	2001      	movs	r0, #1
 80063dc:	e7eb      	b.n	80063b6 <HAL_TIM_ConfigClockSource+0x56>
  switch (sClockSourceConfig->ClockSource)
 80063de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063e2:	d034      	beq.n	800644e <HAL_TIM_ConfigClockSource+0xee>
 80063e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063e8:	d10c      	bne.n	8006404 <HAL_TIM_ConfigClockSource+0xa4>
      TIM_ETR_SetConfig(htim->Instance,
 80063ea:	68cb      	ldr	r3, [r1, #12]
 80063ec:	684a      	ldr	r2, [r1, #4]
 80063ee:	6889      	ldr	r1, [r1, #8]
 80063f0:	6820      	ldr	r0, [r4, #0]
 80063f2:	f7ff ffa7 	bl	8006344 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80063f6:	6822      	ldr	r2, [r4, #0]
 80063f8:	6893      	ldr	r3, [r2, #8]
 80063fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80063fe:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8006400:	2000      	movs	r0, #0
      break;
 8006402:	e7d8      	b.n	80063b6 <HAL_TIM_ConfigClockSource+0x56>
  switch (sClockSourceConfig->ClockSource)
 8006404:	2b70      	cmp	r3, #112	; 0x70
 8006406:	d124      	bne.n	8006452 <HAL_TIM_ConfigClockSource+0xf2>
      TIM_ETR_SetConfig(htim->Instance,
 8006408:	68cb      	ldr	r3, [r1, #12]
 800640a:	684a      	ldr	r2, [r1, #4]
 800640c:	6889      	ldr	r1, [r1, #8]
 800640e:	6820      	ldr	r0, [r4, #0]
 8006410:	f7ff ff98 	bl	8006344 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006414:	6822      	ldr	r2, [r4, #0]
 8006416:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006418:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 800641c:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800641e:	2000      	movs	r0, #0
      break;
 8006420:	e7c9      	b.n	80063b6 <HAL_TIM_ConfigClockSource+0x56>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006422:	68ca      	ldr	r2, [r1, #12]
 8006424:	6849      	ldr	r1, [r1, #4]
 8006426:	6820      	ldr	r0, [r4, #0]
 8006428:	f7ff fe9d 	bl	8006166 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800642c:	2160      	movs	r1, #96	; 0x60
 800642e:	6820      	ldr	r0, [r4, #0]
 8006430:	f7ff fead 	bl	800618e <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8006434:	2000      	movs	r0, #0
      break;
 8006436:	e7be      	b.n	80063b6 <HAL_TIM_ConfigClockSource+0x56>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006438:	68ca      	ldr	r2, [r1, #12]
 800643a:	6849      	ldr	r1, [r1, #4]
 800643c:	6820      	ldr	r0, [r4, #0]
 800643e:	f7ff fe7f 	bl	8006140 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006442:	2140      	movs	r1, #64	; 0x40
 8006444:	6820      	ldr	r0, [r4, #0]
 8006446:	f7ff fea2 	bl	800618e <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800644a:	2000      	movs	r0, #0
      break;
 800644c:	e7b3      	b.n	80063b6 <HAL_TIM_ConfigClockSource+0x56>
  switch (sClockSourceConfig->ClockSource)
 800644e:	2000      	movs	r0, #0
 8006450:	e7b1      	b.n	80063b6 <HAL_TIM_ConfigClockSource+0x56>
      status = HAL_ERROR;
 8006452:	2001      	movs	r0, #1
 8006454:	e7af      	b.n	80063b6 <HAL_TIM_ConfigClockSource+0x56>
  __HAL_LOCK(htim);
 8006456:	2002      	movs	r0, #2
}
 8006458:	4770      	bx	lr
 800645a:	bf00      	nop
 800645c:	fffe0088 	.word	0xfffe0088

08006460 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006460:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8006464:	2b01      	cmp	r3, #1
 8006466:	d03e      	beq.n	80064e6 <HAL_TIMEx_MasterConfigSynchronization+0x86>
{
 8006468:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 800646a:	2301      	movs	r3, #1
 800646c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006470:	2302      	movs	r3, #2
 8006472:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006476:	6802      	ldr	r2, [r0, #0]
 8006478:	6853      	ldr	r3, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800647a:	6894      	ldr	r4, [r2, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800647c:	4d1b      	ldr	r5, [pc, #108]	; (80064ec <HAL_TIMEx_MasterConfigSynchronization+0x8c>)
 800647e:	42aa      	cmp	r2, r5
 8006480:	d003      	beq.n	800648a <HAL_TIMEx_MasterConfigSynchronization+0x2a>
 8006482:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8006486:	42aa      	cmp	r2, r5
 8006488:	d103      	bne.n	8006492 <HAL_TIMEx_MasterConfigSynchronization+0x32>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800648a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800648e:	684d      	ldr	r5, [r1, #4]
 8006490:	432b      	orrs	r3, r5
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006492:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006496:	680d      	ldr	r5, [r1, #0]
 8006498:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800649a:	6053      	str	r3, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800649c:	6803      	ldr	r3, [r0, #0]
 800649e:	4a13      	ldr	r2, [pc, #76]	; (80064ec <HAL_TIMEx_MasterConfigSynchronization+0x8c>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d012      	beq.n	80064ca <HAL_TIMEx_MasterConfigSynchronization+0x6a>
 80064a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064a8:	d00f      	beq.n	80064ca <HAL_TIMEx_MasterConfigSynchronization+0x6a>
 80064aa:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d00b      	beq.n	80064ca <HAL_TIMEx_MasterConfigSynchronization+0x6a>
 80064b2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d007      	beq.n	80064ca <HAL_TIMEx_MasterConfigSynchronization+0x6a>
 80064ba:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 80064be:	4293      	cmp	r3, r2
 80064c0:	d003      	beq.n	80064ca <HAL_TIMEx_MasterConfigSynchronization+0x6a>
 80064c2:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d104      	bne.n	80064d4 <HAL_TIMEx_MasterConfigSynchronization+0x74>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80064ca:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80064ce:	688a      	ldr	r2, [r1, #8]
 80064d0:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80064d2:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80064d4:	2301      	movs	r3, #1
 80064d6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80064da:	2300      	movs	r3, #0
 80064dc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 80064e0:	4618      	mov	r0, r3
}
 80064e2:	bc30      	pop	{r4, r5}
 80064e4:	4770      	bx	lr
  __HAL_LOCK(htim);
 80064e6:	2002      	movs	r0, #2
}
 80064e8:	4770      	bx	lr
 80064ea:	bf00      	nop
 80064ec:	40012c00 	.word	0x40012c00

080064f0 <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80064f0:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064f2:	e852 3f00 	ldrex	r3, [r2]
 80064f6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064fa:	e842 3100 	strex	r1, r3, [r2]
 80064fe:	2900      	cmp	r1, #0
 8006500:	d1f6      	bne.n	80064f0 <UART_EndTxTransfer>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006502:	2320      	movs	r3, #32
 8006504:	67c3      	str	r3, [r0, #124]	; 0x7c
}
 8006506:	4770      	bx	lr

08006508 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006508:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800650a:	e852 3f00 	ldrex	r3, [r2]
 800650e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006512:	e842 3100 	strex	r1, r3, [r2]
 8006516:	2900      	cmp	r1, #0
 8006518:	d1f6      	bne.n	8006508 <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800651a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800651c:	f102 0308 	add.w	r3, r2, #8
 8006520:	e853 3f00 	ldrex	r3, [r3]
 8006524:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006528:	3208      	adds	r2, #8
 800652a:	e842 3100 	strex	r1, r3, [r2]
 800652e:	2900      	cmp	r1, #0
 8006530:	d1f3      	bne.n	800651a <UART_EndRxTransfer+0x12>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006532:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8006534:	2b01      	cmp	r3, #1
 8006536:	d006      	beq.n	8006546 <UART_EndRxTransfer+0x3e>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006538:	2320      	movs	r3, #32
 800653a:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800653e:	2300      	movs	r3, #0
 8006540:	6603      	str	r3, [r0, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006542:	6683      	str	r3, [r0, #104]	; 0x68
}
 8006544:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006546:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006548:	e852 3f00 	ldrex	r3, [r2]
 800654c:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006550:	e842 3100 	strex	r1, r3, [r2]
 8006554:	2900      	cmp	r1, #0
 8006556:	d1f6      	bne.n	8006546 <UART_EndRxTransfer+0x3e>
 8006558:	e7ee      	b.n	8006538 <UART_EndRxTransfer+0x30>
	...

0800655c <HAL_UART_Transmit_DMA>:
{
 800655c:	4613      	mov	r3, r2
  if (huart->gState == HAL_UART_STATE_READY)
 800655e:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 8006560:	2a20      	cmp	r2, #32
 8006562:	d13b      	bne.n	80065dc <HAL_UART_Transmit_DMA+0x80>
{
 8006564:	b510      	push	{r4, lr}
 8006566:	4604      	mov	r4, r0
    if ((pData == NULL) || (Size == 0U))
 8006568:	2900      	cmp	r1, #0
 800656a:	d039      	beq.n	80065e0 <HAL_UART_Transmit_DMA+0x84>
 800656c:	2b00      	cmp	r3, #0
 800656e:	d039      	beq.n	80065e4 <HAL_UART_Transmit_DMA+0x88>
    huart->pTxBuffPtr  = pData;
 8006570:	64c1      	str	r1, [r0, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8006572:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
    huart->TxXferCount = Size;
 8006576:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800657a:	2200      	movs	r2, #0
 800657c:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006580:	2221      	movs	r2, #33	; 0x21
 8006582:	67c2      	str	r2, [r0, #124]	; 0x7c
    if (huart->hdmatx != NULL)
 8006584:	6f02      	ldr	r2, [r0, #112]	; 0x70
 8006586:	b1c2      	cbz	r2, 80065ba <HAL_UART_Transmit_DMA+0x5e>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006588:	4917      	ldr	r1, [pc, #92]	; (80065e8 <HAL_UART_Transmit_DMA+0x8c>)
 800658a:	6291      	str	r1, [r2, #40]	; 0x28
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800658c:	6f02      	ldr	r2, [r0, #112]	; 0x70
 800658e:	4917      	ldr	r1, [pc, #92]	; (80065ec <HAL_UART_Transmit_DMA+0x90>)
 8006590:	62d1      	str	r1, [r2, #44]	; 0x2c
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006592:	6f02      	ldr	r2, [r0, #112]	; 0x70
 8006594:	4916      	ldr	r1, [pc, #88]	; (80065f0 <HAL_UART_Transmit_DMA+0x94>)
 8006596:	6311      	str	r1, [r2, #48]	; 0x30
      huart->hdmatx->XferAbortCallback = NULL;
 8006598:	6f02      	ldr	r2, [r0, #112]	; 0x70
 800659a:	2100      	movs	r1, #0
 800659c:	6351      	str	r1, [r2, #52]	; 0x34
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800659e:	6802      	ldr	r2, [r0, #0]
 80065a0:	3228      	adds	r2, #40	; 0x28
 80065a2:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 80065a4:	6f00      	ldr	r0, [r0, #112]	; 0x70
 80065a6:	f7fe f955 	bl	8004854 <HAL_DMA_Start_IT>
 80065aa:	b130      	cbz	r0, 80065ba <HAL_UART_Transmit_DMA+0x5e>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80065ac:	2310      	movs	r3, #16
 80065ae:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        huart->gState = HAL_UART_STATE_READY;
 80065b2:	2320      	movs	r3, #32
 80065b4:	67e3      	str	r3, [r4, #124]	; 0x7c
        return HAL_ERROR;
 80065b6:	2001      	movs	r0, #1
 80065b8:	e00f      	b.n	80065da <HAL_UART_Transmit_DMA+0x7e>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80065ba:	6823      	ldr	r3, [r4, #0]
 80065bc:	2240      	movs	r2, #64	; 0x40
 80065be:	621a      	str	r2, [r3, #32]
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80065c0:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065c2:	f102 0308 	add.w	r3, r2, #8
 80065c6:	e853 3f00 	ldrex	r3, [r3]
 80065ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065ce:	3208      	adds	r2, #8
 80065d0:	e842 3100 	strex	r1, r3, [r2]
 80065d4:	2900      	cmp	r1, #0
 80065d6:	d1f3      	bne.n	80065c0 <HAL_UART_Transmit_DMA+0x64>
    return HAL_OK;
 80065d8:	2000      	movs	r0, #0
}
 80065da:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 80065dc:	2002      	movs	r0, #2
}
 80065de:	4770      	bx	lr
      return HAL_ERROR;
 80065e0:	2001      	movs	r0, #1
 80065e2:	e7fa      	b.n	80065da <HAL_UART_Transmit_DMA+0x7e>
 80065e4:	2001      	movs	r0, #1
 80065e6:	e7f8      	b.n	80065da <HAL_UART_Transmit_DMA+0x7e>
 80065e8:	080065f5 	.word	0x080065f5
 80065ec:	0800665d 	.word	0x0800665d
 80065f0:	08006669 	.word	0x08006669

080065f4 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80065f4:	b508      	push	{r3, lr}
 80065f6:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80065f8:	6a40      	ldr	r0, [r0, #36]	; 0x24

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80065fa:	699b      	ldr	r3, [r3, #24]
 80065fc:	2b20      	cmp	r3, #32
 80065fe:	d018      	beq.n	8006632 <UART_DMATransmitCplt+0x3e>
  {
    huart->TxXferCount = 0U;
 8006600:	2300      	movs	r3, #0
 8006602:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006606:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006608:	f102 0308 	add.w	r3, r2, #8
 800660c:	e853 3f00 	ldrex	r3, [r3]
 8006610:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006614:	3208      	adds	r2, #8
 8006616:	e842 3100 	strex	r1, r3, [r2]
 800661a:	2900      	cmp	r1, #0
 800661c:	d1f3      	bne.n	8006606 <UART_DMATransmitCplt+0x12>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800661e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006620:	e852 3f00 	ldrex	r3, [r2]
 8006624:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006628:	e842 3100 	strex	r1, r3, [r2]
 800662c:	2900      	cmp	r1, #0
 800662e:	d1f6      	bne.n	800661e <UART_DMATransmitCplt+0x2a>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006630:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 8006632:	f7fd fd4d 	bl	80040d0 <HAL_UART_TxCpltCallback>
}
 8006636:	e7fb      	b.n	8006630 <UART_DMATransmitCplt+0x3c>

08006638 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006638:	b508      	push	{r3, lr}
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800663a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800663c:	e852 3f00 	ldrex	r3, [r2]
 8006640:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006644:	e842 3100 	strex	r1, r3, [r2]
 8006648:	2900      	cmp	r1, #0
 800664a:	d1f6      	bne.n	800663a <UART_EndTransmit_IT+0x2>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800664c:	2320      	movs	r3, #32
 800664e:	67c3      	str	r3, [r0, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006650:	2300      	movs	r3, #0
 8006652:	66c3      	str	r3, [r0, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006654:	f7fd fd3c 	bl	80040d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006658:	bd08      	pop	{r3, pc}

0800665a <HAL_UART_TxHalfCpltCallback>:
}
 800665a:	4770      	bx	lr

0800665c <UART_DMATxHalfCplt>:
{
 800665c:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 800665e:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8006660:	f7ff fffb 	bl	800665a <HAL_UART_TxHalfCpltCallback>
}
 8006664:	bd08      	pop	{r3, pc}

08006666 <HAL_UART_ErrorCallback>:
}
 8006666:	4770      	bx	lr

08006668 <UART_DMAError>:
{
 8006668:	b538      	push	{r3, r4, r5, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800666a:	6a44      	ldr	r4, [r0, #36]	; 0x24
  const HAL_UART_StateTypeDef gstate = huart->gState;
 800666c:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800666e:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006672:	6823      	ldr	r3, [r4, #0]
 8006674:	689b      	ldr	r3, [r3, #8]
 8006676:	f013 0f80 	tst.w	r3, #128	; 0x80
 800667a:	d001      	beq.n	8006680 <UART_DMAError+0x18>
 800667c:	2a21      	cmp	r2, #33	; 0x21
 800667e:	d010      	beq.n	80066a2 <UART_DMAError+0x3a>
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006680:	6823      	ldr	r3, [r4, #0]
 8006682:	689b      	ldr	r3, [r3, #8]
 8006684:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006688:	d001      	beq.n	800668e <UART_DMAError+0x26>
 800668a:	2d22      	cmp	r5, #34	; 0x22
 800668c:	d010      	beq.n	80066b0 <UART_DMAError+0x48>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800668e:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8006692:	f043 0310 	orr.w	r3, r3, #16
 8006696:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  HAL_UART_ErrorCallback(huart);
 800669a:	4620      	mov	r0, r4
 800669c:	f7ff ffe3 	bl	8006666 <HAL_UART_ErrorCallback>
}
 80066a0:	bd38      	pop	{r3, r4, r5, pc}
    huart->TxXferCount = 0U;
 80066a2:	2300      	movs	r3, #0
 80066a4:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
    UART_EndTxTransfer(huart);
 80066a8:	4620      	mov	r0, r4
 80066aa:	f7ff ff21 	bl	80064f0 <UART_EndTxTransfer>
 80066ae:	e7e7      	b.n	8006680 <UART_DMAError+0x18>
    huart->RxXferCount = 0U;
 80066b0:	2300      	movs	r3, #0
 80066b2:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 80066b6:	4620      	mov	r0, r4
 80066b8:	f7ff ff26 	bl	8006508 <UART_EndRxTransfer>
 80066bc:	e7e7      	b.n	800668e <UART_DMAError+0x26>

080066be <UART_DMAAbortOnError>:
{
 80066be:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80066c0:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0U;
 80066c2:	2300      	movs	r3, #0
 80066c4:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80066c8:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
  HAL_UART_ErrorCallback(huart);
 80066cc:	f7ff ffcb 	bl	8006666 <HAL_UART_ErrorCallback>
}
 80066d0:	bd08      	pop	{r3, pc}

080066d2 <HAL_UARTEx_RxEventCallback>:
}
 80066d2:	4770      	bx	lr

080066d4 <HAL_UART_IRQHandler>:
{
 80066d4:	b570      	push	{r4, r5, r6, lr}
 80066d6:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80066d8:	6801      	ldr	r1, [r0, #0]
 80066da:	69cb      	ldr	r3, [r1, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80066dc:	6808      	ldr	r0, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80066de:	688d      	ldr	r5, [r1, #8]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80066e0:	f640 020f 	movw	r2, #2063	; 0x80f
  if (errorflags == 0U)
 80066e4:	401a      	ands	r2, r3
 80066e6:	d105      	bne.n	80066f4 <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80066e8:	f013 0f20 	tst.w	r3, #32
 80066ec:	d002      	beq.n	80066f4 <HAL_UART_IRQHandler+0x20>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80066ee:	f010 0f20 	tst.w	r0, #32
 80066f2:	d120      	bne.n	8006736 <HAL_UART_IRQHandler+0x62>
  if ((errorflags != 0U)
 80066f4:	b12a      	cbz	r2, 8006702 <HAL_UART_IRQHandler+0x2e>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80066f6:	f015 0201 	ands.w	r2, r5, #1
 80066fa:	d122      	bne.n	8006742 <HAL_UART_IRQHandler+0x6e>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80066fc:	4eae      	ldr	r6, [pc, #696]	; (80069b8 <HAL_UART_IRQHandler+0x2e4>)
 80066fe:	4230      	tst	r0, r6
 8006700:	d11f      	bne.n	8006742 <HAL_UART_IRQHandler+0x6e>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006702:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8006704:	2a01      	cmp	r2, #1
 8006706:	f000 80ab 	beq.w	8006860 <HAL_UART_IRQHandler+0x18c>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800670a:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800670e:	d003      	beq.n	8006718 <HAL_UART_IRQHandler+0x44>
 8006710:	f415 0f80 	tst.w	r5, #4194304	; 0x400000
 8006714:	f040 813d 	bne.w	8006992 <HAL_UART_IRQHandler+0x2be>
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006718:	f013 0f80 	tst.w	r3, #128	; 0x80
 800671c:	d003      	beq.n	8006726 <HAL_UART_IRQHandler+0x52>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800671e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8006722:	f040 813d 	bne.w	80069a0 <HAL_UART_IRQHandler+0x2cc>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006726:	f013 0f40 	tst.w	r3, #64	; 0x40
 800672a:	d003      	beq.n	8006734 <HAL_UART_IRQHandler+0x60>
 800672c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006730:	f040 813d 	bne.w	80069ae <HAL_UART_IRQHandler+0x2da>
}
 8006734:	bd70      	pop	{r4, r5, r6, pc}
      if (huart->RxISR != NULL)
 8006736:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8006738:	2b00      	cmp	r3, #0
 800673a:	d0fb      	beq.n	8006734 <HAL_UART_IRQHandler+0x60>
        huart->RxISR(huart);
 800673c:	4620      	mov	r0, r4
 800673e:	4798      	blx	r3
      return;
 8006740:	e7f8      	b.n	8006734 <HAL_UART_IRQHandler+0x60>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006742:	f013 0f01 	tst.w	r3, #1
 8006746:	d009      	beq.n	800675c <HAL_UART_IRQHandler+0x88>
 8006748:	f410 7f80 	tst.w	r0, #256	; 0x100
 800674c:	d006      	beq.n	800675c <HAL_UART_IRQHandler+0x88>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800674e:	2501      	movs	r5, #1
 8006750:	620d      	str	r5, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006752:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 8006756:	4329      	orrs	r1, r5
 8006758:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800675c:	f013 0f02 	tst.w	r3, #2
 8006760:	d009      	beq.n	8006776 <HAL_UART_IRQHandler+0xa2>
 8006762:	b142      	cbz	r2, 8006776 <HAL_UART_IRQHandler+0xa2>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006764:	6821      	ldr	r1, [r4, #0]
 8006766:	2502      	movs	r5, #2
 8006768:	620d      	str	r5, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800676a:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 800676e:	f041 0104 	orr.w	r1, r1, #4
 8006772:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006776:	f013 0f04 	tst.w	r3, #4
 800677a:	d009      	beq.n	8006790 <HAL_UART_IRQHandler+0xbc>
 800677c:	b142      	cbz	r2, 8006790 <HAL_UART_IRQHandler+0xbc>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800677e:	6821      	ldr	r1, [r4, #0]
 8006780:	2504      	movs	r5, #4
 8006782:	620d      	str	r5, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006784:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 8006788:	f041 0102 	orr.w	r1, r1, #2
 800678c:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006790:	f013 0f08 	tst.w	r3, #8
 8006794:	d00b      	beq.n	80067ae <HAL_UART_IRQHandler+0xda>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006796:	f010 0f20 	tst.w	r0, #32
 800679a:	d100      	bne.n	800679e <HAL_UART_IRQHandler+0xca>
 800679c:	b13a      	cbz	r2, 80067ae <HAL_UART_IRQHandler+0xda>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800679e:	6822      	ldr	r2, [r4, #0]
 80067a0:	2108      	movs	r1, #8
 80067a2:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80067a4:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 80067a8:	430a      	orrs	r2, r1
 80067aa:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80067ae:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80067b2:	d00c      	beq.n	80067ce <HAL_UART_IRQHandler+0xfa>
 80067b4:	f010 6f80 	tst.w	r0, #67108864	; 0x4000000
 80067b8:	d009      	beq.n	80067ce <HAL_UART_IRQHandler+0xfa>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80067ba:	6822      	ldr	r2, [r4, #0]
 80067bc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80067c0:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80067c2:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 80067c6:	f042 0220 	orr.w	r2, r2, #32
 80067ca:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80067ce:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 80067d2:	2a00      	cmp	r2, #0
 80067d4:	d0ae      	beq.n	8006734 <HAL_UART_IRQHandler+0x60>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80067d6:	f013 0f20 	tst.w	r3, #32
 80067da:	d006      	beq.n	80067ea <HAL_UART_IRQHandler+0x116>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80067dc:	f010 0f20 	tst.w	r0, #32
 80067e0:	d003      	beq.n	80067ea <HAL_UART_IRQHandler+0x116>
        if (huart->RxISR != NULL)
 80067e2:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80067e4:	b10b      	cbz	r3, 80067ea <HAL_UART_IRQHandler+0x116>
          huart->RxISR(huart);
 80067e6:	4620      	mov	r0, r4
 80067e8:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 80067ea:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80067ee:	6823      	ldr	r3, [r4, #0]
 80067f0:	689b      	ldr	r3, [r3, #8]
 80067f2:	f013 0f40 	tst.w	r3, #64	; 0x40
 80067f6:	d102      	bne.n	80067fe <HAL_UART_IRQHandler+0x12a>
 80067f8:	f012 0f28 	tst.w	r2, #40	; 0x28
 80067fc:	d029      	beq.n	8006852 <HAL_UART_IRQHandler+0x17e>
        UART_EndRxTransfer(huart);
 80067fe:	4620      	mov	r0, r4
 8006800:	f7ff fe82 	bl	8006508 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006804:	6823      	ldr	r3, [r4, #0]
 8006806:	689b      	ldr	r3, [r3, #8]
 8006808:	f013 0f40 	tst.w	r3, #64	; 0x40
 800680c:	d01d      	beq.n	800684a <HAL_UART_IRQHandler+0x176>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800680e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006810:	f102 0308 	add.w	r3, r2, #8
 8006814:	e853 3f00 	ldrex	r3, [r3]
 8006818:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800681c:	3208      	adds	r2, #8
 800681e:	e842 3100 	strex	r1, r3, [r2]
 8006822:	2900      	cmp	r1, #0
 8006824:	d1f3      	bne.n	800680e <HAL_UART_IRQHandler+0x13a>
          if (huart->hdmarx != NULL)
 8006826:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8006828:	b15b      	cbz	r3, 8006842 <HAL_UART_IRQHandler+0x16e>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800682a:	4a64      	ldr	r2, [pc, #400]	; (80069bc <HAL_UART_IRQHandler+0x2e8>)
 800682c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800682e:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8006830:	f7fe f86f 	bl	8004912 <HAL_DMA_Abort_IT>
 8006834:	2800      	cmp	r0, #0
 8006836:	f43f af7d 	beq.w	8006734 <HAL_UART_IRQHandler+0x60>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800683a:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800683c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800683e:	4798      	blx	r3
 8006840:	e778      	b.n	8006734 <HAL_UART_IRQHandler+0x60>
            HAL_UART_ErrorCallback(huart);
 8006842:	4620      	mov	r0, r4
 8006844:	f7ff ff0f 	bl	8006666 <HAL_UART_ErrorCallback>
 8006848:	e774      	b.n	8006734 <HAL_UART_IRQHandler+0x60>
          HAL_UART_ErrorCallback(huart);
 800684a:	4620      	mov	r0, r4
 800684c:	f7ff ff0b 	bl	8006666 <HAL_UART_ErrorCallback>
 8006850:	e770      	b.n	8006734 <HAL_UART_IRQHandler+0x60>
        HAL_UART_ErrorCallback(huart);
 8006852:	4620      	mov	r0, r4
 8006854:	f7ff ff07 	bl	8006666 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006858:	2300      	movs	r3, #0
 800685a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    return;
 800685e:	e769      	b.n	8006734 <HAL_UART_IRQHandler+0x60>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006860:	f013 0f10 	tst.w	r3, #16
 8006864:	f43f af51 	beq.w	800670a <HAL_UART_IRQHandler+0x36>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006868:	f010 0f10 	tst.w	r0, #16
 800686c:	f43f af4d 	beq.w	800670a <HAL_UART_IRQHandler+0x36>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006870:	2310      	movs	r3, #16
 8006872:	620b      	str	r3, [r1, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006874:	6823      	ldr	r3, [r4, #0]
 8006876:	689b      	ldr	r3, [r3, #8]
 8006878:	f013 0f40 	tst.w	r3, #64	; 0x40
 800687c:	d04f      	beq.n	800691e <HAL_UART_IRQHandler+0x24a>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800687e:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8006880:	6813      	ldr	r3, [r2, #0]
 8006882:	685b      	ldr	r3, [r3, #4]
 8006884:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 8006886:	2b00      	cmp	r3, #0
 8006888:	f43f af54 	beq.w	8006734 <HAL_UART_IRQHandler+0x60>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800688c:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
 8006890:	4299      	cmp	r1, r3
 8006892:	f67f af4f 	bls.w	8006734 <HAL_UART_IRQHandler+0x60>
        huart->RxXferCount = nb_remaining_rx_data;
 8006896:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800689a:	6993      	ldr	r3, [r2, #24]
 800689c:	2b20      	cmp	r3, #32
 800689e:	d031      	beq.n	8006904 <HAL_UART_IRQHandler+0x230>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80068a0:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068a2:	e852 3f00 	ldrex	r3, [r2]
 80068a6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068aa:	e842 3100 	strex	r1, r3, [r2]
 80068ae:	2900      	cmp	r1, #0
 80068b0:	d1f6      	bne.n	80068a0 <HAL_UART_IRQHandler+0x1cc>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068b2:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068b4:	f102 0308 	add.w	r3, r2, #8
 80068b8:	e853 3f00 	ldrex	r3, [r3]
 80068bc:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068c0:	3208      	adds	r2, #8
 80068c2:	e842 3100 	strex	r1, r3, [r2]
 80068c6:	2900      	cmp	r1, #0
 80068c8:	d1f3      	bne.n	80068b2 <HAL_UART_IRQHandler+0x1de>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80068ca:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068cc:	f102 0308 	add.w	r3, r2, #8
 80068d0:	e853 3f00 	ldrex	r3, [r3]
 80068d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068d8:	3208      	adds	r2, #8
 80068da:	e842 3100 	strex	r1, r3, [r2]
 80068de:	2900      	cmp	r1, #0
 80068e0:	d1f3      	bne.n	80068ca <HAL_UART_IRQHandler+0x1f6>
          huart->RxState = HAL_UART_STATE_READY;
 80068e2:	2320      	movs	r3, #32
 80068e4:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068e8:	2300      	movs	r3, #0
 80068ea:	6623      	str	r3, [r4, #96]	; 0x60
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068ec:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068ee:	e852 3f00 	ldrex	r3, [r2]
 80068f2:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068f6:	e842 3100 	strex	r1, r3, [r2]
 80068fa:	2900      	cmp	r1, #0
 80068fc:	d1f6      	bne.n	80068ec <HAL_UART_IRQHandler+0x218>
          (void)HAL_DMA_Abort(huart->hdmarx);
 80068fe:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8006900:	f7fd ffe2 	bl	80048c8 <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006904:	2302      	movs	r3, #2
 8006906:	6663      	str	r3, [r4, #100]	; 0x64
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006908:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
 800690c:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8006910:	b29b      	uxth	r3, r3
 8006912:	1ac9      	subs	r1, r1, r3
 8006914:	b289      	uxth	r1, r1
 8006916:	4620      	mov	r0, r4
 8006918:	f7ff fedb 	bl	80066d2 <HAL_UARTEx_RxEventCallback>
      return;
 800691c:	e70a      	b.n	8006734 <HAL_UART_IRQHandler+0x60>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800691e:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
 8006922:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8006926:	b29b      	uxth	r3, r3
 8006928:	1ac9      	subs	r1, r1, r3
 800692a:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 800692c:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8006930:	b29b      	uxth	r3, r3
 8006932:	2b00      	cmp	r3, #0
 8006934:	f43f aefe 	beq.w	8006734 <HAL_UART_IRQHandler+0x60>
          && (nb_rx_data > 0U))
 8006938:	2900      	cmp	r1, #0
 800693a:	f43f aefb 	beq.w	8006734 <HAL_UART_IRQHandler+0x60>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800693e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006940:	e852 3f00 	ldrex	r3, [r2]
 8006944:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006948:	e842 3000 	strex	r0, r3, [r2]
 800694c:	2800      	cmp	r0, #0
 800694e:	d1f6      	bne.n	800693e <HAL_UART_IRQHandler+0x26a>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006950:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006952:	f102 0308 	add.w	r3, r2, #8
 8006956:	e853 3f00 	ldrex	r3, [r3]
 800695a:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800695e:	3208      	adds	r2, #8
 8006960:	e842 3000 	strex	r0, r3, [r2]
 8006964:	2800      	cmp	r0, #0
 8006966:	d1f3      	bne.n	8006950 <HAL_UART_IRQHandler+0x27c>
        huart->RxState = HAL_UART_STATE_READY;
 8006968:	2320      	movs	r3, #32
 800696a:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800696e:	2300      	movs	r3, #0
 8006970:	6623      	str	r3, [r4, #96]	; 0x60
        huart->RxISR = NULL;
 8006972:	66a3      	str	r3, [r4, #104]	; 0x68
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006974:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006976:	e852 3f00 	ldrex	r3, [r2]
 800697a:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800697e:	e842 3000 	strex	r0, r3, [r2]
 8006982:	2800      	cmp	r0, #0
 8006984:	d1f6      	bne.n	8006974 <HAL_UART_IRQHandler+0x2a0>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006986:	2302      	movs	r3, #2
 8006988:	6663      	str	r3, [r4, #100]	; 0x64
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800698a:	4620      	mov	r0, r4
 800698c:	f7ff fea1 	bl	80066d2 <HAL_UARTEx_RxEventCallback>
      return;
 8006990:	e6d0      	b.n	8006734 <HAL_UART_IRQHandler+0x60>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006992:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006996:	620b      	str	r3, [r1, #32]
    HAL_UARTEx_WakeupCallback(huart);
 8006998:	4620      	mov	r0, r4
 800699a:	f000 fa83 	bl	8006ea4 <HAL_UARTEx_WakeupCallback>
    return;
 800699e:	e6c9      	b.n	8006734 <HAL_UART_IRQHandler+0x60>
    if (huart->TxISR != NULL)
 80069a0:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	f43f aec6 	beq.w	8006734 <HAL_UART_IRQHandler+0x60>
      huart->TxISR(huart);
 80069a8:	4620      	mov	r0, r4
 80069aa:	4798      	blx	r3
    return;
 80069ac:	e6c2      	b.n	8006734 <HAL_UART_IRQHandler+0x60>
    UART_EndTransmit_IT(huart);
 80069ae:	4620      	mov	r0, r4
 80069b0:	f7ff fe42 	bl	8006638 <UART_EndTransmit_IT>
    return;
 80069b4:	e6be      	b.n	8006734 <HAL_UART_IRQHandler+0x60>
 80069b6:	bf00      	nop
 80069b8:	04000120 	.word	0x04000120
 80069bc:	080066bf 	.word	0x080066bf

080069c0 <UART_SetConfig>:
{
 80069c0:	b510      	push	{r4, lr}
 80069c2:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80069c4:	6883      	ldr	r3, [r0, #8]
 80069c6:	6902      	ldr	r2, [r0, #16]
 80069c8:	4313      	orrs	r3, r2
 80069ca:	6942      	ldr	r2, [r0, #20]
 80069cc:	4313      	orrs	r3, r2
 80069ce:	69c2      	ldr	r2, [r0, #28]
 80069d0:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80069d2:	6801      	ldr	r1, [r0, #0]
 80069d4:	680b      	ldr	r3, [r1, #0]
 80069d6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80069da:	f023 030c 	bic.w	r3, r3, #12
 80069de:	4313      	orrs	r3, r2
 80069e0:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80069e2:	6802      	ldr	r2, [r0, #0]
 80069e4:	6853      	ldr	r3, [r2, #4]
 80069e6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80069ea:	68c1      	ldr	r1, [r0, #12]
 80069ec:	430b      	orrs	r3, r1
 80069ee:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80069f0:	6982      	ldr	r2, [r0, #24]
  tmpreg |= huart->Init.OneBitSampling;
 80069f2:	6a03      	ldr	r3, [r0, #32]
 80069f4:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80069f6:	6801      	ldr	r1, [r0, #0]
 80069f8:	688b      	ldr	r3, [r1, #8]
 80069fa:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80069fe:	4313      	orrs	r3, r2
 8006a00:	608b      	str	r3, [r1, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006a02:	6803      	ldr	r3, [r0, #0]
 8006a04:	4a7b      	ldr	r2, [pc, #492]	; (8006bf4 <UART_SetConfig+0x234>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d00d      	beq.n	8006a26 <UART_SetConfig+0x66>
 8006a0a:	4a7b      	ldr	r2, [pc, #492]	; (8006bf8 <UART_SetConfig+0x238>)
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	d01c      	beq.n	8006a4a <UART_SetConfig+0x8a>
 8006a10:	4a7a      	ldr	r2, [pc, #488]	; (8006bfc <UART_SetConfig+0x23c>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d03a      	beq.n	8006a8c <UART_SetConfig+0xcc>
 8006a16:	4a7a      	ldr	r2, [pc, #488]	; (8006c00 <UART_SetConfig+0x240>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d04a      	beq.n	8006ab2 <UART_SetConfig+0xf2>
 8006a1c:	4a79      	ldr	r2, [pc, #484]	; (8006c04 <UART_SetConfig+0x244>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d05a      	beq.n	8006ad8 <UART_SetConfig+0x118>
 8006a22:	2310      	movs	r3, #16
 8006a24:	e01f      	b.n	8006a66 <UART_SetConfig+0xa6>
 8006a26:	4b78      	ldr	r3, [pc, #480]	; (8006c08 <UART_SetConfig+0x248>)
 8006a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a2a:	f003 0303 	and.w	r3, r3, #3
 8006a2e:	2b03      	cmp	r3, #3
 8006a30:	d809      	bhi.n	8006a46 <UART_SetConfig+0x86>
 8006a32:	e8df f003 	tbb	[pc, r3]
 8006a36:	0402      	.short	0x0402
 8006a38:	6406      	.short	0x6406
 8006a3a:	2301      	movs	r3, #1
 8006a3c:	e013      	b.n	8006a66 <UART_SetConfig+0xa6>
 8006a3e:	2304      	movs	r3, #4
 8006a40:	e011      	b.n	8006a66 <UART_SetConfig+0xa6>
 8006a42:	2308      	movs	r3, #8
 8006a44:	e00f      	b.n	8006a66 <UART_SetConfig+0xa6>
 8006a46:	2310      	movs	r3, #16
 8006a48:	e00d      	b.n	8006a66 <UART_SetConfig+0xa6>
 8006a4a:	4b6f      	ldr	r3, [pc, #444]	; (8006c08 <UART_SetConfig+0x248>)
 8006a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a4e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006a52:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006a56:	d054      	beq.n	8006b02 <UART_SetConfig+0x142>
 8006a58:	d813      	bhi.n	8006a82 <UART_SetConfig+0xc2>
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d053      	beq.n	8006b06 <UART_SetConfig+0x146>
 8006a5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a62:	d152      	bne.n	8006b0a <UART_SetConfig+0x14a>
 8006a64:	2304      	movs	r3, #4
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a66:	69e0      	ldr	r0, [r4, #28]
 8006a68:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8006a6c:	d069      	beq.n	8006b42 <UART_SetConfig+0x182>
    switch (clocksource)
 8006a6e:	2b08      	cmp	r3, #8
 8006a70:	f200 80b9 	bhi.w	8006be6 <UART_SetConfig+0x226>
 8006a74:	e8df f003 	tbb	[pc, r3]
 8006a78:	b790a892 	.word	0xb790a892
 8006a7c:	b7b7b7ab 	.word	0xb7b7b7ab
 8006a80:	ae          	.byte	0xae
 8006a81:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006a82:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006a86:	d142      	bne.n	8006b0e <UART_SetConfig+0x14e>
 8006a88:	2302      	movs	r3, #2
 8006a8a:	e7ec      	b.n	8006a66 <UART_SetConfig+0xa6>
 8006a8c:	4b5e      	ldr	r3, [pc, #376]	; (8006c08 <UART_SetConfig+0x248>)
 8006a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a90:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8006a94:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006a98:	d03b      	beq.n	8006b12 <UART_SetConfig+0x152>
 8006a9a:	d805      	bhi.n	8006aa8 <UART_SetConfig+0xe8>
 8006a9c:	b3db      	cbz	r3, 8006b16 <UART_SetConfig+0x156>
 8006a9e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006aa2:	d13a      	bne.n	8006b1a <UART_SetConfig+0x15a>
 8006aa4:	2304      	movs	r3, #4
 8006aa6:	e7de      	b.n	8006a66 <UART_SetConfig+0xa6>
 8006aa8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006aac:	d137      	bne.n	8006b1e <UART_SetConfig+0x15e>
 8006aae:	2302      	movs	r3, #2
 8006ab0:	e7d9      	b.n	8006a66 <UART_SetConfig+0xa6>
 8006ab2:	4b55      	ldr	r3, [pc, #340]	; (8006c08 <UART_SetConfig+0x248>)
 8006ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ab6:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006aba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006abe:	d030      	beq.n	8006b22 <UART_SetConfig+0x162>
 8006ac0:	d805      	bhi.n	8006ace <UART_SetConfig+0x10e>
 8006ac2:	b383      	cbz	r3, 8006b26 <UART_SetConfig+0x166>
 8006ac4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ac8:	d12f      	bne.n	8006b2a <UART_SetConfig+0x16a>
 8006aca:	2304      	movs	r3, #4
 8006acc:	e7cb      	b.n	8006a66 <UART_SetConfig+0xa6>
 8006ace:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006ad2:	d12c      	bne.n	8006b2e <UART_SetConfig+0x16e>
 8006ad4:	2302      	movs	r3, #2
 8006ad6:	e7c6      	b.n	8006a66 <UART_SetConfig+0xa6>
 8006ad8:	4b4b      	ldr	r3, [pc, #300]	; (8006c08 <UART_SetConfig+0x248>)
 8006ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006adc:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8006ae0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006ae4:	d025      	beq.n	8006b32 <UART_SetConfig+0x172>
 8006ae6:	d805      	bhi.n	8006af4 <UART_SetConfig+0x134>
 8006ae8:	b32b      	cbz	r3, 8006b36 <UART_SetConfig+0x176>
 8006aea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006aee:	d124      	bne.n	8006b3a <UART_SetConfig+0x17a>
 8006af0:	2304      	movs	r3, #4
 8006af2:	e7b8      	b.n	8006a66 <UART_SetConfig+0xa6>
 8006af4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006af8:	d121      	bne.n	8006b3e <UART_SetConfig+0x17e>
 8006afa:	2302      	movs	r3, #2
 8006afc:	e7b3      	b.n	8006a66 <UART_SetConfig+0xa6>
 8006afe:	2302      	movs	r3, #2
 8006b00:	e7b1      	b.n	8006a66 <UART_SetConfig+0xa6>
 8006b02:	2308      	movs	r3, #8
 8006b04:	e7af      	b.n	8006a66 <UART_SetConfig+0xa6>
 8006b06:	2300      	movs	r3, #0
 8006b08:	e7ad      	b.n	8006a66 <UART_SetConfig+0xa6>
 8006b0a:	2310      	movs	r3, #16
 8006b0c:	e7ab      	b.n	8006a66 <UART_SetConfig+0xa6>
 8006b0e:	2310      	movs	r3, #16
 8006b10:	e7a9      	b.n	8006a66 <UART_SetConfig+0xa6>
 8006b12:	2308      	movs	r3, #8
 8006b14:	e7a7      	b.n	8006a66 <UART_SetConfig+0xa6>
 8006b16:	2300      	movs	r3, #0
 8006b18:	e7a5      	b.n	8006a66 <UART_SetConfig+0xa6>
 8006b1a:	2310      	movs	r3, #16
 8006b1c:	e7a3      	b.n	8006a66 <UART_SetConfig+0xa6>
 8006b1e:	2310      	movs	r3, #16
 8006b20:	e7a1      	b.n	8006a66 <UART_SetConfig+0xa6>
 8006b22:	2308      	movs	r3, #8
 8006b24:	e79f      	b.n	8006a66 <UART_SetConfig+0xa6>
 8006b26:	2300      	movs	r3, #0
 8006b28:	e79d      	b.n	8006a66 <UART_SetConfig+0xa6>
 8006b2a:	2310      	movs	r3, #16
 8006b2c:	e79b      	b.n	8006a66 <UART_SetConfig+0xa6>
 8006b2e:	2310      	movs	r3, #16
 8006b30:	e799      	b.n	8006a66 <UART_SetConfig+0xa6>
 8006b32:	2308      	movs	r3, #8
 8006b34:	e797      	b.n	8006a66 <UART_SetConfig+0xa6>
 8006b36:	2300      	movs	r3, #0
 8006b38:	e795      	b.n	8006a66 <UART_SetConfig+0xa6>
 8006b3a:	2310      	movs	r3, #16
 8006b3c:	e793      	b.n	8006a66 <UART_SetConfig+0xa6>
 8006b3e:	2310      	movs	r3, #16
 8006b40:	e791      	b.n	8006a66 <UART_SetConfig+0xa6>
    switch (clocksource)
 8006b42:	2b08      	cmp	r3, #8
 8006b44:	d849      	bhi.n	8006bda <UART_SetConfig+0x21a>
 8006b46:	e8df f003 	tbb	[pc, r3]
 8006b4a:	1f05      	.short	0x1f05
 8006b4c:	48224825 	.word	0x48224825
 8006b50:	4848      	.short	0x4848
 8006b52:	09          	.byte	0x09
 8006b53:	00          	.byte	0x00
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b54:	f7fe fc82 	bl	800545c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8006b58:	2800      	cmp	r0, #0
 8006b5a:	d040      	beq.n	8006bde <UART_SetConfig+0x21e>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006b5c:	6862      	ldr	r2, [r4, #4]
 8006b5e:	0853      	lsrs	r3, r2, #1
 8006b60:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8006b64:	fbb0 f0f2 	udiv	r0, r0, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b68:	f1a0 0210 	sub.w	r2, r0, #16
 8006b6c:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8006b70:	429a      	cmp	r2, r3
 8006b72:	d836      	bhi.n	8006be2 <UART_SetConfig+0x222>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006b74:	b283      	uxth	r3, r0
 8006b76:	f023 030f 	bic.w	r3, r3, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006b7a:	f3c0 0042 	ubfx	r0, r0, #1, #3
 8006b7e:	4318      	orrs	r0, r3
        huart->Instance->BRR = brrtemp;
 8006b80:	6823      	ldr	r3, [r4, #0]
 8006b82:	60d8      	str	r0, [r3, #12]
 8006b84:	2000      	movs	r0, #0
 8006b86:	e01b      	b.n	8006bc0 <UART_SetConfig+0x200>
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b88:	f7fe fc7e 	bl	8005488 <HAL_RCC_GetPCLK2Freq>
        break;
 8006b8c:	e7e4      	b.n	8006b58 <UART_SetConfig+0x198>
        pclk = HAL_RCC_GetSysClockFreq();
 8006b8e:	f7fe fb5b 	bl	8005248 <HAL_RCC_GetSysClockFreq>
        break;
 8006b92:	e7e1      	b.n	8006b58 <UART_SetConfig+0x198>
        pclk = (uint32_t) HSI_VALUE;
 8006b94:	481d      	ldr	r0, [pc, #116]	; (8006c0c <UART_SetConfig+0x24c>)
 8006b96:	e7e1      	b.n	8006b5c <UART_SetConfig+0x19c>
    switch (clocksource)
 8006b98:	481c      	ldr	r0, [pc, #112]	; (8006c0c <UART_SetConfig+0x24c>)
 8006b9a:	e002      	b.n	8006ba2 <UART_SetConfig+0x1e2>
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b9c:	f7fe fc5e 	bl	800545c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8006ba0:	b318      	cbz	r0, 8006bea <UART_SetConfig+0x22a>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006ba2:	6863      	ldr	r3, [r4, #4]
 8006ba4:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8006ba8:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006bac:	f1a0 0210 	sub.w	r2, r0, #16
 8006bb0:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8006bb4:	429a      	cmp	r2, r3
 8006bb6:	d81a      	bhi.n	8006bee <UART_SetConfig+0x22e>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006bb8:	6823      	ldr	r3, [r4, #0]
 8006bba:	b280      	uxth	r0, r0
 8006bbc:	60d8      	str	r0, [r3, #12]
 8006bbe:	2000      	movs	r0, #0
  huart->RxISR = NULL;
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	66a3      	str	r3, [r4, #104]	; 0x68
  huart->TxISR = NULL;
 8006bc4:	66e3      	str	r3, [r4, #108]	; 0x6c
}
 8006bc6:	bd10      	pop	{r4, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 8006bc8:	f7fe fc5e 	bl	8005488 <HAL_RCC_GetPCLK2Freq>
        break;
 8006bcc:	e7e8      	b.n	8006ba0 <UART_SetConfig+0x1e0>
        pclk = HAL_RCC_GetSysClockFreq();
 8006bce:	f7fe fb3b 	bl	8005248 <HAL_RCC_GetSysClockFreq>
        break;
 8006bd2:	e7e5      	b.n	8006ba0 <UART_SetConfig+0x1e0>
        pclk = (uint32_t) LSE_VALUE;
 8006bd4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8006bd8:	e7e3      	b.n	8006ba2 <UART_SetConfig+0x1e2>
    switch (clocksource)
 8006bda:	2001      	movs	r0, #1
 8006bdc:	e7f0      	b.n	8006bc0 <UART_SetConfig+0x200>
 8006bde:	2000      	movs	r0, #0
 8006be0:	e7ee      	b.n	8006bc0 <UART_SetConfig+0x200>
        ret = HAL_ERROR;
 8006be2:	2001      	movs	r0, #1
 8006be4:	e7ec      	b.n	8006bc0 <UART_SetConfig+0x200>
    switch (clocksource)
 8006be6:	2001      	movs	r0, #1
 8006be8:	e7ea      	b.n	8006bc0 <UART_SetConfig+0x200>
 8006bea:	2000      	movs	r0, #0
 8006bec:	e7e8      	b.n	8006bc0 <UART_SetConfig+0x200>
        ret = HAL_ERROR;
 8006bee:	2001      	movs	r0, #1
 8006bf0:	e7e6      	b.n	8006bc0 <UART_SetConfig+0x200>
 8006bf2:	bf00      	nop
 8006bf4:	40013800 	.word	0x40013800
 8006bf8:	40004400 	.word	0x40004400
 8006bfc:	40004800 	.word	0x40004800
 8006c00:	40004c00 	.word	0x40004c00
 8006c04:	40005000 	.word	0x40005000
 8006c08:	40021000 	.word	0x40021000
 8006c0c:	007a1200 	.word	0x007a1200

08006c10 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006c10:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006c12:	f013 0f08 	tst.w	r3, #8
 8006c16:	d006      	beq.n	8006c26 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006c18:	6802      	ldr	r2, [r0, #0]
 8006c1a:	6853      	ldr	r3, [r2, #4]
 8006c1c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006c20:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8006c22:	430b      	orrs	r3, r1
 8006c24:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006c26:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006c28:	f013 0f01 	tst.w	r3, #1
 8006c2c:	d006      	beq.n	8006c3c <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006c2e:	6802      	ldr	r2, [r0, #0]
 8006c30:	6853      	ldr	r3, [r2, #4]
 8006c32:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006c36:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8006c38:	430b      	orrs	r3, r1
 8006c3a:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006c3c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006c3e:	f013 0f02 	tst.w	r3, #2
 8006c42:	d006      	beq.n	8006c52 <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006c44:	6802      	ldr	r2, [r0, #0]
 8006c46:	6853      	ldr	r3, [r2, #4]
 8006c48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c4c:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8006c4e:	430b      	orrs	r3, r1
 8006c50:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006c52:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006c54:	f013 0f04 	tst.w	r3, #4
 8006c58:	d006      	beq.n	8006c68 <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006c5a:	6802      	ldr	r2, [r0, #0]
 8006c5c:	6853      	ldr	r3, [r2, #4]
 8006c5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006c62:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8006c64:	430b      	orrs	r3, r1
 8006c66:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006c68:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006c6a:	f013 0f10 	tst.w	r3, #16
 8006c6e:	d006      	beq.n	8006c7e <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006c70:	6802      	ldr	r2, [r0, #0]
 8006c72:	6893      	ldr	r3, [r2, #8]
 8006c74:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006c78:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8006c7a:	430b      	orrs	r3, r1
 8006c7c:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006c7e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006c80:	f013 0f20 	tst.w	r3, #32
 8006c84:	d006      	beq.n	8006c94 <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006c86:	6802      	ldr	r2, [r0, #0]
 8006c88:	6893      	ldr	r3, [r2, #8]
 8006c8a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006c8e:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8006c90:	430b      	orrs	r3, r1
 8006c92:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006c94:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006c96:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006c9a:	d00a      	beq.n	8006cb2 <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006c9c:	6802      	ldr	r2, [r0, #0]
 8006c9e:	6853      	ldr	r3, [r2, #4]
 8006ca0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006ca4:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8006ca6:	430b      	orrs	r3, r1
 8006ca8:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006caa:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8006cac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006cb0:	d00b      	beq.n	8006cca <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006cb2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006cb4:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006cb8:	d006      	beq.n	8006cc8 <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006cba:	6802      	ldr	r2, [r0, #0]
 8006cbc:	6853      	ldr	r3, [r2, #4]
 8006cbe:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8006cc2:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8006cc4:	430b      	orrs	r3, r1
 8006cc6:	6053      	str	r3, [r2, #4]
}
 8006cc8:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006cca:	6802      	ldr	r2, [r0, #0]
 8006ccc:	6853      	ldr	r3, [r2, #4]
 8006cce:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8006cd2:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8006cd4:	430b      	orrs	r3, r1
 8006cd6:	6053      	str	r3, [r2, #4]
 8006cd8:	e7eb      	b.n	8006cb2 <UART_AdvFeatureConfig+0xa2>

08006cda <UART_WaitOnFlagUntilTimeout>:
{
 8006cda:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006cde:	4605      	mov	r5, r0
 8006ce0:	460e      	mov	r6, r1
 8006ce2:	4617      	mov	r7, r2
 8006ce4:	4699      	mov	r9, r3
 8006ce6:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006cea:	682c      	ldr	r4, [r5, #0]
 8006cec:	69e4      	ldr	r4, [r4, #28]
 8006cee:	ea36 0304 	bics.w	r3, r6, r4
 8006cf2:	bf0c      	ite	eq
 8006cf4:	f04f 0c01 	moveq.w	ip, #1
 8006cf8:	f04f 0c00 	movne.w	ip, #0
 8006cfc:	45bc      	cmp	ip, r7
 8006cfe:	d136      	bne.n	8006d6e <UART_WaitOnFlagUntilTimeout+0x94>
    if (Timeout != HAL_MAX_DELAY)
 8006d00:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 8006d04:	d0f1      	beq.n	8006cea <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d06:	f7fd fcbb 	bl	8004680 <HAL_GetTick>
 8006d0a:	eba0 0009 	sub.w	r0, r0, r9
 8006d0e:	4540      	cmp	r0, r8
 8006d10:	d830      	bhi.n	8006d74 <UART_WaitOnFlagUntilTimeout+0x9a>
 8006d12:	f1b8 0f00 	cmp.w	r8, #0
 8006d16:	d02f      	beq.n	8006d78 <UART_WaitOnFlagUntilTimeout+0x9e>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006d18:	682b      	ldr	r3, [r5, #0]
 8006d1a:	681a      	ldr	r2, [r3, #0]
 8006d1c:	f012 0f04 	tst.w	r2, #4
 8006d20:	d0e3      	beq.n	8006cea <UART_WaitOnFlagUntilTimeout+0x10>
 8006d22:	2e80      	cmp	r6, #128	; 0x80
 8006d24:	d0e1      	beq.n	8006cea <UART_WaitOnFlagUntilTimeout+0x10>
 8006d26:	2e40      	cmp	r6, #64	; 0x40
 8006d28:	d0df      	beq.n	8006cea <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006d2a:	69da      	ldr	r2, [r3, #28]
 8006d2c:	f012 0f08 	tst.w	r2, #8
 8006d30:	d111      	bne.n	8006d56 <UART_WaitOnFlagUntilTimeout+0x7c>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006d32:	69da      	ldr	r2, [r3, #28]
 8006d34:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8006d38:	d0d7      	beq.n	8006cea <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006d3a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006d3e:	621a      	str	r2, [r3, #32]
          UART_EndRxTransfer(huart);
 8006d40:	4628      	mov	r0, r5
 8006d42:	f7ff fbe1 	bl	8006508 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006d46:	2320      	movs	r3, #32
 8006d48:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
          __HAL_UNLOCK(huart);
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	f885 3078 	strb.w	r3, [r5, #120]	; 0x78
          return HAL_TIMEOUT;
 8006d52:	2003      	movs	r0, #3
 8006d54:	e00c      	b.n	8006d70 <UART_WaitOnFlagUntilTimeout+0x96>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006d56:	2408      	movs	r4, #8
 8006d58:	621c      	str	r4, [r3, #32]
          UART_EndRxTransfer(huart);
 8006d5a:	4628      	mov	r0, r5
 8006d5c:	f7ff fbd4 	bl	8006508 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006d60:	f8c5 4084 	str.w	r4, [r5, #132]	; 0x84
          __HAL_UNLOCK(huart);
 8006d64:	2300      	movs	r3, #0
 8006d66:	f885 3078 	strb.w	r3, [r5, #120]	; 0x78
          return HAL_ERROR;
 8006d6a:	2001      	movs	r0, #1
 8006d6c:	e000      	b.n	8006d70 <UART_WaitOnFlagUntilTimeout+0x96>
  return HAL_OK;
 8006d6e:	2000      	movs	r0, #0
}
 8006d70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        return HAL_TIMEOUT;
 8006d74:	2003      	movs	r0, #3
 8006d76:	e7fb      	b.n	8006d70 <UART_WaitOnFlagUntilTimeout+0x96>
 8006d78:	2003      	movs	r0, #3
 8006d7a:	e7f9      	b.n	8006d70 <UART_WaitOnFlagUntilTimeout+0x96>

08006d7c <UART_CheckIdleState>:
{
 8006d7c:	b530      	push	{r4, r5, lr}
 8006d7e:	b083      	sub	sp, #12
 8006d80:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d82:	2300      	movs	r3, #0
 8006d84:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tickstart = HAL_GetTick();
 8006d88:	f7fd fc7a 	bl	8004680 <HAL_GetTick>
 8006d8c:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006d8e:	6822      	ldr	r2, [r4, #0]
 8006d90:	6812      	ldr	r2, [r2, #0]
 8006d92:	f012 0f08 	tst.w	r2, #8
 8006d96:	d10f      	bne.n	8006db8 <UART_CheckIdleState+0x3c>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006d98:	6823      	ldr	r3, [r4, #0]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f013 0f04 	tst.w	r3, #4
 8006da0:	d126      	bne.n	8006df0 <UART_CheckIdleState+0x74>
  huart->gState = HAL_UART_STATE_READY;
 8006da2:	2320      	movs	r3, #32
 8006da4:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006da6:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006daa:	2000      	movs	r0, #0
 8006dac:	6620      	str	r0, [r4, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006dae:	6660      	str	r0, [r4, #100]	; 0x64
  __HAL_UNLOCK(huart);
 8006db0:	f884 0078 	strb.w	r0, [r4, #120]	; 0x78
}
 8006db4:	b003      	add	sp, #12
 8006db6:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006db8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006dbc:	9300      	str	r3, [sp, #0]
 8006dbe:	4603      	mov	r3, r0
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006dc6:	4620      	mov	r0, r4
 8006dc8:	f7ff ff87 	bl	8006cda <UART_WaitOnFlagUntilTimeout>
 8006dcc:	2800      	cmp	r0, #0
 8006dce:	d0e3      	beq.n	8006d98 <UART_CheckIdleState+0x1c>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006dd0:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dd2:	e852 3f00 	ldrex	r3, [r2]
 8006dd6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dda:	e842 3100 	strex	r1, r3, [r2]
 8006dde:	2900      	cmp	r1, #0
 8006de0:	d1f6      	bne.n	8006dd0 <UART_CheckIdleState+0x54>
      huart->gState = HAL_UART_STATE_READY;
 8006de2:	2320      	movs	r3, #32
 8006de4:	67e3      	str	r3, [r4, #124]	; 0x7c
      __HAL_UNLOCK(huart);
 8006de6:	2300      	movs	r3, #0
 8006de8:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
      return HAL_TIMEOUT;
 8006dec:	2003      	movs	r0, #3
 8006dee:	e7e1      	b.n	8006db4 <UART_CheckIdleState+0x38>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006df0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006df4:	9300      	str	r3, [sp, #0]
 8006df6:	462b      	mov	r3, r5
 8006df8:	2200      	movs	r2, #0
 8006dfa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006dfe:	4620      	mov	r0, r4
 8006e00:	f7ff ff6b 	bl	8006cda <UART_WaitOnFlagUntilTimeout>
 8006e04:	2800      	cmp	r0, #0
 8006e06:	d0cc      	beq.n	8006da2 <UART_CheckIdleState+0x26>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e08:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e0a:	e852 3f00 	ldrex	r3, [r2]
 8006e0e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e12:	e842 3100 	strex	r1, r3, [r2]
 8006e16:	2900      	cmp	r1, #0
 8006e18:	d1f6      	bne.n	8006e08 <UART_CheckIdleState+0x8c>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e1a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e1c:	f102 0308 	add.w	r3, r2, #8
 8006e20:	e853 3f00 	ldrex	r3, [r3]
 8006e24:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e28:	3208      	adds	r2, #8
 8006e2a:	e842 3100 	strex	r1, r3, [r2]
 8006e2e:	2900      	cmp	r1, #0
 8006e30:	d1f3      	bne.n	8006e1a <UART_CheckIdleState+0x9e>
      huart->RxState = HAL_UART_STATE_READY;
 8006e32:	2320      	movs	r3, #32
 8006e34:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
      __HAL_UNLOCK(huart);
 8006e38:	2300      	movs	r3, #0
 8006e3a:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
      return HAL_TIMEOUT;
 8006e3e:	2003      	movs	r0, #3
 8006e40:	e7b8      	b.n	8006db4 <UART_CheckIdleState+0x38>

08006e42 <HAL_UART_Init>:
  if (huart == NULL)
 8006e42:	b368      	cbz	r0, 8006ea0 <HAL_UART_Init+0x5e>
{
 8006e44:	b510      	push	{r4, lr}
 8006e46:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8006e48:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8006e4a:	b303      	cbz	r3, 8006e8e <HAL_UART_Init+0x4c>
  huart->gState = HAL_UART_STATE_BUSY;
 8006e4c:	2324      	movs	r3, #36	; 0x24
 8006e4e:	67e3      	str	r3, [r4, #124]	; 0x7c
  __HAL_UART_DISABLE(huart);
 8006e50:	6822      	ldr	r2, [r4, #0]
 8006e52:	6813      	ldr	r3, [r2, #0]
 8006e54:	f023 0301 	bic.w	r3, r3, #1
 8006e58:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006e5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006e5c:	b9e3      	cbnz	r3, 8006e98 <HAL_UART_Init+0x56>
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006e5e:	4620      	mov	r0, r4
 8006e60:	f7ff fdae 	bl	80069c0 <UART_SetConfig>
 8006e64:	2801      	cmp	r0, #1
 8006e66:	d011      	beq.n	8006e8c <HAL_UART_Init+0x4a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006e68:	6822      	ldr	r2, [r4, #0]
 8006e6a:	6853      	ldr	r3, [r2, #4]
 8006e6c:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8006e70:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006e72:	6822      	ldr	r2, [r4, #0]
 8006e74:	6893      	ldr	r3, [r2, #8]
 8006e76:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8006e7a:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8006e7c:	6822      	ldr	r2, [r4, #0]
 8006e7e:	6813      	ldr	r3, [r2, #0]
 8006e80:	f043 0301 	orr.w	r3, r3, #1
 8006e84:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8006e86:	4620      	mov	r0, r4
 8006e88:	f7ff ff78 	bl	8006d7c <UART_CheckIdleState>
}
 8006e8c:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8006e8e:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78
    HAL_UART_MspInit(huart);
 8006e92:	f000 f8f5 	bl	8007080 <HAL_UART_MspInit>
 8006e96:	e7d9      	b.n	8006e4c <HAL_UART_Init+0xa>
    UART_AdvFeatureConfig(huart);
 8006e98:	4620      	mov	r0, r4
 8006e9a:	f7ff feb9 	bl	8006c10 <UART_AdvFeatureConfig>
 8006e9e:	e7de      	b.n	8006e5e <HAL_UART_Init+0x1c>
    return HAL_ERROR;
 8006ea0:	2001      	movs	r0, #1
}
 8006ea2:	4770      	bx	lr

08006ea4 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006ea4:	4770      	bx	lr

08006ea6 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8006ea6:	e7fe      	b.n	8006ea6 <NMI_Handler>

08006ea8 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006ea8:	e7fe      	b.n	8006ea8 <HardFault_Handler>

08006eaa <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006eaa:	e7fe      	b.n	8006eaa <MemManage_Handler>

08006eac <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006eac:	e7fe      	b.n	8006eac <BusFault_Handler>

08006eae <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006eae:	e7fe      	b.n	8006eae <UsageFault_Handler>

08006eb0 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006eb0:	4770      	bx	lr

08006eb2 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006eb2:	4770      	bx	lr

08006eb4 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006eb4:	4770      	bx	lr

08006eb6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006eb6:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006eb8:	f7fd fbd6 	bl	8004668 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006ebc:	bd08      	pop	{r3, pc}
	...

08006ec0 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8006ec0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8006ec2:	4802      	ldr	r0, [pc, #8]	; (8006ecc <DMA1_Channel4_IRQHandler+0xc>)
 8006ec4:	f7fd fd4a 	bl	800495c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8006ec8:	bd08      	pop	{r3, pc}
 8006eca:	bf00      	nop
 8006ecc:	20000400 	.word	0x20000400

08006ed0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8006ed0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8006ed2:	4802      	ldr	r0, [pc, #8]	; (8006edc <USART1_IRQHandler+0xc>)
 8006ed4:	f7ff fbfe 	bl	80066d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8006ed8:	bd08      	pop	{r3, pc}
 8006eda:	bf00      	nop
 8006edc:	20000444 	.word	0x20000444

08006ee0 <_getpid>:
 8006ee0:	2001      	movs	r0, #1
 8006ee2:	4770      	bx	lr

08006ee4 <_kill>:
 8006ee4:	b508      	push	{r3, lr}
 8006ee6:	f7f9 f9bd 	bl	8000264 <__errno>
 8006eea:	2316      	movs	r3, #22
 8006eec:	6003      	str	r3, [r0, #0]
 8006eee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006ef2:	bd08      	pop	{r3, pc}

08006ef4 <_exit>:
 8006ef4:	b508      	push	{r3, lr}
 8006ef6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006efa:	f7ff fff3 	bl	8006ee4 <_kill>
 8006efe:	e7fe      	b.n	8006efe <_exit+0xa>

08006f00 <_read>:
 8006f00:	b570      	push	{r4, r5, r6, lr}
 8006f02:	460c      	mov	r4, r1
 8006f04:	4616      	mov	r6, r2
 8006f06:	2500      	movs	r5, #0
 8006f08:	e006      	b.n	8006f18 <_read+0x18>
 8006f0a:	f3af 8000 	nop.w
 8006f0e:	4621      	mov	r1, r4
 8006f10:	f801 0b01 	strb.w	r0, [r1], #1
 8006f14:	3501      	adds	r5, #1
 8006f16:	460c      	mov	r4, r1
 8006f18:	42b5      	cmp	r5, r6
 8006f1a:	dbf6      	blt.n	8006f0a <_read+0xa>
 8006f1c:	4630      	mov	r0, r6
 8006f1e:	bd70      	pop	{r4, r5, r6, pc}

08006f20 <_write>:
 8006f20:	b570      	push	{r4, r5, r6, lr}
 8006f22:	460c      	mov	r4, r1
 8006f24:	4616      	mov	r6, r2
 8006f26:	2500      	movs	r5, #0
 8006f28:	e004      	b.n	8006f34 <_write+0x14>
 8006f2a:	f814 0b01 	ldrb.w	r0, [r4], #1
 8006f2e:	f3af 8000 	nop.w
 8006f32:	3501      	adds	r5, #1
 8006f34:	42b5      	cmp	r5, r6
 8006f36:	dbf8      	blt.n	8006f2a <_write+0xa>
 8006f38:	4630      	mov	r0, r6
 8006f3a:	bd70      	pop	{r4, r5, r6, pc}

08006f3c <_close>:
 8006f3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006f40:	4770      	bx	lr

08006f42 <_fstat>:
 8006f42:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006f46:	604b      	str	r3, [r1, #4]
 8006f48:	2000      	movs	r0, #0
 8006f4a:	4770      	bx	lr

08006f4c <_isatty>:
 8006f4c:	2001      	movs	r0, #1
 8006f4e:	4770      	bx	lr

08006f50 <_lseek>:
 8006f50:	2000      	movs	r0, #0
 8006f52:	4770      	bx	lr

08006f54 <_sbrk>:
 8006f54:	b510      	push	{r4, lr}
 8006f56:	4603      	mov	r3, r0
 8006f58:	4a0c      	ldr	r2, [pc, #48]	; (8006f8c <_sbrk+0x38>)
 8006f5a:	490d      	ldr	r1, [pc, #52]	; (8006f90 <_sbrk+0x3c>)
 8006f5c:	480d      	ldr	r0, [pc, #52]	; (8006f94 <_sbrk+0x40>)
 8006f5e:	6800      	ldr	r0, [r0, #0]
 8006f60:	b140      	cbz	r0, 8006f74 <_sbrk+0x20>
 8006f62:	480c      	ldr	r0, [pc, #48]	; (8006f94 <_sbrk+0x40>)
 8006f64:	6800      	ldr	r0, [r0, #0]
 8006f66:	4403      	add	r3, r0
 8006f68:	1a52      	subs	r2, r2, r1
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d806      	bhi.n	8006f7c <_sbrk+0x28>
 8006f6e:	4a09      	ldr	r2, [pc, #36]	; (8006f94 <_sbrk+0x40>)
 8006f70:	6013      	str	r3, [r2, #0]
 8006f72:	bd10      	pop	{r4, pc}
 8006f74:	4807      	ldr	r0, [pc, #28]	; (8006f94 <_sbrk+0x40>)
 8006f76:	4c08      	ldr	r4, [pc, #32]	; (8006f98 <_sbrk+0x44>)
 8006f78:	6004      	str	r4, [r0, #0]
 8006f7a:	e7f2      	b.n	8006f62 <_sbrk+0xe>
 8006f7c:	f7f9 f972 	bl	8000264 <__errno>
 8006f80:	230c      	movs	r3, #12
 8006f82:	6003      	str	r3, [r0, #0]
 8006f84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006f88:	e7f3      	b.n	8006f72 <_sbrk+0x1e>
 8006f8a:	bf00      	nop
 8006f8c:	20008000 	.word	0x20008000
 8006f90:	00000400 	.word	0x00000400
 8006f94:	200003b0 	.word	0x200003b0
 8006f98:	200004d0 	.word	0x200004d0

08006f9c <SystemInit>:
  */
void SystemInit(void)
{
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006f9c:	4a03      	ldr	r2, [pc, #12]	; (8006fac <SystemInit+0x10>)
 8006f9e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8006fa2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006fa6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006faa:	4770      	bx	lr
 8006fac:	e000ed00 	.word	0xe000ed00

08006fb0 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8006fb0:	b500      	push	{lr}
 8006fb2:	b089      	sub	sp, #36	; 0x24

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	9304      	str	r3, [sp, #16]
 8006fb8:	9305      	str	r3, [sp, #20]
 8006fba:	9306      	str	r3, [sp, #24]
 8006fbc:	9307      	str	r3, [sp, #28]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006fbe:	9301      	str	r3, [sp, #4]
 8006fc0:	9302      	str	r3, [sp, #8]
 8006fc2:	9303      	str	r3, [sp, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8006fc4:	4815      	ldr	r0, [pc, #84]	; (800701c <MX_TIM2_Init+0x6c>)
 8006fc6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006fca:	6002      	str	r2, [r0, #0]
  htim2.Init.Prescaler = 71;
 8006fcc:	2247      	movs	r2, #71	; 0x47
 8006fce:	6042      	str	r2, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006fd0:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 65535;
 8006fd2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006fd6:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006fd8:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006fda:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8006fdc:	f7ff f982 	bl	80062e4 <HAL_TIM_Base_Init>
 8006fe0:	b990      	cbnz	r0, 8007008 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006fe2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006fe6:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8006fe8:	a904      	add	r1, sp, #16
 8006fea:	480c      	ldr	r0, [pc, #48]	; (800701c <MX_TIM2_Init+0x6c>)
 8006fec:	f7ff f9b8 	bl	8006360 <HAL_TIM_ConfigClockSource>
 8006ff0:	b968      	cbnz	r0, 800700e <MX_TIM2_Init+0x5e>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006ff6:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8006ff8:	a901      	add	r1, sp, #4
 8006ffa:	4808      	ldr	r0, [pc, #32]	; (800701c <MX_TIM2_Init+0x6c>)
 8006ffc:	f7ff fa30 	bl	8006460 <HAL_TIMEx_MasterConfigSynchronization>
 8007000:	b940      	cbnz	r0, 8007014 <MX_TIM2_Init+0x64>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8007002:	b009      	add	sp, #36	; 0x24
 8007004:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8007008:	f7fd f8b0 	bl	800416c <Error_Handler>
 800700c:	e7e9      	b.n	8006fe2 <MX_TIM2_Init+0x32>
    Error_Handler();
 800700e:	f7fd f8ad 	bl	800416c <Error_Handler>
 8007012:	e7ee      	b.n	8006ff2 <MX_TIM2_Init+0x42>
    Error_Handler();
 8007014:	f7fd f8aa 	bl	800416c <Error_Handler>
}
 8007018:	e7f3      	b.n	8007002 <MX_TIM2_Init+0x52>
 800701a:	bf00      	nop
 800701c:	200003b4 	.word	0x200003b4

08007020 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM2)
 8007020:	6803      	ldr	r3, [r0, #0]
 8007022:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007026:	d000      	beq.n	800702a <HAL_TIM_Base_MspInit+0xa>
 8007028:	4770      	bx	lr
{
 800702a:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800702c:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8007030:	69da      	ldr	r2, [r3, #28]
 8007032:	f042 0201 	orr.w	r2, r2, #1
 8007036:	61da      	str	r2, [r3, #28]
 8007038:	69db      	ldr	r3, [r3, #28]
 800703a:	f003 0301 	and.w	r3, r3, #1
 800703e:	9301      	str	r3, [sp, #4]
 8007040:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8007042:	b002      	add	sp, #8
 8007044:	4770      	bx	lr
	...

08007048 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8007048:	b508      	push	{r3, lr}
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800704a:	480b      	ldr	r0, [pc, #44]	; (8007078 <MX_USART1_UART_Init+0x30>)
 800704c:	4b0b      	ldr	r3, [pc, #44]	; (800707c <MX_USART1_UART_Init+0x34>)
 800704e:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 8007050:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8007054:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8007056:	2300      	movs	r3, #0
 8007058:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800705a:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800705c:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX;
 800705e:	2208      	movs	r2, #8
 8007060:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007062:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8007064:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8007066:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8007068:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800706a:	f7ff feea 	bl	8006e42 <HAL_UART_Init>
 800706e:	b900      	cbnz	r0, 8007072 <MX_USART1_UART_Init+0x2a>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8007070:	bd08      	pop	{r3, pc}
    Error_Handler();
 8007072:	f7fd f87b 	bl	800416c <Error_Handler>
}
 8007076:	e7fb      	b.n	8007070 <MX_USART1_UART_Init+0x28>
 8007078:	20000444 	.word	0x20000444
 800707c:	40013800 	.word	0x40013800

08007080 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8007080:	b510      	push	{r4, lr}
 8007082:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007084:	2300      	movs	r3, #0
 8007086:	9303      	str	r3, [sp, #12]
 8007088:	9304      	str	r3, [sp, #16]
 800708a:	9305      	str	r3, [sp, #20]
 800708c:	9306      	str	r3, [sp, #24]
 800708e:	9307      	str	r3, [sp, #28]
  if(uartHandle->Instance==USART1)
 8007090:	6802      	ldr	r2, [r0, #0]
 8007092:	4b23      	ldr	r3, [pc, #140]	; (8007120 <HAL_UART_MspInit+0xa0>)
 8007094:	429a      	cmp	r2, r3
 8007096:	d001      	beq.n	800709c <HAL_UART_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8007098:	b008      	add	sp, #32
 800709a:	bd10      	pop	{r4, pc}
 800709c:	4604      	mov	r4, r0
    __HAL_RCC_USART1_CLK_ENABLE();
 800709e:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 80070a2:	699a      	ldr	r2, [r3, #24]
 80070a4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80070a8:	619a      	str	r2, [r3, #24]
 80070aa:	699a      	ldr	r2, [r3, #24]
 80070ac:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80070b0:	9201      	str	r2, [sp, #4]
 80070b2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80070b4:	695a      	ldr	r2, [r3, #20]
 80070b6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80070ba:	615a      	str	r2, [r3, #20]
 80070bc:	695b      	ldr	r3, [r3, #20]
 80070be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070c2:	9302      	str	r3, [sp, #8]
 80070c4:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80070c6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80070ca:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80070cc:	2302      	movs	r3, #2
 80070ce:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80070d0:	2303      	movs	r3, #3
 80070d2:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80070d4:	2307      	movs	r3, #7
 80070d6:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80070d8:	a903      	add	r1, sp, #12
 80070da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80070de:	f7fd fc97 	bl	8004a10 <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA1_Channel4;
 80070e2:	4810      	ldr	r0, [pc, #64]	; (8007124 <HAL_UART_MspInit+0xa4>)
 80070e4:	4b10      	ldr	r3, [pc, #64]	; (8007128 <HAL_UART_MspInit+0xa8>)
 80070e6:	6003      	str	r3, [r0, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80070e8:	2310      	movs	r3, #16
 80070ea:	6043      	str	r3, [r0, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80070ec:	2300      	movs	r3, #0
 80070ee:	6083      	str	r3, [r0, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80070f0:	2280      	movs	r2, #128	; 0x80
 80070f2:	60c2      	str	r2, [r0, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80070f4:	6103      	str	r3, [r0, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80070f6:	6143      	str	r3, [r0, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80070f8:	6183      	str	r3, [r0, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80070fa:	61c3      	str	r3, [r0, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80070fc:	f7fd fb82 	bl	8004804 <HAL_DMA_Init>
 8007100:	b958      	cbnz	r0, 800711a <HAL_UART_MspInit+0x9a>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8007102:	4b08      	ldr	r3, [pc, #32]	; (8007124 <HAL_UART_MspInit+0xa4>)
 8007104:	6723      	str	r3, [r4, #112]	; 0x70
 8007106:	625c      	str	r4, [r3, #36]	; 0x24
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8007108:	2200      	movs	r2, #0
 800710a:	4611      	mov	r1, r2
 800710c:	2025      	movs	r0, #37	; 0x25
 800710e:	f7fd fae3 	bl	80046d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8007112:	2025      	movs	r0, #37	; 0x25
 8007114:	f7fd fb18 	bl	8004748 <HAL_NVIC_EnableIRQ>
}
 8007118:	e7be      	b.n	8007098 <HAL_UART_MspInit+0x18>
      Error_Handler();
 800711a:	f7fd f827 	bl	800416c <Error_Handler>
 800711e:	e7f0      	b.n	8007102 <HAL_UART_MspInit+0x82>
 8007120:	40013800 	.word	0x40013800
 8007124:	20000400 	.word	0x20000400
 8007128:	40020044 	.word	0x40020044

0800712c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800712c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007164 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8007130:	f7ff ff34 	bl	8006f9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8007134:	480c      	ldr	r0, [pc, #48]	; (8007168 <LoopForever+0x6>)
  ldr r1, =_edata
 8007136:	490d      	ldr	r1, [pc, #52]	; (800716c <LoopForever+0xa>)
  ldr r2, =_sidata
 8007138:	4a0d      	ldr	r2, [pc, #52]	; (8007170 <LoopForever+0xe>)
  movs r3, #0
 800713a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800713c:	e002      	b.n	8007144 <LoopCopyDataInit>

0800713e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800713e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007140:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007142:	3304      	adds	r3, #4

08007144 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007144:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007146:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007148:	d3f9      	bcc.n	800713e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800714a:	4a0a      	ldr	r2, [pc, #40]	; (8007174 <LoopForever+0x12>)
  ldr r4, =_ebss
 800714c:	4c0a      	ldr	r4, [pc, #40]	; (8007178 <LoopForever+0x16>)
  movs r3, #0
 800714e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007150:	e001      	b.n	8007156 <LoopFillZerobss>

08007152 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007152:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007154:	3204      	adds	r2, #4

08007156 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007156:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007158:	d3fb      	bcc.n	8007152 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800715a:	f7f9 f8ab 	bl	80002b4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800715e:	f7fd f849 	bl	80041f4 <main>

08007162 <LoopForever>:

LoopForever:
    b LoopForever
 8007162:	e7fe      	b.n	8007162 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8007164:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8007168:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800716c:	20000104 	.word	0x20000104
  ldr r2, =_sidata
 8007170:	080073b4 	.word	0x080073b4
  ldr r2, =_sbss
 8007174:	20000108 	.word	0x20000108
  ldr r4, =_ebss
 8007178:	200004cc 	.word	0x200004cc

0800717c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800717c:	e7fe      	b.n	800717c <ADC1_2_IRQHandler>
	...

08007180 <_init>:
 8007180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007182:	bf00      	nop
 8007184:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007186:	bc08      	pop	{r3}
 8007188:	469e      	mov	lr, r3
 800718a:	4770      	bx	lr

0800718c <_fini>:
 800718c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800718e:	bf00      	nop
 8007190:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007192:	bc08      	pop	{r3}
 8007194:	469e      	mov	lr, r3
 8007196:	4770      	bx	lr
